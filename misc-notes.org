#+TITLE: miscellaneous notes

- Time-stamp: <2018-09-16 15:25:27 tamara.temple>

Just some notes on making this repo

** Converting markdown to org

[[https://pandoc.org/index.html][Pandoc]] does an excellent job of converting regular markdown to org mode. It needs a bit of help afterwards when converting [[https://jekyllrb.com/][Jekyll]] posts, however.

Conversion utility:

#+BEGIN_SRC shell-script
  pandoc --wrap=none -f markdown -t org <SOURCE >TARGET

  # or simply

  pandoc --wrap=none -o post_file.org post_file.markdown
#+END_SRC

~pandoc~ is smart enough to figure out the source and target formats from the file extensions.

** Fixing frontmatter

~Pandoc~ sucks at pulling over the ~Jekyll~ frontmatter, so that has to be dealt with manually.

A typical bit of frontmatter:

#+BEGIN_SRC yaml
  ---
  layout: post
  title: "Delete a remote git branch"
  date: 2013-10-05 08:03
  categories: [git]
  tags: [remote, branch, remove]
  source: http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/5977604#5977604
  ---
#+END_SRC


- the ~title:~ yaml key is used in the org file with the ~#+TITLE:~ keyword:

#+BEGIN_SRC org
  ,#+TITLE: Delete a remote git branch
#+END_SRC

The other frontmatter is just becoming a plain list:

#+BEGIN_SRC org
  - Time-stamp: <>
  - original date: 2013-10-05 08:03
  - keywords: git, remote, branch, remove
  - source: http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/5977604#5977604
#+END_SRC

The time stamp thingie, ~<>~ gets filled in by Emacs when the file is saved, giving the last time the file was edited and saved. /Keywords/ are the former categories and tags from the ~Jekyll~ post.
** Fixing code listings

This is the most different for ~pandoc~ since ~Jekyll~ uses a Liquid tag ~highlight~ to format code listings. It /also/ uses the standard Github-flavoured Markdown [GFM] /code-fence/, which at least pandoc tries to make work.

Org mode in emacs, however, has a really spiffy way to put in code examples. If you type ~<s~ and then hit ~TAB~ is expands to a ~#+BEGIN_SRC/#+END_SRC~ block, and you can put the language mode at the end of the first ~#+BEGIN_SRC~ line:

#+BEGIN_SRC org
  ,#+BEGIN_SRC javascript
    // some javascript code
  ,#+END_SRC
#+END_SRC

When you drop the cursor into the block, hit ~C-c '~ a separate window opens in the programming mode specified, which is really cool.

I've been snagging the code examples out of the markdown file as is and pasting them in the source editing window after deleting the highlight block from the org version.
