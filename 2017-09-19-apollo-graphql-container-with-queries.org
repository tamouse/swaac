The [[http://dev.apollodata.com/react/api-graphql.html][graphql]]
function in [[http://dev.apollodata.com/][Apollo]]
Â [[http://dev.apollodata.com/react/][client]] wraps queries with a
=data= property. The /canonical/ component wrapped with a query should
look like this:

{% highlight jsx %} const MyComponent = props => {

const { data: { loading, error, data\_name } } = this.props; if
(loading) { return

#+BEGIN_HTML
  <p>
#+END_HTML

Loading...

#+BEGIN_HTML
  </p>
#+END_HTML

; } else if (error) { return

#+BEGIN_HTML
  <p>
#+END_HTML

Error!

#+BEGIN_HTML
  </p>
#+END_HTML

; } else { return (

#+BEGIN_HTML
  <div>
#+END_HTML

#+BEGIN_EXAMPLE
        { blah blah }
      </div>
    );
#+END_EXAMPLE

}

} {% endhighlight %}

I've been using the pattern of wrapping a super-presentational component
in the graphql component, so that file only really deals with one thing.
This might be overkill; I could also write the file that the =graphql=
HOC wraps in another file, too, and just remember to process the
=loading=, =error=, and returned data.

The form typically given in the tutorials and docs looks rather like
this when put all together:

{% highlight jsx %} import React from 'react' // import PropTypes from
'prop-types' import styled from 'styled-components' import {graphql,
gql} from 'react-apollo' import PostSummary from './PostSummary'

const listPosts =
gql=query Posts{viewer {public_posts {id title excerpt publishedAt}}}=

const PostsIndex = props => { const { data: { loading, error, viewer},
...rest } = props

if (loading) return Loading... if (error) return (

#+BEGIN_HTML
  <h3>
#+END_HTML

Error:

#+BEGIN_HTML
  </h3>
#+END_HTML

#+BEGIN_EXAMPLE
      <p>{error}</p>
    </Error>
#+END_EXAMPLE

)

const {public\_posts} = viewer

if (!public\_posts) return ( <PostsListing {...rest}>No posts )

return ( <PostsListing {...rest}>

#+BEGIN_HTML
  <h1>
#+END_HTML

Posts

#+BEGIN_HTML
  </h1>
#+END_HTML

#+BEGIN_EXAMPLE
      {public_posts.map((post, idx) => {
        return <PostSummary post={post} key={idx} />
      })}
    </PostsListing>
#+END_EXAMPLE

) }

const PostsIndexWithData = graphql(listPosts)(PostsIndex)

PostsIndexWithData.propTypes = {} PostsIndexWithData.defaultProps = {}

export default PostsIndexWithData

const Loading =
styled.div=font-size: 2em;   color: RebeccaPurple;   background-color: PapayaWhip;   margin: 10px;   padding: 10px;=

const Error =
styled.div=backgound-color: rgb(245, 147, 156, 0.7);   color: red;   border: 1 solid red;   margin: 10px;   padding: 10px;=

const PostsListing =
styled.div=backgound-color: rgb(252, 243, 207, 0.7);   color: black;   border: 1 solid black;   margin: 10px;   padding: 10px;=

{% endhighlight %}

{% include graphql\_learning\_project %}
