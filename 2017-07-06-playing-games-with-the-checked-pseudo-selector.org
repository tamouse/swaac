I'm not sure what made me think of this, but I got a wild hair and
thought I'd try it out.

The =:checked= CSS pseudo-selector lets you select a /checked/ checkbox
or radio button. The question I wondered, would this be a cheap-azz way
of making a sliding sidebar? And the answer is, yes it could.

Over at [[file:%7B%7Bpage.source%7D%7D][codepen]] I left a pen showing
just that:

#+BEGIN_HTML
  <iframe height="265" scrolling="no" title="what can you do with :checked?" src="//codepen.io/tamouse/embed/YQjVNb/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">
#+END_HTML

See the Pen what can you do with :checked? by Tamara Temple (@tamouse)
on CodePen.

#+BEGIN_HTML
  </iframe>
#+END_HTML

Some of the interesting bits:

- The body is set to =display: flex= and =flex-direction: row=, which
  would normally put the 3 major body parts, =input=, =aside=, and
  =article= horizontally, but...

- The input checkbox is positioned absolute taking it out of the flex
  flow, so only the =aside= and =article= are flexed

- After setting everything up for the "normal" state, with the checkbox
  /un/checked, and the sidebar /hidden/, I added the last CSS rule to
  display the sidebar when the input checkbox is checked.

*** normal state
    :PROPERTIES:
    :CUSTOM_ID: normal-state
    :END:

{% highlight scss %} .sidebar { width: 20px; background: tomato;
padding-top: 40px; > * { display: none; } } {% endhighlight %}

*** checked state
    :PROPERTIES:
    :CUSTOM_ID: checked-state
    :END:

{% highlight scss %} input.sidebar-toggle:checked ~ .sidebar { width:
200px; > * { display: inherit; } } {% endhighlight %}

Of course, this could be taken in all sorts of directions, but I wanted
to try this out to see if it works.
