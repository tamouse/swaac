Justin does another great job explaining how to preload a rails
association scope by turning it into an association on the same model
with a =where= clause, and then explains how to keep it DRY.

If you're just using scopes, you end up creating an N+1 query when
gathering the association.

{% highlight ruby %} class Review < ActiveRecord::Base belongs\_to
:restaurant belongs\_to :user

scope :positive, -> { where("rating > 3.0") } end

class Restaurant < ActiveRecord::Base has\_many :reviews has\_many
:postitive\_reviews, -> { positive }, class\_name: "Review" end

class User < ActiveRecord::Base has\_many :reviews has\_many
:postitive\_reviews, -> { positive }, class\_name: "Review" end {%
endhighlight %}

The scope =positive= can be reused in other scope-type statements, such
as the associatoins above.

Pre-loading (where we started) is like:

{% highlight ruby %} restaurants =
Restaurant.includes(:positive\_reviews).first(5) {% endhighlight %}

This solves the =N+1= problem using just scopes alone.
