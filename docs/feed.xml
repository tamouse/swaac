<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2020-03-21T04:55:22-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-21-setting-git-default-editor.md</id>
      <updated>2020-03-21T04:55:22-05:00</updated>
      <title>2020-03-21-setting-git-default-editor</title>
      <content>---
category: tools
keywords: git, editor, emacs
---


# Setting git&#39;s default editor #

By default, when git needs to fire up an editor to do something such as write a commmit message, it uses whatever is configured as the default editor for the user. (Configuring the user&#39;s default editor is an entirely differnt topic.)

There are a couple of ways to change this for `git`:

1. setting one or two environment variables
2. modifying the global git configuration

Of these, I long used the first way, since the environment variables are also recognized by other command line tools (although not all).

Recently I was made aware of method two, modifying the global git configuration.



## Settingh environment variables ##


Git will use two common environment variables, `EDITOR` and `VISUAL`, to determine what editor it should run. Some tools make a distinction between when these are used:

- `EDITOR` is used generally in an environments where there may or may not be a terminal available.
- `VISUAL` is used specifically when there is a terminal available.

Git doesn&#39;t really care, you can set one or the other. In the course of my career, I settled on the expediency of setting them both to the same thing and calling it a day.

## Modifying git global config ##

Head over to &lt;https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&gt; to see the official documentation on modifying the config.

The specific part to set the editor is described here:

&gt; **core.editor**
&gt;
&gt; By default, Git uses whatever youâ€™ve set as your default text editor via one of the shell environment variables VISUAL or EDITOR, or else falls back to the vi editor to create and edit your commit and tag messages. To change that default to something else, you can use the core.editor setting:
&gt;
&gt;     $ git config --global core.editor emacs
&gt;
&gt; Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages.

They are already speaking my kind of language. But I want to go just a bit further and use `emacsclient` so as to not call up another instance of the full emacs editor if I can help it. Instead, I set the core.editor value to:

    emacsclient -a emacs

which will run emacsclient to use the currently running instance of emacs, *and*, if there is no currently running instance, start one up.

### A caveat ###

I initially used the command line arguments I normally run emacsclient with: `-c -n`, which say to open a new frame and not to wait for the editing session to finish. Bad move. If the git command is not forced to wait while I modify the commit message, it assumes it wasn&#39;t changed and aborts the commit. I also didn&#39;t want to have it be spawning new frames since that just gets messy if I forget to close them, which I most often do.


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/2020-03-10-using-rails-url-helpers-outside-a-controller.md</id>
      <updated>2020-03-10T20:42:10-05:00</updated>
      <title>2020-03-10-using-rails-url-helpers-outside-a-controller</title>
      <content>---
layout: post
title: &quot;Using Rails url_helpers outside a controller context&quot;
date: 2020-03-10T20:38
categories: [rails]
tags: [rails, helpers, url_helpers]
source: https://stackoverflow.com/a/5456103
---

Sometimes I want to use a Rails url helper method outside the controller context.

Link: [Explanation on StackOverflow](https://stackoverflow.com/a/5456103 &quot;good examples for doing this&quot;)

In essence:

``` ruby
Rails.application.routes.url_helpers.new_post_path
```


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number.md</id>
      <updated>2020-02-10T09:10:39-06:00</updated>
      <title>2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number</title>
      <content>---
title: &quot;How To: Preface your git commit messages with the Jira ticket number&quot;
date: 2020-02-10T08:57:37-0600
categories: [&quot;git&quot;]
tags: [git-follies, commit-message, jira, how-to]
published: false
---

This is something you can build into your project&#39;s git hooks, that will preface your commit messages with the Jira ticket number based on the branch name.

[WIP]

We want something that will pull the tracking ticket number from the branch, like so:

| branch name                     | message prefix |
|:-------------------------------:|:--------------:|
| `kick-1234-this-cool-feature`   | `[KICK-1234]`  |
| `bug/KICK-789-woops`            | `[KICK-789]`   |
| `feature/kick_2100_the_precept` | `[KICK-2100]`  |
| `777_sunset_life`               | `[777]`        |
|                                 |                |

Create a hook for `.git/hooks/prepare-commit-msg` with the following script:

``` shell
# Current branch name: &quot;KICK-3586_revert_nullable_custom_field_creation&quot;
$ git rev-parse --abbrev-ref HEAD | ruby -ne &#39;ticket = %r{^(?&lt;proj&gt;\w+)[-_ ](?&lt;num&gt;\d+)}.match($_).named_captures; puts &quot;[#{ticket[&quot;proj&quot;].upcase}-#{ticket[&quot;num&quot;]}]&quot; &#39;
# =&gt; [KICK-3586]

```

Make sure the hook is executable.


When you make a commit, git will execute `.git/hooks/prepare-commit-msg .git/COMMIT_MESSAGE`

Adding the hook to a code repo.




Inspiration: https://medium.com/better-programming/how-to-automatically-add-the-ticket-number-in-git-commit-message-bda5426ded05
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-05-git-follies-save-points-and-silent-reverts.md</id>
      <updated>2020-02-05T08:40:37-06:00</updated>
      <title>2020-02-05-git-follies-save-points-and-silent-reverts</title>
      <content>---
title: &quot;Git Follies: Setting Save Points, and Performing Silent Reverts&quot;
date: 2020-02-05T08:26:22-0600
categories: [version-control]
tags: [git, branching, reverting]
series: &quot;The Git Follies&quot;
---

This is a little thing I&#39;ve used when working with git on multi-person projects with a remote repository and continuous integration and testing runs triggered by pushing a commit to the remote repository.

Most people know at least a little bit about branching and merging with git. A lot of folks aren&#39;t all that comfortable with doing that, all the same. For these folks, I want to offer a little bit of guideance, and hopefully extend that comfort a little bit nmore in working with git.

## Save Points ##

The first major concept I like to think of as &quot;save points&quot;. If you&#39;ve ever played a video or computer game that has lots of problem solving challenges, bosses to beat, levels to complete, they have the idea of setting a save point, essentially a place to come back into the game at the level you&#39;re working on without having to replay all the levels you&#39;ve already beaten.

### Commits are Save Points ###

Git commits act like save points for your work. If you&#39;re going along and decide what you&#39;ve done just won&#39;t work, you can reset to the last commit fairly easily with:

``` shell
git reset --hard
```

This just wipes all the changes in tracked files. It still leaves untracked files laying about though, which can be confusing, so you should run this set of commands:

``` shell
git status
git reset --hard
git status # shows untracked files
```

You can remove the untracked files using `rm` or use the `git clean` command:

``` shell
git status
git reset --hard
git status # shows untracked files
git clean --force
git status
```

And now you should be back at the previous commit, ready to start over.

A **major** caveat: this works *only* if all the work remains local and is not pushed up to the remote. More on this later.

But what if you don&#39;t want to get rid of the work, but just want to try another approach?

### Sub-branches are also save points ###

You can build a habit of creating a sub-branch when you embark on your task, and that makes it easier to try several approaches.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-04-ci-skip-in-commit-title-bad.md</id>
      <updated>2020-02-04T14:36:16-06:00</updated>
      <title>2020-02-04-ci-skip-in-commit-title-bad</title>
      <content>---
title: &quot;TIL: putting [ci skip] in the commit message title breaks merge builds&quot;
date: 2020-02-04T13:04:05-0600
categories: [git]
tags: [git, CI, builds, merges, commit-messages, skip]
---

A common way to keep a specific commit from triggering a build on continuous integration services, such as travis and circle (maybe others) is to use `[ci skip]` or `[skip ci]` in the commit message.

If the skip directive is put in the commit message&#39;s first line, which is treated as the commit message **title**, it can cause problems for merges down the line.

When the list of commits is included in a merge commit&#39;s message body, the skip directive shows up, which causes the merge build to be skipped as well.

## bad commit message:

``` text
[ci skip] fix some typos
```

The directive will show up in the merge commit message body in the list of commits.


## good commit message:

``` text
updated the README

- fixed some typos and broken links

[ci skip]
```

Only the title shows up in the merge commit message body, the skip directive does not.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2016/12/html-color-codes.org</id>
      <updated>2020-01-19T04:27:23-06:00</updated>
      <title>html-color-codes</title>
      <content>f* Link: [[http://htmlcolorcodes.com/][HTML Color Codes]]               :webdesign:tools:color:css:html:swaac:
  :PROPERTIES:
  :CAPTURE_DATE: [2016-12-14 Wed 19:31]
  :LINK:     http://htmlcolorcodes.com/
  :TITLE:    HTML Color Codes
  :END:

  [[http://htmlcolorcodes.com/][HTML Color Codes]]

  Get HTML color codes, Hex color codes, RGB and HSL values
  with our color picker, color chart and HTML color names. Let&#39;s
  go!

  Easily find HTML color codes for your website using our
  color picker, color chart and HTML color names with Hex color codes,
  RGB and HSL values.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/03/more-html5-semantics.org</id>
      <updated>2020-01-19T04:23:38-06:00</updated>
      <title>more-html5-semantics</title>
      <content>*** More HTML5 Semantics: Changes to Existing Features
    :PROPERTIES:
    :CAPTURE_DATE: [2017-03-02 Thu 08:32]
    :LINK:     https://www.sitepoint.com/more-html5-semantics-changes-to-existing-features/?utm_source=frontendfocus&amp;utm_medium=email
    :TITLE:    More HTML5 Semantics: Changes to Existing Features
    :DESCRIPTION: While new elements and APIs have been the primary focus of HTML5, this latest iteration of web markup has also brought with it changes to existing elements.
    :END:

Link to article [[https://www.sitepoint.com/more-html5-semantics-changes-to-existing-features/][More HTML5 Semantics: Changes to Existing Features]]

&gt; &quot;While new elements and APIs have been the primary focus of HTML5, this latest iteration of web markup has also brought with it changes to existing elements.&quot;


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2015/03/how-to-use-alt-text-attribute-properly.org</id>
      <updated>2020-01-19T04:19:24-06:00</updated>
      <title>[[http://www.garcialo.com/html101/alt2.html][how to use alt text attribute]]</title>
      <content>* [[http://www.garcialo.com/html101/alt2.html][how to use alt text attribute]]

  From: [[http://www.garcialo.com/html101/][HTML 101 Because You Were Taught Wrong]] added: [2015-03-17 Tue 07:18]

** HTML Techniques for providing useful text alternatives: http://www.w3.org/TR/html-alt-techniques/

   - Always include the alt attribute

   - Put nothing in the alt attribute:
     - If the image is just eye candy
     - No important function
     - No important information

   - Images of text: alt should be the

   - Keep it short and sweet.
     - &quot;samurai cutting a watermelon in half&quot;
     - &quot;child skiing down a mountain&quot;
     - &quot;woman laughing alone with salad&quot; (/you&#39;re never alone with salad :grinning: /)
   - Don&#39;t say it&#39;s an image or photo.
   - Have your content creator provide the alt text.
   - &quot;What information are you trying to convey with this image?&quot;

** Alt text on social media

   See: [[https://caneadventures.blog/2019/12/02/alt-text-on-social-media/][Alt text on Social Media, Cane Adventures blog]] for a perspective on using alt text from a visually impaired blogger
   
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2015/01/just-use-double-quotes.org</id>
      <updated>2020-01-19T03:54:57-06:00</updated>
      <title>[[http://viget.com/extend/just-use-double-quoted-ruby-strings?utm_source=rubyweekly&amp;utm_medium=email][Just use double quoted strings]] [2015-01-25 Sun 08:55]</title>
      <content>* [[http://viget.com/extend/just-use-double-quoted-ruby-strings?utm_source=rubyweekly&amp;utm_medium=email][Just use double quoted strings]] [2015-01-25 Sun 08:55]

  #+AUTHOR: Lawson Kurtz
  #+TWITTER: @LawsonKurtz
  #+DATE: [2015-01-22 Thu]

  tl;dr: there is no significant performance difference, compared the
  human problems of misunderstanding or forgetting to change from
  single to double when you do decide to interpolate.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/01/module-extends-self.org</id>
      <updated>2020-01-19T03:49:20-06:00</updated>
      <title>Module extend self</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline author:t broken-links:nil
#+OPTIONS: c:nil creator:nil d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:nil
#+OPTIONS: todo:t |:t
#+TITLE: module-extends-self
#+DATE: &lt;2020-01-19 Sun&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)

* Module extend self

  #+SOURCE: https://medium.com/@vsavkin/hexagonal-architecture-for-rails-developers-8b1fee64a613

  Buried in this blog post, I found an interesting construction. See
  the Example =module OrderRepository=.

  I had never seen the =extend self= construct before, so I did a
  little playing around in Pry.

  Using =extend self= in a module is similar to calling =class &lt;&lt;
  self ... end= with all the method definitions inside it. It&#39;s yet
  another way to get access to a module&#39;s eigenclass.

  This goes along with using =def self.my_method= and using
  =module_function= to also making piecemeal module methods, the main
  distinction being that using =def self.my_method= creates a method
  that the *only* receiver will be the module itself, not any classes
  that include the module.

  #+begin_src ruby
    module MyMod
      extend self

      def hi_there
        &quot;hi there from inside MyMod&quot;
      end

      private

      def go_away
        &quot;go away now inside MyMod&quot;
      end
    end

    MyMod.hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyMod.go_away

    class MyClass
      include MyMod

      def call_hi_there
        hi_there
      end
    end

    MyClass.hi_there
    MyClass.new.hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyClass.call_hi_there
    MyClass.new.call_hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyClass.go_away
    MyClass.new.go_away

    module YourMod
      class &lt;&lt; self
        def hi_there
          &quot;hi there from inside YourMod&quot;
        end

        private

        def go_away
          &quot;go away now inside YourMod&quot;
        end
      end

      def que?
        &quot;que? inside YourMod&quot;
      end
    end

    YourMod.hi_there #=&gt; &quot;hi there from inside YourMod&quot;
    YourMod.go_away
    YourMod.que?

    module TheirMod
      def hi_there
        &quot;hi there from inside TheirMod&quot;
      end

      method_function :hi_there
    end

    TheirMod.hi_there #=&gt; &quot;hi there from inside TheirMod&quot;

    module ItsMod
      def self.hi_there
        &quot;hi there from inside ItsMod&quot;
      end
    end

    ItsMod.hi_there #=&gt; &quot;hi there from inside ItsMod&quot;


    class YourClass
      include YourMod

      def call_hi_there
        hi_there
      end
    end

    YourClass.new.hi_there #=&gt; NoMethodError: undefined method `hi_there&#39; for #&lt;YourClass:0x007f50d0307cd0&gt;
    YourClass.new.call_hi_there #=&gt; NameError: undefined local variable or method `hi_there&#39; for #&lt;YourClass:0x007f50d021aae8&gt;

    class TheirClass
      include TheirMod

      def call_hi_there
        hi_there
      end
    end

    TheirClass.new.hi_there #=&gt; NoMethodError: private method `hi_there&#39; called for #&lt;TheirClass:0x007f50d0978880&gt;
    TheirClass.new.call_hi_there #=&gt; &quot;hi there from inside TheirMod&quot;

    class ItsClass
      include ItsMod

      def call_hi_there
        hi_there # not available!
      end

      def really_call_hi_there
        ItsMod.hi_there
      end
    end

    ItsClass.new.hi_there #=&gt; NoMethodError: undefined method `hi_there&#39; for #&lt;ItsClass:0x007f50d0859aa8&gt;
    ItsClass.new.call_hi_there #=&gt; NameError: undefined local variable or method `hi_there&#39; for #&lt;ItsClass:0x007f50d0817450&gt;
    ItsClass.new.really_call_hi_there #=&gt; &quot;hi there from inside ItsMod&quot;

  #+end_src

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
