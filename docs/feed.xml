<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2020-01-19T03:54:57-06:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2015/01/just-use-double-quotes.org</id>
      <updated>2020-01-19T03:54:57-06:00</updated>
      <title>[[http://viget.com/extend/just-use-double-quoted-ruby-strings?utm_source=rubyweekly&amp;utm_medium=email][Just use double quoted strings]] [2015-01-25 Sun 08:55]</title>
      <content>* [[http://viget.com/extend/just-use-double-quoted-ruby-strings?utm_source=rubyweekly&amp;utm_medium=email][Just use double quoted strings]] [2015-01-25 Sun 08:55]

  #+AUTHOR: Lawson Kurtz
  #+TWITTER: @LawsonKurtz
  #+DATE: [2015-01-22 Thu]

  tl;dr: there is no significant performance difference, compared the
  human problems of misunderstanding or forgetting to change from
  single to double when you do decide to interpolate.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/01/module-extends-self.org</id>
      <updated>2020-01-19T03:49:20-06:00</updated>
      <title>Module extend self</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline author:t broken-links:nil
#+OPTIONS: c:nil creator:nil d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:nil
#+OPTIONS: todo:t |:t
#+TITLE: module-extends-self
#+DATE: &lt;2020-01-19 Sun&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)

* Module extend self

  #+SOURCE: https://medium.com/@vsavkin/hexagonal-architecture-for-rails-developers-8b1fee64a613

  Buried in this blog post, I found an interesting construction. See
  the Example =module OrderRepository=.

  I had never seen the =extend self= construct before, so I did a
  little playing around in Pry.

  Using =extend self= in a module is similar to calling =class &lt;&lt;
  self ... end= with all the method definitions inside it. It&#39;s yet
  another way to get access to a module&#39;s eigenclass.

  This goes along with using =def self.my_method= and using
  =module_function= to also making piecemeal module methods, the main
  distinction being that using =def self.my_method= creates a method
  that the *only* receiver will be the module itself, not any classes
  that include the module.

  #+begin_src ruby
    module MyMod
      extend self

      def hi_there
        &quot;hi there from inside MyMod&quot;
      end

      private

      def go_away
        &quot;go away now inside MyMod&quot;
      end
    end

    MyMod.hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyMod.go_away

    class MyClass
      include MyMod

      def call_hi_there
        hi_there
      end
    end

    MyClass.hi_there
    MyClass.new.hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyClass.call_hi_there
    MyClass.new.call_hi_there #=&gt; &quot;hi there from inside MyMod&quot;
    MyClass.go_away
    MyClass.new.go_away

    module YourMod
      class &lt;&lt; self
        def hi_there
          &quot;hi there from inside YourMod&quot;
        end

        private

        def go_away
          &quot;go away now inside YourMod&quot;
        end
      end

      def que?
        &quot;que? inside YourMod&quot;
      end
    end

    YourMod.hi_there #=&gt; &quot;hi there from inside YourMod&quot;
    YourMod.go_away
    YourMod.que?

    module TheirMod
      def hi_there
        &quot;hi there from inside TheirMod&quot;
      end

      method_function :hi_there
    end

    TheirMod.hi_there #=&gt; &quot;hi there from inside TheirMod&quot;

    module ItsMod
      def self.hi_there
        &quot;hi there from inside ItsMod&quot;
      end
    end

    ItsMod.hi_there #=&gt; &quot;hi there from inside ItsMod&quot;


    class YourClass
      include YourMod

      def call_hi_there
        hi_there
      end
    end

    YourClass.new.hi_there #=&gt; NoMethodError: undefined method `hi_there&#39; for #&lt;YourClass:0x007f50d0307cd0&gt;
    YourClass.new.call_hi_there #=&gt; NameError: undefined local variable or method `hi_there&#39; for #&lt;YourClass:0x007f50d021aae8&gt;

    class TheirClass
      include TheirMod

      def call_hi_there
        hi_there
      end
    end

    TheirClass.new.hi_there #=&gt; NoMethodError: private method `hi_there&#39; called for #&lt;TheirClass:0x007f50d0978880&gt;
    TheirClass.new.call_hi_there #=&gt; &quot;hi there from inside TheirMod&quot;

    class ItsClass
      include ItsMod

      def call_hi_there
        hi_there # not available!
      end

      def really_call_hi_there
        ItsMod.hi_there
      end
    end

    ItsClass.new.hi_there #=&gt; NoMethodError: undefined method `hi_there&#39; for #&lt;ItsClass:0x007f50d0859aa8&gt;
    ItsClass.new.call_hi_there #=&gt; NameError: undefined local variable or method `hi_there&#39; for #&lt;ItsClass:0x007f50d0817450&gt;
    ItsClass.new.really_call_hi_there #=&gt; &quot;hi there from inside ItsMod&quot;

  #+end_src

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/in-rails-prefer-use_zone-to-zone.md</id>
      <updated>2020-01-19T03:04:11-06:00</updated>
      <title>in-rails-prefer-use_zone-to-zone</title>
      <content>&gt; Rails better practice for dealing with altering the current process&#39;s timezone

# In Rails, Prefer \`.use\_zone\` to \`.zone=\`

I had thought to write a post on this, but never got around to it.

[Prathamesh Sonpatki](https://prathamesh.tech/) [beat me to it :\)](https://prathamesh.tech/2019/07/11/use-time-use_zone-to-navigate-timezone/)

Essentially, this is the practice I use:

```text
Time.use_zone(current_user.timezone) do 
  # Do Time and DateTime operations under the auspices of the
  # current user&#39;s timezone setting.
  
  Time.current # The current time in the current user&#39;s timezone
  Time.zone.now # Equivalent to the above
end
```

It&#39;s better than just supposing that `Time.zone` has been set somewhere in the current process, **or** that `Time.zone` has been set to what the code in the block _expects it to be!_

## In Testing ##

The biggest source of error that I&#39;ve encountered for this isn&#39;t in requests, but actually in the spec test cases for the product. Some test cases blythely set `Time.zone` in a before action, but never reset it in an after action.

If possible, wrap the time zone use inside an `around` action:

```text
around(:each) do |example|
  Time.use_zone(some_timezone) do
    yield example
  end
end
```

### With [Timecop](https://github.com/travisjeffery/timecop) ###

Since Timecop is essentially mocking the system clock, you can use it with `.use_zone` with impunity.

```text
around do |example|
  Timecop.freeze do
    @account = Fabricate(:account)
    Time.use_zone(account.timezone) do
      yield example
    end
  end
end
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/08/2019-08-17-generating-consisten-faker-values-in-javascript.org</id>
      <updated>2020-01-19T02:46:50-06:00</updated>
      <title>2019-08-17-generating-consisten-faker-values-in-javascript</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline author:t broken-links:nil
#+OPTIONS: c:nil creator:nil d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:nil
#+OPTIONS: todo:t |:t
#+TITLE: Generating Consistent Faker Values in JavaScript
#+DATE: &lt;2019-08-17 Sat&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.14)

So this is good to know. I hadn&#39;t seen this before.

When using [[https://github.com/Marak/Faker.js][faker.js]], you can generate the exact same data each time by setting the *seed*:

#+BEGIN_SRC javascript
  import faker from &quot;faker&quot;

  faker.seed(123);

  export const testData = {
      id: faker.number.uuid(),
      name: `${faker.name.firstName()} ${faker.name.lastName()}`,
      email: fakcer.internat.email()
  }

#+END_SRC

Which would give the same data each time.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019-08-29-testing-react-checkbox-component.org</id>
      <updated>2020-01-19T02:46:50-06:00</updated>
      <title>Testing React Checkbox Component</title>
      <content>* Testing React Checkbox Component

published date: [2019-08-29 Thu]

keywords: react, testing, checkbox, querySelector, rerender, queryByTestId, testing-library

Recently, I built a partial form section that included a couple of checkboxes, and I wanted to verify their operation with a unit test.

I&#39;m using [[https://testing-library.com/docs/intro][testing-library]], including the react-specific methods. I&#39;m finding this a godsend in making tests easier to write and understand.

Testing and debugging react components is still fraught with uncertainty for me, I&#39;m still learning and fumbling my way around. Hooks have made writing components much easier, without a doubt, yet there are still times I just don&#39;t know what&#39;s happening.

In this particular episode, your intrepid frontend dev (me) had to find out three things about the form segment:

1. a lookup (autosuggest) field was completely hidden until a partcular checkbox was set.
2. another checkbox was disabled until another field had data in it.
3. a specific row of the form would appear only when another value was true.

For our purposes here, only 1 and 2 are of interest.

** Displaying a field form when a checkbox is setfield

For this form row, the code under test looks like this:

#+BEGIN_SRC rjsx
  const ServiceLocation = ({ name, value, initialValue, onSelectParent }) =&gt; {
    const [serviceArea, setServiceArea] = useState(!!value)
    const toggleCheckbox = () =&gt; {
      setServiceArea(!serviceArea)
    }
    return (
      &lt;FormField name={name}&gt;
        &lt;FormFieldSubRow&gt;
          &lt;Checkbox
            value={serviceArea}
            onChange={toggleCheckbox}
            data-testid=&quot;service-area-checkbox&quot;
          &gt;
            {&quot; &quot;}
            {I18n.t(&quot;service_location.label&quot;, { scope: i18nScope })}
          &lt;/Checkbox&gt;{&quot; &quot;}
          {serviceArea ? (
            &lt;CustomerLookupWrapper data-testid=&quot;customer-lookup-wrapper&quot;&gt;
              &lt;CustomerLookup
                name={name}
                initialValue={initialValue}
                placeholder=&quot;Parent&quot;
                onSelect={onSelectParent}
              /&gt;
            &lt;/CustomerLookupWrapper&gt;
          ) : null}
        &lt;/FormFieldSubRow&gt;
      &lt;/FormField&gt;
    )
  }
#+END_SRC

Placing the ~data-testid~ &quot;service-area-checkbox&quot; on the ~Checkbox~ component gives the test a way of finding the DOM element it needs to work with. The &quot;customer-lookup-wrapper&quot; `data-testid` will be used to determine if the second element shows up when the that checkbox is clicked.

The spec for this looks like:

#+BEGIN_SRC rjsx
    it(&quot;displays the parent lookup field when the service location checkbox becomes checked&quot;, async () =&gt; {
      const LOOKUP_WRAPPER_TESTID = &quot;customer-lookup-wrapper&quot;
      const props = {
        fields: {},
        parent: {},
        handleChange: jest.fn(),
        onDuplicateCustomerName: jest.fn(),
        onSelectParent: jest.fn()
      }

      const { queryByTestId, getByTestId, rerender } = render(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} /&gt;
        &lt;/Providers&gt;
      )

      const serviceAreaCheckbox = getByTestId(&quot;service-area-checkbox&quot;)
      const checkBoxActual = serviceAreaCheckbox.querySelector(
        &quot;input[type=checkbox]&quot;
      )

      /* PRECONDITIONS */
      expect(queryByTestId(LOOKUP_WRAPPER_TESTID)).not.toBeInTheDocument()
      expect(checkBoxActual.checked).toEqual(false)

      /* ACTION */
      fireEvent.click(checkBoxActual)

      /* VERIFY */
      expect(checkBoxActual.checked).toEqual(true)
      expect(queryByTestId(LOOKUP_WRAPPER_TESTID)).toBeInTheDocument()
    })
#+END_SRC

The two line where things get really interesting are:

#+BEGIN_SRC rjsx
      const serviceAreaCheckbox = getByTestId(&quot;service-area-checkbox&quot;)
      const checkBoxActual = serviceAreaCheckbox.querySelector(
        &quot;input[type=checkbox]&quot;
      )
#+END_SRC

We can get the ~Checkbox~ component with the first line, but this only gets us the label wrapper and not the actual checkbox, so the second line pulls up the actual checkbox from within it.

The rendered code from the ~Checkbox~ component looks like this:

#+BEGIN_SRC html
      &lt;label
        class=&quot;sc-kAzzGY dXoiwv&quot;
        data-testid=&quot;service-area-checkbox&quot;
      &gt;
        &lt;input
          class=&quot;sc-cSHVUG bYZObx&quot;
          type=&quot;checkbox&quot;
        /&gt;

        service_location.label
      &lt;/label&gt;
#+END_SRC

The funky looking classes are the result of ~style-components~. What&#39;s interesting to note is that the ~data-testid~ was placed on the ~label~ node. Using ~querySelector~ let&#39;s me pull out the actual checkbox, which is an HTML element of type &quot;checkbox&quot;.

From there, verifying the preconditions and postconditions becomes fairly easy:

- the state of the check box (ie. checked or not checked) is avalable as a property of the element
- using ~queryByTestId~ tests whether the particular element is in the document or not

Making the change happens with the ~fireEvent.click~. (/Note:/ the ~change~ event doesn&#39;t work for checkboxes. See: https://github.com/testing-library/react-testing-library/pull/178/files#diff-04c6e90faac2675aa89e2176d2eec7d8R631 ) (and beware the drift of time as well...)

** Verifying a checkbox is en-/disabled based on another value

This case shows something a little different, and shows how to approach changing props as related to component testing.

The code under test in this case is:

#+BEGIN_SRC rjsx
  const SmsNotifications = ({ name, value, onChange, isMobileSet }) =&gt; {
    return (
      &lt;FormField name={name} label={null}&gt;
        &lt;div&gt;
          &lt;strong&gt;{I18n.t(&quot;notify_via_sms.title&quot;, { scope: i18nScope })}&lt;/strong&gt;
          &lt;Checkbox
            name={name}
            value={value || &quot;&quot;}
            onChange={onChange}
            disabled={isMobileSet ? null : &quot;disabled&quot;}
            wrap={&quot;wrap&quot;}
            data-testid=&quot;notify-via-sms-checkbox&quot;
          &gt;
            {&quot; &quot;}
            {I18n.t(&quot;notify_via_sms.label&quot;, { scope: i18nScope })}
          &lt;/Checkbox&gt;
        &lt;/div&gt;
      &lt;/FormField&gt;
    )
  }

#+END_SRC

The spec test for this feature is:

#+BEGIN_SRC rjsx
    it(&quot;enables the notify via sms checkbox when the mobile field has a value&quot;, () =&gt; {
      const NOTIFY_CHECKBOX_TESTID = &quot;notify-via-sms-checkbox&quot;

      const props = {
        fields: {},
        handleChange: jest.fn(),
        onDuplicateCustomerName: jest.fn(),
        onSelectParent: jest.fn()
      }
      const { queryByTestId, getByTestId, rerender } = render(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} /&gt;
        &lt;/Providers&gt;
      )
      const notifyCheckBoxComponent = getByTestId(NOTIFY_CHECKBOX_TESTID)
      const checkBoxActual = notifyCheckBoxComponent.querySelector(
        &quot;input[type=checkbox]&quot;
      )
      expect(checkBoxActual.disabled).toEqual(true)

      rerender(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} fields={{ mobile: &quot;555121&quot; }} /&gt;
        &lt;/Providers&gt;
      )

      expect(checkBoxActual.disabled).toEqual(false)
    })
#+END_SRC

I&#39;m doing the same trick as before about grabbing the actual checkbox by using ~querySelect~ on the element returned with ~getByTestId(&quot;NOTIFY_CHECKBOX_TESTID&quot;)~. This provides access to the ~disabled~ property.

This test uses the testing library&#39;s ~rerender~ method, which is used to apply different props. In this case the props for the compoonent are controlled above this component, so this is actually a valid test matching how it would work in the user&#39;s environment.

For the rerender, I&#39;m passing in a value for the mobile phone number, which is used to determine whether the checkbox is en-/disabled.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/gatsby-categories-and-tags.md</id>
      <updated>2019-12-21T17:26:11-06:00</updated>
      <title>gatsby-categories-and-tags</title>
      <content>---
description: Organizing entries
---

# Categories and Tags

I&#39;ve been re-writing my on-line recipe collection using Gatsby as an exercise. In the original Jekyll site, I had recipes organized into categories like chapters in a printed cookbook, and tags that allowed more fine-detailed structure, listing such things as ingredients, cuising type, and other things like being gluten-free. Both categories and tags were stored as entries in the frontmatter of each recipe in the collection.

To make that work, I needed to write a Jekyll plug-in to generate the category and tag pages. And to make it work in Gatsby, I needed to write something in `gatsby-node.js`

### Categories as Subdirectories

Instead of putting the category in the frontmatter, I decided to organize the recipe markdown into subdirectories under the `recipes/` content directory.

#### A hook for categories

To pull out the categories, I created a custom hook `useCategories` to run a static query and return the collection of category names:

```javascript
import { graphql, useStaticQuery } from &quot;gatsby&quot;
export const useRecipeCategories = () =&gt; {
  const { allDirectory } = useStaticQuery(
    graphql`
      query RECIPE_CATEGORIES {
        allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
          nodes {
            relativePath
          }
        }
      }
    `
  )
  return allDirectory.nodes.map(category =&gt; category.relativePath)
}
```

Putting that query into the GraphiQL IDE, the response is:

```text
{
  &quot;data&quot;: {
    &quot;allDirectory&quot;: {
      &quot;nodes&quot;: [
        {
          &quot;relativePath&quot;: &quot;baked-goods&quot;
        },
        {
          &quot;relativePath&quot;: &quot;desserts&quot;
        },
        {
          &quot;relativePath&quot;: &quot;breakfast&quot;
        },
        {
          &quot;relativePath&quot;: &quot;drinks&quot;
        },
        {
          &quot;relativePath&quot;: &quot;main-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;kitchen-tips&quot;
        },
        {
          &quot;relativePath&quot;: &quot;appetizers&quot;
        },
        {
          &quot;relativePath&quot;: &quot;pizza&quot;
        },
        {
          &quot;relativePath&quot;: &quot;salads&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sandwiches&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sauces&quot;
        },
        {
          &quot;relativePath&quot;: &quot;side-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;soups&quot;
        }
      ]
    }
  }
}
```

That gives me a nice, reusable list of categories anywhere in the site.

#### Generating the Table of Contents

The `CategoriesMenu` component creates a list of the categories with links to each category page:

```javascript
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import { useRecipeCategories } from &quot;../hooks/useCategories.js&quot;

export default () =&gt; {
  const categories = useRecipeCategories()

  return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
}

```

\(I&#39;m still in the midst of generating a style for the site, so eventually the `ul` and `li` will get replaced with some styled components. That&#39;s not important for this discussion.\)

The `Link` to each category page expects them to be a page at the root of the route. These pages are not in the repo itself, and must be generated. The code to generate the category page is in `gatsby-node.js` :

```javascript
const { createFilePath } = require(`gatsby-source-filesystem`)
const path = require(`path`)

exports.createPages = ({ actions, graphql }) =&gt; {
  // ...
  const categoryTemplate = path.resolve(&quot;./src/templates/categoryTemplate.js&quot;)

  return graphql(`
    {
      # .. other queries
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }
  `).then(result =&gt; {

    // ... stuff for mdx pages

    const categories = result.data.allDirectory.nodes
    categories.forEach(category =&gt; {
      createPage({
        path: &quot;/&quot; + category.relativePath + &quot;/&quot;,
        component: categoryTemplate,
        context: {
          category: category.relativePath,
        },
      })
    })
    
    // ... more stuff
  })
}

```

The partial graphql query returns the relative paths from the recipes area, which is the same as we do in the `useCategories` hook; there ought to be a way to reuse that, but here it&#39;s part of a larger query \(redacted from the example\). Looping through the categories, I&#39;m running `createPage` on each node \(i.e. category\) and building a page using a template, quite like one does for making Markdown/MDX pages. The context contains the category &quot;slug&quot;, which is created below.

The categories need to be made into nodes:

```javascript
exports.onCreateNode = ({ node, actions, getNode }) =&gt; {
  const { createNodeField } = actions
  if (node.internal.type === `Mdx`) {
    const value = createFilePath({ node, getNode })
    // .. other nodes
    createNodeField({
      name: `recipeCategory`,
      node,
      value: value.split(&quot;/&quot;)[1],
    })
  }
}
```

This is pretty similar again to how you make slugs for Markdown/MDX psges. The `value` comes from file path created in line 4, and it looks like `/:relativePath/:recipeFilename/`. Since what we&#39;re looking for is the recipe category, that is the `:relativePath` in the string above. Splitting on the divider gives a `null` first value in the array, and `:relativePath` in the second slot, so the index is 1 to pull it out. There&#39;s probably better ways to do this, but this works.

### Tag pages

Tag pages are also created in `gatsby-node.js` but the way tags are collected to start with is very different from categories. Categories are determined by placement in a subdirectory, but tags are declared in the frontmatter of the recipe MDX file.

\(One _could_ do the same thing with categories, using a field in the frontmatter, but after working with that form in the Jekyll version for years, I&#39;ve decided doing them as subdirectories made more sense to me.\)

Going back to the `gatsby-node.js` file, the full query looks like this:

```graphql
    {
      allMdx {
        nodes {
          fields {
            slug
          }
          frontmatter {
            title
            tags
          }
          fileAbsolutePath
        }
      }
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }

```

In this case, we need to collect the _unique_ tags from every recipe file, so while we are shooting the list building the recipe pages, we&#39;ll also collect the tags into a Set:

```graphql
    const recipes = result.data.allMdx.nodes
    let tags = new Set()

    // create page for each mdx file
    recipes.forEach(recipe =&gt; {
      createPage(/* .. for each recipe page .. */)

      if (recipe &amp;&amp; recipe.frontmatter &amp;&amp; recipe.frontmatter.tags) {
        recipe.frontmatter.tags.map(tag =&gt; {
          tags.add(tag)
        })
      }
    })
```

If there are a collection of tags in the recipe file, this adds them to the `tags` Set, which ensures only unique tags are collected.

Further down, we need to create the tag _pages_ :

```javascript
    tags.forEach(tag =&gt; {
      createPage({
        path: `/tags/${tag}/`,
        component: tagTemplate,
        context: {
          tag,
        },
      })
    })
```

### Putting Categories and Tags to use

#### The Category Menu in the Sidebar

I decided for this design iteration to put the categories into a sidebar arrangement \(I still haven&#39;t done any styling on this\). Recall the code up at **Generating the table of contents**: 

```jsx
return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
```

which generates a link to each category page. This is mounted in the Sidebar.

#### Tag links in each recipe display

Tags are a little different at this point: they are only listed in each individual recipe page, using the `TagList` component:

```jsx
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import styled from &quot;styled-components&quot;

export default ({ tags }) =&gt; {
  if (!tags || tags.length &lt; 1) {
    return null
  }
  return (
    &lt;TagListWrapper&gt;
      {tags.map((tag, index) =&gt; {
        return (
          &lt;TagListItem key={`tag-item-${index}`}&gt;
            &lt;Link to={`/tags/${tag}/`}&gt;{tag}&lt;/Link&gt;
          &lt;/TagListItem&gt;
        )
      })}
    &lt;/TagListWrapper&gt;
  )
}

const TagListWrapper = styled.ul`
  display: inline;
  list-style: none;
`
const TagListItem = styled.li`
  display: inline-block;
  &amp;:after {
    content: &quot;, &quot;;
    padding-right: 0.5em;
  }
  &amp;:last-child:after {
    content: &quot;&quot;;
  }
`
```

\(Yay, some styling\)

Eventually, I&#39;m going to want a tag cloud of some sort, too.

That&#39;s basically it. It took a minute for me to go from looking at how the Markdown / MDX in every gatsby tutorial worked, and had to work out how to generate the pages from other data queries. This seems pretty simple, but seems to be lacking from the tutorials.

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/08/2019-08-08-til-rails-active-job-argument-types.org</id>
      <updated>2019-08-08T17:18:45-05:00</updated>
      <title>2019-08-08-til-rails-active-job-argument-types</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: TIL: Rails ActiveJob Supported Argument Types
#+DATE: &lt;2019-08-08 Thu&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)


[[https://edgeguides.rubyonrails.org/active_job_basics.html#supported-types-for-arguments][Rails Guides: ActiveJob Supported Argument Types]]

This came up because of a cascade of things:

1. Having an exception thrown during an ActiveJob task
2. The rescue calling ActiveMailer with the rescued exception as an argument, with the ~.deliver_later~ option
3. This caused another ActiveJob to be created for the mailer, with an argument that violates the above restriction.

The solution, in this case is pretty easy: call the mailer with ~.deliver_now~ instead, since it&#39;s already a background job.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/08/2019-08-01-programmer-s-primary-language.org</id>
      <updated>2019-08-01T18:32:32-05:00</updated>
      <title>2019-08-01-programmer-s-primary-language</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 2019-08-01-programmer-s-primary-language
#+DATE: &lt;2019-08-01 Thu&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+KEYWORDS: joke, primary language, wtfsm
#+DESCRIPTION: an old programmer&#39;s joke
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)

** What&#39;s a Programmer&#39;s Primary Language?

*Profanity*

So that&#39;s a really old joke, and I&#39;d thought I&#39;d written something about it long ago.

There&#39;s a funny comic that goes around from time to time (I&#39;d thought it was one of Randall Monroe&#39;s, but it&#39;s not): https://www.osnews.com/story/19266/wtfsm/

[[wtfsm.jpg]]

It&#39;s often sourced from [[http://commadot.com/wtf-per-minute/][this blog entry]] with a computer-drawn version, but I rather like the original.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/07/2019-07-17-til-firefox-disables-meta-refresh-by-default.org</id>
      <updated>2019-07-17T13:05:05-05:00</updated>
      <title>2019-07-17-til-firefox-disables-meta-refresh-by-default</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: 2019-07-17-til-firefox-disables-meta-refresh-by-default
#+DATE: &lt;2019-07-17 Wed&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+KEYWORDS: firefox, refresh
#+DESCRIPTION: Today I learned about meta refresh on firefox browsers
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)

** TIL: Firefox disables the meta refresh header by default

This came up with a story I was implementing, where we wanted an interstitial page to show up after a new client signs up for our product, basically a &quot;Thank You&quot; page, which is needed for tracking stuff in google analytics.

I thought to use the ~meta http-equiv=refresh~ header, which I&#39;ve used for a very long time. Come to learn, however, the the Firefox browser disables this header by default.

See https://stackoverflow.com/questions/29645340/why-does-meta-refresh-not-work-in-firefox

Because we don&#39;t want to force users to update their browser configurations before signing up for an account, I used the JavaScript redirect method instead.

I really hope browser writers don&#39;t decide that method is too risky for browser users; it would mean a lot of client apps might no longer work all of a sudden.

This is why we can&#39;t have nice things :(
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/06/2019-06-03-some-flexbox-links.org</id>
      <updated>2019-06-04T10:30:14-05:00</updated>
      <title>2019-06-03-some-flexbox-links</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: 2019-06-03-some-flexbox-links
#+DATE: &lt;2019-06-04 Tue&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)

Hat-tip to @Andrea on WHCTC slack

** Flexbox Patterns

   Link: [[https://www.flexboxpatterns.com/][Flexbox Patterns]]

   Tagline: Build awesome user interfaces with CSS flexbox. Examples and source code included.

   Description: Flexbox is awesome, but it introduces many new concepts that can make it difficult to use. These interactive examples will show you practical ways to use it to build UI components. They start out simple and get more complex near the end. You can start using these patterns in your own code right away, though I recommend you apply accessibility best practices to the markup (like using semantic HTML5 elements).

** Solved by Flexbox

   Link: [[https://philipwalton.github.io/solved-by-flexbox/][Solved by Flexbox]]

   Tagline: Cleaner, hack-free CSS

   Description: CSS has been lacking proper layout mechanisms for far too long. Transitions, animations, filters, all of these are great and useful additions to the language, but they don&#39;t address the major problems that Web developers have been complaining about for what seems like an eternity.

   Finally, thanks to Flexbox, we have a solution.

   This site is not another CSS framework. Instead, its purpose is to showcase problems once hard or impossible to solve with CSS alone, now made trivially easy with Flexbox. And with the recent release of Internet Explorer 11 and Safari 6.1, the latest Flexbox spec is now supported in every modern browser.

   Check out the demos below. View the styles in the Web inspector or dive into the source to see just how easy CSS layout will become once Flexbox becomes mainstream.


** How to examine Flexbox layouts in Firefox

   Link: [[https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_Flexbox_layouts][CSS Flexbox Inspector: Examine Flexbox layouts]]

   Description: The Flexbox Inspector allows you to examine CSS Flexbox Layouts using the Firefox DevTools, discovering flex containers on a page, examining and modifying them, debugging layout issues, and more.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
