<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2018-12-20T09:04:16-06:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-20-adding-methods-to-base-graphql-classes.org</id>
      <updated>2018-12-20T09:04:16-06:00</updated>
      <title>Adding methods to base GraphQL classes</title>
      <content>* Adding methods to base GraphQL classes

- Time-stamp: &lt;2018-12-20 09:04:16 tamara&gt;
- keywords: graphql

Sometime in the past year I started looking into using the class-based interface with ~graphql-ruby~. Here&#39;s an example to provide millisecond precision time as integer:

#+name: types/base_object.rb
#+begin_src ruby
  module Types
    class BaseObject &lt; GraphQL::Schema::Object

      def created_at_ms
        time_to_ms(object.created_at)
      end

      def updated_at_ms
        time_to_ms(object.updated_at)
      end

      def time_to_ms(time)
        (time.to_f * 1000).to_i
      end

    end
  end
#+end_src

With that in place, another object that inherits from the base object will automatically get use of these:

#+name: types/author_type.rb
#+begin_src ruby
  module Types
    class AuthorType &lt; Types::BaseObject
      field :name, String, null: false
      field :url, String, null: true
      field :created_at_ms, Integer, null: false
      field :updated_at_ms, Integer, null: false
    end
  end
#+end_src

If there are other datetime fields, you can still use the ~time_to_ms~ method:

#+name: types/book_type.rb
#+begin_src ruby
  module Types
    class BookType &lt; Types::BaseObject
      field :title, String, null: false
      field :isbn, String, null: true
      field :purchased_on_ms, Integer, null: true
      def purchased_on_ms
        time_to_ms(object.purchased_on)
      end
      field :finished_reading_on_ms, Integer, null: true
      def finished_reading_on_ms
        time_to_ms(object.finished_reading_on)
      end
      field :rating, Integer, null: true
      field :private, Boolean, null: true
      field :created_at_ms, Integer, null: true
      field :updated_at_ms, Integer, null: true
    end
  end
#+end_src

These are from my [[https://github.com/tamouse/rails_react_graphql_template_example][rails react graphql template example]] repo.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-12-tenants-of-toast-and-tech.org</id>
      <updated>2018-12-12T23:07:18-06:00</updated>
      <title>The Tenants of Toast and Tech</title>
      <content>* The Tenants of Toast and Tech
  :PROPERTIES:
  :CAPTURE_DATE: [2018-12-12 Wed]
  :END:

- last_updated: Time-stamp: &lt;2018-12-12 23:07:18 tamara&gt;
- keywords: Learning Space, Toast and Tech

As some of you following know, I&#39;ve led this thing on Tuesday nights called &quot;Toast &amp; Tech&quot; for about 3 years [starting in the Autumn of 2015], nominally under the organization at .@GDImpls, the Minneapolis chapter of .@girldevelopit.

I have left that organization, but I want to leave behind something for those involved in T&amp;T, and for those looking to make a space for learning that it inclusive

** The Tenants of Toast and Tech:

- make *everyone* welcome, enthusiastically
- make *all* questions welcome, enthusiastically
- everyone is learning, everyone is teaching
- there is no single path, there are as many paths as people attending, as many paths as needed
- you don&#39;t need a project or tech work to attend, just come
- you don&#39;t need any experience to attend, just come
- support everyone who shows up
- Make it safe to learn, safe to ask questions, safe to show up.

Possibly the *most* important tenant of all: #ToastAndTech can happen *anywhere*, run by *anyone*; all it takes is letting folks know about it, and showing up to hold the space.

#CauseAScene
#KeepLearning
#HappyToast

[[./kawaii-toast.png][happy toast]]

[[https://twitter.com/i/moments/1073061297200267265][moment on twitter]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2012/12/code-as-literature-software-dev-as-communication.org</id>
      <updated>2018-12-12T22:58:01-06:00</updated>
      <title>code as literature, software dev as communication</title>
      <content>* code as literature, software dev as communication

- date: 2012-12-05 05:02:50
- categories: [swaac]
- tags: [communication]

Kind of a random bit of monologue from an IRC channel, but I thought it might be interesting to save and think about sometime in the future.

#+begin_quote
    my very young dev coworker gave me an enourmous compliment today.
    
    he&#39;s all of 25, shithot developer, but also still young and naive.
    
    anyway, i had written a little script to do something we needed,
       and he said it was a masterwork and the best bit of code he&#39;s
       seen from our group
       
    i was like &quot;what? why?&quot;
    
    he said &quot;these are the best comments in code i&#39;ve ever seen. and
       the code is neat and clean&quot;
       
    i kind of had to struggle to take the compliment

    i tell this not to say &quot;oh tamara, you&#39;re so great&quot;
    
    i&#39;m not
    
    i&#39;m probably better than mediocre
    
    but i&#39;m not great
    
    i say this because, in his way, he gave a very depressing,
       but accurate account of our software
       
    what&#39;s sort of funny about this, too, is that the majority
       of the script was repurposed from something he wrote,
       that i tore out of the rakefile to make a stand-alone
       script
       
    what exactly did i do?
    
    wrapped it in a class, connected database
       records to it, and added some defensiveness to it
       
    and the comments i wrote were telling about the things i
       found while writing that and why i chose to do it the way
       i did

    then tonite i was thinking about this

    /code is literature/
    
    (not literate programming, that&#39;s something else)
       [though related]

    code is a message, a story:
    - it&#39;s not really about telling the computer what to do
    - it&#39;s about telling *someone else* what the computer is *doing*
    
    and i find this further deepens my understanding in the sense
       of software dev as a craft

    not just syntax, variables, etc; not just algorithms and data;
    but a way of telling other people how to solve problems

    i&#39;ve been thinking about this a lot lately
    
    it might be because of my elder status/position
    and it&#39;s not just a little of the crap education i&#39;m seeing
       people give themselves, and places that they go to for help
       only answering rather mudnane details about sytax errors
    
    we learned because we taught ourselves
    
    but we also learned because we were fascinated both by the
       technology itself, and not a little by learning itself

    i was talking to someone, somewhere, about how people are
       picking up programming
    
    like, it&#39;s the &quot;hot new must-have skill for everyone&quot;;
    a life-skill, if you will

    i don&#39;t necessarily disagree with that?

    and i think there&#39;s all sorts of levels, just like, say cooking

    but imagine if you learned how to cook the way programming
       is being taught
    - you might be able to survive
    - but i don&#39;t think it would be very fun
    - and know it wouldn&#39;t be worthy, really, of being called a craft

    your scrambled eggs don&#39;t work, so you send in a message
       with a photo of the results in your pan to a
       &quot;eggs cooking mailing list&quot;
       
    and wow, you can&#39;t *eat* until you get it right
    
    part of the problem, maybe a great deal of the problem, is
       that there aren&#39;t places really to learn the craft of it

    and it is probably different now that it was for us
    
    i mean, yeah, i went to uni, you didn&#39;t, but i think the
       learning for each of us was highly self-directed

    i was writing basic code since 7th grade

    i think for many people that i&#39;ve come across that are
       learning, (maybe espcially php and html) is that
       they are looking at it sort of desperately
       as some way of making money?
       
    and i think that this slams against my privilege hard
    because i never went at this as a way to make money
    i *do* make money at it
    
    i *ask* for money when i do things for someone
    but it&#39;s not like i have to learn to do this so i can make money
    and that puts me in a position of privilege, surely

    yet i also see this as, again, a matter of craftsmanship
    and that acquiring the ability to make money requires
       a sense of ownership of the skills, knowledge, and tools
       to solve problems, solve *other* people&#39;s problems,
       by writing software

    and concomittant with that is the ability to *communicate*
       *effectively* what you are telling the computer to do,
       *to someone else*

    idk

    i think i&#39;ve ended up at the beginning; 
    or beginned up at the end

    i *think* this is what has me so excited,
    so *interested* in continuing to learn,
    to work, and to teach, software development.
#+end_quote
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-06-posting-a-file-with-XMLHttpRequest.org</id>
      <updated>2018-12-12T22:58:01-06:00</updated>
      <title>RESEARCH: Posting a file with XMLHttpRequest</title>
      <content>* RESEARCH: Posting a file with XMLHttpRequest

- Time-stamp: &lt;2018-11-06 14:26:38 tamara&gt;
- published date: [2018-11-06 Tue 13:46]
- keywords: XMLHttpRequest, file upload, JavaScript, research, React


See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_nothing_but_XMLHttpRequest][Using nothing but XMLHttpRequest]] &lt;-- maybe not

See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_FormData_objects][Using FormData objects]] &lt;-- necessary for files, I think

In contrast to [[./2018-11-06-posting-a-file-with-fetch-api.org][Posting with Fetch API]], this is a bit lower on the food chain in terms of JS stuff, *but* it lets you get access to ~progress~ events, for doing such things as displaying a progress bar. Yay.

** Using FormData

MDN makes a special note:

#+BEGIN_QUOTE
Note: As we said, FormData objects are not stringifiable objects. If you want to stringify a submitted data, use the previous pure-AJAX example. Note also that, although in this example there are some file &lt;input&gt; fields, when you submit a form through the FormData API you do not need to use the FileReader API also: files are automatically loaded and uploaded.
#+END_QUOTE

** Using Event Handlers

From the top of the page, just using / setting event handlers:

#+BEGIN_SRC rjsx
  function reqListener () {
    console.log(this.responseText);
  }

  var oReq = new XMLHttpRequest();

  // this sets the &#39;load&#39; event handler, which fires when the file is fully loaded.
  // I think this works for POST/PUT as well...
  oReq.addEventListener(&quot;load&quot;, reqListener);

  oReq.open(&quot;GET&quot;, &quot;http://www.example.org/example.txt&quot;);
  oReq.send();
#+END_SRC

There&#39;s a note [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Monitoring_progress][somewhere on the page]] saying something about ~progress~ event handlers needing to be set before the ~.open~ call.

This would load up all the event handlers for XMLHttpRequest:

#+BEGIN_SRC rjsx
  let oReq = new XMLHttpRequest();

  oReq.addEventListener(&quot;progress&quot;, updateProgress);
  oReq.addEventListener(&quot;load&quot;, transferComplete);
  oReq.addEventListener(&quot;error&quot;, transferFailed);
  oReq.addEventListener(&quot;abort&quot;, transferCanceled);

  oReq.open();
#+END_SRC

** Progress Indication

The ~progress~ event handler takes in the progress event, which is defined at [[https://xhr.spec.whatwg.org/#interface-progressevent][WhatWG Progress Event specification]]. It has 3 attributes:

- ~lengthComputable~ [boolean] whether the length of the object is known
- ~loaded~ [number] how much has loaded so far
- ~total~ [number] how much there is to load

So progress can be calculated by:

#+BEGIN_SRC rjsx
  handleProgress = event =&gt; {
      let progress = 0
      if (event.total !== 0) {
          progress = event.loaded / event.total
      }
      const percentCompleted = progress * 100
      this,setState({ progress, percentCompleted })
  }

  handleLoaded = event =&gt; {
      this.setState({ progress: 1, percentCompleted: 100, loaded: true })
  }

  // ...

  request = () =&gt; {

      const req = new XMLHttpRequest()

      req.addEventListener(&#39;progress&#39;, this.handleProgress)
      req.addEventListener(&#39;load&#39;, this.handleLoaded)

      // ... etc
  }
#+END_SRC
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-01-polyfill-for-custom-event.org</id>
      <updated>2018-12-01T11:00:30-06:00</updated>
      <title>Polyfill for JavaScript&#39;s ~CustomEvent~ constructor</title>
      <content>* Polyfill for JavaScript&#39;s ~CustomEvent~ constructor

I had a project I needed to use a non-DOM event with, where a couple of React components were signaling a change in state, and they didn&#39;t share any context.

I could have used Redux, but that seemed like heavy lifting for only using an event, so I dug into using custom events.

The downside is that only since version 9 has Internet Explorer supported some form of ~CustomEvent~, and it is not the same. I was looking at other libraries until I happened on the polyfill provided by Mozilla at [[https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill][CustomEvent Polyfill on MDN]]. I copied that into a file and import it where I want to dispatch a custom event.

I attach the listeners in the various React components&#39; ~componentDidMount~ at the ~window~ DOM node as common ancestor for all components on the page, and remove them in ~componentWillUnmount~.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-29-thoughts-on-writing-good-tests.org</id>
      <updated>2018-11-29T14:54:22-06:00</updated>
      <title>Thoughts on learning to write good tests                          :testing:</title>
      <content>* Thoughts on learning to write good tests                          :testing:
  :PROPERTIES:
  :CAPTURE_DATE: [2018-11-29 Thu]
  :KEYWORDS: testing, learning, good tests
  :END:

- Time-stamp: &lt;2018-11-29 14:54:22 tamara&gt;
- current_date: [2018-11-29 Thu]
- keywords: testing, learning


Someone asked this question on the WWCodeTC #learning-to-code Slack channel the other day:

#+BEGIN_QUOTE
OP: I asked this in another group and I got a million answers but I&#39;ll ask here: anyone have a good way to learn how to write good tests? I&#39;ve listened to a test driven development course on lynda.com. I don&#39;t really have a specific question per se, just looking for a pointer to good testing practices beyond the basics.
#+END_QUOTE


My response:

#+BEGIN_QUOTE

everyone says testing is Super Important, but no one seems to definitively answer that question. the obvious answer is &quot;write a lot of bad tests&quot; but that is oh so dismal.

the stuff i learned from, ages and ages ago, is probably no longer in print, but look for these authors:

- jerry weinberg
- boris beizer
- larry constantine
- glen meyers
- bob grady

I met and worked these guys aeons ago, all really amazing authors

look up software quality institute,  I&#39;m not sure if it&#39;s still going

most all classes and tutorials i see are about how to write tests in a framework, which is good, but like most software education, never really gets at how to do design of software for a purpose and tests do need to fit a purpose

I&#39;ll just throw out a few questions you may want to try on as heuristics:

- what are the most critical actions or features users need to function impeccably
- what features are showing the most failures in use
- if a feature is unclear in how to use, how many ways can it be used or abused
- how can i break this?


another way to approach it is from the test driven side, and write tests that describe exactly what the feature does, does not do, responds to random input, responds to incorrect input, etc, so you completely spec the feature before any feature code is written.

#+END_QUOTE
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-23-til-setting-window-location-in-jest-tests.org</id>
      <updated>2018-11-23T16:44:09-06:00</updated>
      <title>TIL: Setting `window.location` during Jest testing</title>
      <content>* TIL: Setting `window.location` during Jest testing
  :PROPERTIES:
  :CAPTURE_DATE: 2018-11-23
  :KEYWORDS: jest, window.location, testing
  :END:

- Time-stamp: &lt;2018-11-23 16:44:09 tamara&gt;
- capture_date: [2018-11-23 Fri]
- keywords: jest, window.location, testing


By default, the `window.location` properties are read-only. But for some tests, I need these to be specific, set values.

In [[https://github.com/facebook/jest/issues/890][Jest issue 890]] over on github, there is a long discussion about this, and ways people have solved this issue for themselves.

The first one I happened upon is one used by Facebook engineers:

I needed to modify `pathname` property only for my test:
#+BEGIN_SRC rjsx
  Object.defineProperties(window.location, &#39;pathname&#39;, {
      writeable: true,
      value: defaultPathname
  })
#+END_SRC



Here&#39;s a more universal one:

#+BEGIN_SRC rjsx
  const setURL = (url) =&gt; {
    const parser = document.createElement(&#39;a&#39;);
    parser.href = url;
    [&#39;href&#39;, &#39;protocol&#39;, &#39;host&#39;, &#39;hostname&#39;, &#39;origin&#39;, &#39;port&#39;, &#39;pathname&#39;, &#39;search&#39;, &#39;hash&#39;].forEach(prop =&gt; {
      Object.defineProperty(window.location, prop, {
        value: parser[prop],
        writable: true,
      });
    });
  };
#+END_SRC

The sneaky trick of creating a wee little parser out of a document anchor element is pretty dang cool, too.

Later in the issue page, there&#39;s some discussion about how this might break in future versions of `jsdom`, and another way to set the location property, by modifying the history on `window`:

#+name: package.json
#+begin_src js
  {
      &quot;testUrl&quot;: &quot;https://somehost.com/some/path/test.html&quot;
  }
#+end_src

And in your test setup:
#+BEGIN_SRC rjsx
  window.history.pushState({}, &#39;Test Title&#39;, &#39;/another/path/test.html?query=true&#39;);
#+END_SRC

This is from the [[https://www.ryandoll.com/post/2018/3/29/jest-and-url-mocking][Jest and URL testing]] by Ryan Doll.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-20-til-input-file-has-accepts-attribute.org</id>
      <updated>2018-11-20T00:30:53-06:00</updated>
      <title>TIL: The ~input[type=file]~ element has an ~accepts~ attribute</title>
      <content>* TIL: The ~input[type=file]~ element has an ~accepts~ attribute

- Time-stamp: &lt;2018-11-20 00:30:53 tamara&gt;
- capture date: [2018-11-20 Tue]
- keywords: html, input, file, pass list

The ~input[type=file]~ element has an attribute, ~accepts~ that provides a pass filter for the types of files that are accepted in the input file field. See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept][the MDN documentation for input accept]] for details.

This means, if I have a set of allowed extensions, I can put them in the ~accepts~ field to limit what the user can select:

#+BEGIN_SRC html
  &lt;!-- to accept all image types --&gt;
  &lt;input type=&quot;file&quot; name=&quot;image_file&quot; accept=&quot;image/*&quot;&gt;

  &lt;!-- to accept various file extensions --&gt;
  &lt;input type=&quot;file&quot; name=&quot;data&quot; accept=&quot;.jpg,.jpeg,.gif,.png,.bmp,.pdf,.txt,.md,.markdown&quot;&gt;
#+END_SRC

With a little more work, if there is a pass list of extensions on the server, I could pass it down to the client via the ~gon~ object where a React client could pick it up.


#+name: config/constants.rb
#+begin_src ruby
  module App
    module CONSTANTS
      UPLOAD_PASS_LIST = %w[
        jpg
        jpeg
        png
        gif
        bmp
        pdf
        text
        txt
        markdown
        md
        csv
        xls
        xlsx
        doc
        docx
      ].freeze
    end
  end
#+end_src

#+name: app/controllers/application_controller
#+begin_src ruby
  before_action :export_upload_pass_list

  # ...

  def export_upload_pass_list
    gon.push(upload_pass_list: App::CONSTANTS::UPLOAD_PASS_LIST)
  end
#+end_src

#+name: upload_file_form.js
#+begin_src jsx

  accepts_list = () =&gt; {
      return gon.upload_pass_list.map(ext =&gt; `.${ext}`).join(&quot;,&quot;)
  }

  render() {
      return (
          &lt;input
            type=&quot;file&quot;
            name=&quot;data&quot;
            accepts={this.accepts_list()}
            onChange={this.fileChange}
          /&gt;
      )
  }

#+end_src
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-14-video-of-storybook-for-react-talk-from-october-2018.org</id>
      <updated>2018-11-14T21:08:10-06:00</updated>
      <title>Video of Storybook for React talk from October 2018</title>
      <content>* Video of Storybook for React talk from October 2018

  - Time-stamp: &lt;2018-11-06 20:08:58 tamara.temple&gt;
  - capture date: [2018-11-06 Tue 19:59]
  - keywords: react, storybook, presentation

** Intro

   In October 2018, I gave a talk / tutorial on [[https://storybook.js.org/basics/introduction/][Storybook]], an environment for developing visual components, and how I&#39;m using it in developing React components at work, for [[https://twitter.com/ReactMpls][React Minneapolis meetup]].

** Video

   The talk was recorded, and video is up at [[https://youtu.be/9B-IB2U3qSI][yahoo]].

#+BEGIN_EXPORT html
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9B-IB2U3qSI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
#+END_EXPORT
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-14-link-css-frameworks-vs-grid.org</id>
      <updated>2018-11-14T21:04:07-06:00</updated>
      <title>LINK: CSS Frameworks vs. CSS Grid</title>
      <content>* LINK: CSS Frameworks vs. CSS Grid

- Time-stamp: &lt;2018-11-14 21:04:07 tamara&gt;
- capture date: [2018-11-14 Wed 20:58]
- keywords: CSS, Grid, Frameworkds, Bootstrap, Rachel Andrew, good advice, Smashing Magazine

- Link: [[https://www.smashingmagazine.com/2018/11/css-frameworks-css-grid/]]

** Quick Summary

#+BEGIN_QUOTE
Have you ever considered whether CSS Grid can actually replace the need for CSS frameworks or third-party component libraries? In doing so, Rachel Andrew discovered a range of reasons people use a third-party framework and the positive and negative things about doing so.
#+END_QUOTE

** Thoughts

I love reading [[https://www.smashingmagazine.com/author/rachel-andrew][Rachel Andrew]]&#39;s posts, everywhere, not just on SmashingMagazine. This one is no different. Rachel is no hardline &quot;you have to use my stuff&quot; writer, she&#39;s thoughtfully laid out good reasons for using a CSS framework like Bootstrap, and even given other people&#39;s answers as to why it&#39;s a good choice. She&#39;s also given reasons for *not* using a framework, and why that&#39;s a good choice.

Her conclusion, for those coming down on the side of &quot;no framework&quot; are some pretty good steps, and even might help you decide if it&#39;s worth going your own way.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
