<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2021-07-30T21:18:08-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2021/2021-07-09-murmurations-at-drip.md</id>
      <updated>2021-07-30T21:18:08-05:00</updated>
      <title>2021-07-09-murmurations-at-drip</title>
      <content>---
layout: post
title: &quot;Murmurations at Drip&quot;
date: 2021-07-09
description: &quot;What&#39;s in a name? How we work together at Drip&quot;
author: tamouse
---

## Murmurations ##

The following video shows what is known as a murmuration of starlings, where the birds flock and swoop in some kind of formation:

&lt;div style=&quot;padding:75% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/31158841&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;script src=&quot;https://player.vimeo.com/api/player.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/31158841&quot;&gt;Murmuration&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/islandsandrivers&quot;&gt;Islands &amp;amp; Rivers&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;!-- [https://vimeo.com/31158841](https://vimeo.com/31158841) --&gt;

From the dictionary, a murmuration is a flock of starlings. Wikipedia has a little more info:

&gt; During the winter months, starlings are known for aggregating into huge flocks of hundreds to thousands of individuals, murmurations, which when they take flight altogether, render large displays of intriguing swirling patterns in the skies above observers. — [https://en.wikipedia.org/wiki/Flocking_(behavior)#In_nature](https://en.wikipedia.org/wiki/Flocking_(behavior)#In_nature)

Most dev folks have heard about [pair programming](https://en.wikipedia.org/wiki/Pair_programming), a part of Agile Programming, and some have heard of [mob programming](https://en.wikipedia.org/wiki/Mob_programming), which expands the pair to more than two people. An apt description by Marcus Hammerberg:

&gt; The basic concept of mob programming is simple: the entire team works as a team together on one task at the time. That is: one team – one (active) keyboard – one screen (projector of course). — from *&quot;[Mob Programming — Full Team, Full Throttle](http://www.marcusoft.net/2013/08/repost-mob-programming-full-team-full-throttle.html)&quot;*

## Where we started

Here at Drip, we do some pairing, and some teams do mob programming when it makes sense.

The team I&#39;m currently part of, Marketing Insights (MI for short, or just &quot;Insights&quot;), is responsible for providing recommendations, insights, and suggested actions to our customers, generically known as Guidance. We&#39;ve been given the opportunity to experiment and discover what works best for our customers.

At the time I joined the team, I was a contractor. About the same time, a new college hire was also joining the team. This felt like an ideal opportunity to use the multi-person approach in order to help both of us come up to speed quickly on the code base, and for our new engineer to learn the Ruby language, and Rails framework.

We worked really well in this mode, and started using it as other features that came our way. It was great to have someone with a lot of experience navigating and observing, someone with less experience driving, and other people to join in to provide answers in different areas.

## What changed? ##

However, on Jan 6th, 2021, the mob attack on the US Capital gave us a different feeling for the word &quot;mob&quot;.

Along with notions of &quot;mob rule&quot;, &quot;mob violence&quot;, and the general negative connotation for &quot;mob&quot; at least in the US and Canada, we found it quite distasteful to keep using that term for how we worked. We wanted to keep working in the helpful and productive way we had been, but lose the word.

We spent a few minutes sort of talking about the word, and no one was really coming up something, and I recalled the term &quot;murmuration&quot; from several years ago when I saw a video of one, captured by a couple women on film.

## Where we&#39;re at

From that point in January, our team has been murmurating for a big chunk of our work. The reasons why we started at the beginning don&#39;t apply so much anymore, but the multiple heads on one problem is really a solid practice, especially when we&#39;re tackling things that are brand new for us. By no means is all, or even most, of our work done in a murmuration, though.

Murmurations tend to happen:
 * when someone needs help on a ticket
 * when a ticket is particularly gnarly, possibly going into an area that has not been anticipated
 * when we want to learn and spread knowledge to the team (e.g. a key player in a specific tech was going to be out for a month -- *yay sabatticals at Drip!* -- so they ran a few murmurations with others driving so we could get a feel for the language and code base
 * if the action might be particularly dangerous if done incorrectly (e.g. we like to have a couple people doing a database migration in production)

When there&#39;s a bug in production that&#39;s causing a major issue for customers and we can&#39;t figure it out quickly, we still use a team, but it&#39;s more a swarm than a murmuration.

When someone picks up a ticket to work on and they&#39;d like help on it, they post a zoom link in our Slack channel and invite team members to join them. Most often someone does. Also, team members will regularly ask if there are any murmurations going on when they start the day, come back from lunch or a meeting, or have some momentary down time as they decide what to work on next.

Even our weekly planning time seems like a murmuration as the whole team is involved in defining epics and stories, with one person driving by writing it all down in Jira.

During programming murmurations, the driver is rotated so we all get time in the driver&#39;s seat as well as doing the observing or navigating role. This is quite helpful in alleviating fatigue and keeping everyone interested. Navigators can spend time providing context, history, and direction; some help by looking up documentation on syntax, libraries, method signatures, etc., to explain things to everyone. Everyone has a role, no one sits back and coasts. I believe this has a lot to do with how much we respect each other and also want to help each other.

## Why is this important?

Some could say &quot;it&#39;s just a word, just a name. Why bother changing it?&quot; That is a good question. The answers are partly practical, partly philosophical, and partly visceral.

As mentioned above, the word &quot;mob&quot; took on tremendously distasteful connotation for our team, yet we were highly committed to the activity entailed.

The beauty of a starling flock&#39;s murmuration strikes a chord with people; they are more than just enjoyable to watch, they are stunning displays of nature&#39;s beauty.

Using the term to refer to our work together provides a sense of that same synchronicity, swarming in formation together, without it needing to be defined, frame-worked, or even necessarily taught. It is *experienced*.

It is such a positive word, there&#39;s a little spark of joy every time someone uses the term, even creating new forms, such as &quot;murmurating&quot;, and several folks just get a smile on their faces when we talk about it in zoom meetings.

The positive sense of the word murmuration forms the feelings people have about working together in this fashion.</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/README.md</id>
      <updated>2021-06-17T12:11:15-05:00</updated>
      <title>README</title>
      <content># Tech notes

This is an older collection of notes on tech stuff that I used to keep in my original .org folder. I moved it over here as more appropriate than keeping them private, with the understanding that these are old, might be out of date, and inaccurate, as well as incomplete.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2021/2021-04-29-til-transform-keys.org</id>
      <updated>2021-06-03T10:23:25-05:00</updated>
      <title>2021-04-29-til-transform-keys</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline author:t broken-links:nil
#+OPTIONS: c:nil creator:nil d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:t stat:t tags:t tasks:t tex:t timestamp:t title:t toc:nil
#+OPTIONS: todo:t |:t
#+TITLE: TIL: HWIA tranform-keys
#+DATE: &lt;2021-05-21 Fri&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+KEYWORDS: rails, hash-with-indifferent-access, hwia, keys, transform_keys
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)

** TIL: transform_keys in Rails` Hash with indifferent access

  I think I knew this already, but it was reintroduced to me the other day.

  ~transform_keys~ is useful if you need to modify the keys of a Hash in a uniform way.

  When you call it on a HWIA (Hash-With-Indifferent-Access) and pass it a block, the block gets each key as it&#39;s argument. The block can perform any sort of manipulation on the key and the final line of the block is the new key. This can be used to force a set of keys to be unique before merging with another hash, for example.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/04/2020-04-28-til-using-optional-for-nested-attributes.md</id>
      <updated>2021-06-03T10:18:11-05:00</updated>
      <title>2020-04-28-til-using-optional-for-nested-attributes</title>
      <content># TIL: Using optional for nested attributes

Area: SWaaC  
Created: Apr 25, 2020 10:18 AM  
Done: No  
Draft Date: Apr 28, 2020  
Hide: No  
Series: TIL  
Status: In Review  
Tags: Rails, nesting  
Topic: Ruby and Rails  a

## TL;DR

Eventually I found the issue: When you (meaning &quot;I&quot;) do this, you (I) need to set `optional: true` on the `belongs_to` side.

## The Problem

I&#39;ve been banging my head on the keyboard trying to figure this out.
I had two models where once accepts the nested attributes for the other. It was just not working the way I thought it should. 
I kept getting back a validation error on the relationship `purchase_id`, and everything I tried was not working as I expected.
Removing the `accepts_nested_attributes_for` line made it work, and it really should have behaved the same way.

## Discussion

### Two models

1. `Purchase`, has many `PurchaseDetail`
2. `PurchaseDetail`, which belongs to `Purchase`

### purchase.rb:

```ruby
class Purchase &lt; ApplicationRecord
  has_many :purchase_details
  accepts_nested_attributes_for :purchase_details
end
```

### purchase_detail.rb ###

```ruby
class PurchaseDetail &lt; ApplicationRecord
  belongs_to :purchase, optional: true       ## NOTE: optional!!!
end
```

The `belongs_to` line as an `optional: true`, which tells Rails that the dependent records are required to have the foreign key field filled in when they are part of the whole conglomeration. This switched meanings from Rails 4 to Rails 5 sometime.

### The following form view:

```html
&lt;%= form_for(purchase) do |f| %&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;%= f.label :name %&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/div&gt;

  &lt;%= f.fields_for :purchase_details, purchase.purchase_details.each do |ff| %&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;%= ff.label :kind %&gt;
      &lt;%= ff.text_field :kind %&gt;
    &lt;/div&gt; 
  &lt;% end %&gt;

  &lt;div class=&quot;actions&quot;&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
```

### Produces the following form:

```html
&lt;form class=&quot;new_purchase&quot; id=&quot;new_purchase&quot; action=&quot;/purchases&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&amp;#x2713;&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;68IcN2OakPU+T2Y0SdbckzQPIrAN7XKoeaHxHD8JLB0KnCblSMaC78tHziLSm6orY8htBDDpwjSgNi5G+pt6hQ==&quot; /&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_name&quot;&gt;Name&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[name]&quot; id=&quot;purchase_name&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_purchase_details_attributes_0_kind&quot;&gt;Kind&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][0][kind]&quot; id=&quot;purchase_purchase_details_attributes_0_kind&quot; /&gt;
  &lt;/div&gt; 
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_purchase_details_attributes_1_kind&quot;&gt;Kind&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][1][kind]&quot; id=&quot;purchase_purchase_details_attributes_1_kind&quot; /&gt;
  &lt;/div&gt; 
  &lt;div class=&quot;actions&quot;&gt;
    &lt;input type=&quot;submit&quot; name=&quot;commit&quot; value=&quot;Create Purchase&quot; data-disable-with=&quot;Create Purchase&quot; /&gt;
  &lt;/div&gt;
&lt;/form&gt;
```

### This comes up to the PurchasesController#purchase_params private method:

```ruby
  def purchase_params
    params.require(:purchase).permit(:name, purchase_details_attributes: [:id, :kind])
  end
```

### Which is called in PurchasesController#create:

```ruby
def create
    @purchase = Purchase.new(purchase_params)
    
    respond_to do |format|
      if @purchase.save
        format.html { redirect_to @purchase, notice: &#39;Purchase was successfully created.&#39; }
        format.json { render :show, status: :created, location: @purchase }
      else
        format.html { render :new }
        format.json { render json: @purchase.errors, status: :unprocessable_entity }
      end
    end
  end
```

This was **failing** on me for the longest time, until it was pointed out that the `belongs_to` relationship has `:optional` turned *off by default in Rails 5!* Setting it to true suddenly made everything work as expected. This was a long long frustrating day.

The most difficult thing is looking at the app I&#39;m working on, running this same version of Rails and Ruby, is that it works *without* having to specify the `optional: true` flag on the `belongs_to`. 

## The aftermath

The failure when the `optional` field was left off was that the independent record would not save because of a validation error. Inspecting the validation errors on the dependent records didn&#39;t lead me to a solution straight away, though. I still had to fumble around, read lots of blog posts and stack overflows until I finally found mention of the `optional: true` flag.

This confused me for a long time, as well, as the project I&#39;m currently working on also does not have the `optional: true` set and yet it works. The project did migrate from 4 to 5, but perhaps there&#39;s some gem that takes care of that. I will have to ask about it.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/learning.org</id>
      <updated>2021-05-21T09:59:03-05:00</updated>
      <title>Resources for learning how to program, especially how to program in Ruby and Rails</title>
      <content>* Resources for learning how to program, especially how to program in Ruby and Rails

- last updated Time-stamp: &lt;2018-12-30 12:42:51 tamara&gt;

** Introduction

Many people ask me &quot;How do I learn to program?&quot; and &quot;What book(!) should I read to learn Rails?&quot;.

These are legitimate questions, but they aren&#39;t necessarily the right questions to ask in order to begin the journey of becoming a software craftsperson.

Better questions, I feel, are:

- What resources do you recommend for beginners?
- Where can I go for help?

I&#39;ve been finding things around the &#39;net that can greatly help people new to programming, new to web development, new to Rails, and so on.

--------------

*UPDATE:* I&#39;ve created a section for the [[./beginners-section.org][Absolute Beginner]] as well, you might find it useful.

This is a quick, short list of things. I urge you to seek them out, and seek out others as well, and create your /own/ list of learning resources. People will begin to ask you, and it&#39;s nice to have something handy.

Also, [[https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard][learning Rails is hard]]. But don&#39;t despair! The key to learning is break things down, focusing and practicing small things, and build up a lot of skills slowly. (&quot;Wax on, wax off.&quot; &quot;Ok, Mr. Myagi.&quot;) I&#39;m going to jump ahead and tell you to download the first chapter (free) of Justin Weiss&#39;s book [[https://www.justinweiss.com/practicing-rails/][Practicing Rails]]. Search for &quot;first chapter&quot; and fill out the form to get it. You&#39;re also signing up to get e-mail from Justin, but it&#39;s always good stuff.

--------------

/Update Sun Jun 8 11:39:13 2014:/ Recently came across web post [[http://astonj.com/tech/best-way-to-learn-ruby-rails/][Best Way To Learn Ruby and Rails]] and must say it is a great compilation of resources. In addition, Ashton puts the focus right at the heart of the matter: you have learn /both/ Ruby /and/ Rails.

--------------

** Books

 - [[https://www.goodreads.com/book/show/13590009-think-like-a-programmer][*Think Like a Programmer: An Introduction to Creative Problem Solving*]] by V. Anton Spraul.

   Spraul&#39;s purpose in this book is not to teach you how to write a program, but to begin to understand the problem-solving approach that is inherent in good programmers. Like so many skills, programming is driven by the desire and vision of the practitioner. A painter uses brushes, canvas, paints, other media to create a work of art, but it isn&#39;t the tools, it isn&#39;t the specific techniques, and it isn&#39;t even the particular skill the painter has that makes a good work of art; it is their composition, the melding of media and surface, the use of different techniques, and practice in developing the skills that come together to form the work of art. Spraul is going to take you deeper than just the syntax, semantics, and data structures of software to the heart of what makes a good programmer: the ability to creatively find and generate solutions to problems.

 - [[https://www.goodreads.com/book/show/520.Learn_to_Program][*Learn to Program*]] by Chris Pine.

   To be honest, I have not looked through this book. It is, however, nearly universally recommended to people new to programming. The original tutorial is available online for free as well: [[https://pine.fm/LearnToProgram/]]. LtP was featured on the great webcomic [[http://www.unshelved.com/2014-7-25][Unshelved]].

 - [[https://pragprog.com/book/tpp/the-pragmatic-programmer][**The Pragmatic Programmer]] by Andrew Hunt and David Thomas

   This is the best modern treatise on the craft of programming. It represents the best of experiences programmers have come to appreciate during years of development. I read this book after years of practice, and found everything in it to ring true. (The thought &quot;I could have written this!&quot; came up frequently.) This book is not about any specific language or technology, but spans the gamut of software development. This is a must-have for practitioners.

 - [[https://www.goodreads.com/book/show/79766.A_Pattern_Language][*A Pattern Language: Towns, Buildings, Construction*]] by Christopher Alexander.

   You may be wondering why I&#39;ve included a book on building construction. The answer is quite simple: the concepts in building towns and houses is nearly directly translatable to building software applications and systems. One part of being an excellent craftsperson is being able to apply abstract learning in different problem domains. If you are an expert in writing software, you are almost /never/ going to be solving problems only for other software developers. (You can and should do so, but the client and users are generally non-programmers.) Thus you&#39;re most likely going to be working in someone else&#39;s domain of expertise. Alexander&#39;s views on architecture apply to software architecture as well.

 - [[http://shop.oreilly.com/product/9780596510046.do][*Beautiful Code*]] by Andy Oram and Greg Wilson.

   A book with a purpose, that isn&#39;t a how to, so much as a how to think. It&#39;s a collection of essays by various software developers on what they think makes code beautiful. In all, the following holds true:

   1. First, make it correct.
   2. Second, make it pretty.
   3. Third, make it fast.

 - *Programming Proverbs* by Henry F. Ledgard

   This book, published in 1975, and a subsequent volume dedicated to the Pascal language published in 1979, were essential to me back when I was in university learning computer science. They&#39;re out of print now, so I&#39;m starting a blog series covering them. [[file:%7B%7Bsite.baseurl%7D%7D%7B%%20link%20_posts/2017-07-23-pp-introduction.markdown%20%%7D][Programming Proverbs: Introduction]]

 - [[https://leanpub.com/systemdesignheuristics][*Systems Design Heuristics*]] - by the late, great Jerry Wienberg.

   Jerry was a friend as well as a teacher. I miss him enourmously. This book is full of his thoughts and writings on how one should do systems design. As the title implies, there are no rules, but there are some heuristics one can apply to the overall design and architecture of systems.


*** Object-Oriented Programming

 - [[https://www.sandimetz.com/99bottles][*99 Bottles of OOP*]] by Sandi Metz and Katrina Owen.

   A recent book, representing the absolute best by two teachers of software engineering. Sandi has been teaching Object-oriented programming for decades, and Katrina brings in her expertise with refactoring, resulting in a deep book that stretches beyond the basics and deep into the structures and understanding of object systems and idioms. It brings up to date the actual concepts of refactoring, test-driven development, naming things, reducing code &quot;smells&quot; and making code more easily and economically maintainable and sustainable. They take all the buzzwords and unbuzzify them into practical, useful methodologies and techniques.

*** Ruby-specific

 - [[https://pragprog.com/titles/ruby/programming-ruby-2nd-edition/][*Programming Ruby, 2nd ed.*]] by Dave Thomas, with Chad Fowler and Andy Hunt
 
   The seminal Ruby language guide.

 - [[https://www.goodreads.com/book/show/9364729-eloquent-ruby][*Eloquent Ruby*]] by Russ Olsen.

   Olsen&#39;s approach in this book is to go far beyond just learning a programming language, but a way to learning the idioms and the &quot;Ruby Way&quot;. Even if your chosen language is something other than Ruby, reading this book will give you an appreciation for how to delve into a language and get the most out of it.

 - [[http://www.confidentruby.com/][*Confident Ruby*]] by Avdi Grimm.

   More than any other book I&#39;ve read on Ruby, &quot;Confident Ruby&quot; has affected my coding habits more than any other. If Ruby is about making programmers happy, /Confident Ruby/ is about making programming joyful, and not just in the immediate, but being able to look at code you&#39;ve written in the future and recall the joy. /Confident Ruby/ seeks to combat software rot from the get-go.

 - [[http://www.amazon.com/The-Well-Grounded-Rubyist-David-Black/dp/1617291692][*Well-Grounded Rubyist*]] by David A. Black

   Also known as the &quot;Black Book&quot; (because of the author&#39;s name), WGR is the successor to /Ruby for Rails/ by Black that provided me with the much-needed introduction to how to write Ruby code, with the idea of using it in Ruby for Rails. This book is a fabulous primer on the Ruby idioms and expressions that help make one a good Ruby programmer.

 - [[http://www.poodr.com/][*Practical Object-Oriented Design in Ruby*]] by Sandi Metz

   This book provides a deeply-needed introduction to object-oriented design, specifically targeted to the Ruby language. Ruby is one of the richest languages in which to express object-oriented patterns, but it is easy to fall of the OO wagon and start to get things messed up. Sandi provides the thinking tools necessary to decide how to structure your code for better maintainability, extensibility and testability. Comprehension and forward communication of the choices made during software design are crucial to programming, and Sandi is one of the very best at explaining things.

*** Rails-specific

 - [[http://www.manning.com/bigg2/][*Rails 4 in Action*]] by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner.

   A follow-on the highly successful Rails 3 in Action, R4iA has been completely rewritten, with new examples, case study, and all the great new features in Rails 4.

   A great book for beginning Rails developers to start with, and for intermediate developers to step up their game.
   
 - [[https://pragprog.com/titles/rails6/agile-web-development-with-rails-6/][Agile Web Development with Rails 6]] by Sam Ruby and David Bryant Copeland
 
   The officially sanctioned book on Rails development.

 - [[https://www.justinweiss.com/practicing-rails/][*Practicing Rails*]] by [[http://www.justinweiss.com][Justin Weiss]].

   The first chapter alone (free!) is worth a download and very thorough read. Justin has provided one of the most effective strategies for learning just about /anything/ skill based, and it&#39;s especially effective for learning software skills. The focus of the book and the examples and such are obviously Rails, but the first chapter is applicable to anything.

*** JavaScript-specific

 - [[https://www.goodreads.com/book/show/2998152-javascript][*JavaScript: The Good Parts*]] by David Crockford.

   JavaScript is a vast, sprawling language and ecosystem, and has been maligned for much poor code on the web. Crockford extracts out the parts that are really useful, giving the reader a better grounding. This book is the progenitor of many of the JavaScript frameworks that have come up the past few years, as well as CoffeeScript and other *Script derivatives.

 - [[https://github.com/getify/You-Dont-Know-JS][*You Don&#39;t Know JS series*]] by [[https://github.com/getify][Kyle Simpson]].

   A /tour de force/ by one of the great teachers and evangelists of JavaScript, Kyle&#39;s &quot;You Don&#39;t Know JS&quot; series is a must-read collection of books. You can get the books in raw form on-line at the above address, and you can get the published e-books at your favourite vendor.

 - [[http://eloquentjavascript.net/][*Eloquent Javascript*]] by Marijn Haverbeke.

   When I was more naive about JS, I wrote a bit of a negative review of this book. Subsequently, I&#39;ve learned of it&#39;s true eloquence and meaning in giving a model of how to organize and implement modern JS. The subtitle &quot;A modern introduction to programming&quot; is still a bit misleading, perhaps, because you have to understand a fair bit of JavaScript /and/ programming to get the message, I feel. But that&#39;s just a quibble at this point. Read this before you strike out on creating a client-based JS application; you won&#39;t regret it.

 - *Test-Driven JavaScript Development* by Christian Johansen (Addison-Wesley Professional, September 2010, ISBN 9780321683915)

   (The [[http://www.informit.com/store/test-driven-javascript-development-9780321684042][ebook]] for this title is ridiculously expensive. I read it via [[https://learning.oreilly.com/library/view/test-driven-javascript-development/9780321684097/][safarionline]].)

   This book provides some great insights into testing JavaScript applications. Released in 2010, the things that are out of date are the specific tools used for testing, /however/, the concepts for writing tests and performing test-driven Javascript development are still very appropriate.

 - [[https://leanpub.com/javascriptallongesix][*JavaScript Allongé*]] by Reginald &quot;raganwald&quot; Braithwait

   Using the metaphor of a coffee barista, Reg goes in depth on thinking about how JavaScript works; this is not a practical book from the standpoint of &quot;tell me what code to write&quot;, but rather from the standpoint of knowing how JavaScript works inside so you can write better code yourself.


*** HTML and CSS Specific

 - [[https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189?ie=UTF8&amp;*Version*=1&amp;*entries*=0][*HTML and CSS Design and Build Websites*]] by Jon Duckett.

   This book has been recommended by several people in the [GDI] courses I&#39;ve been helping in. A very visual approach, using full-colour photographs to explain the two declarative languages.

** Web sites

 This is just going to be a list of sites I&#39;ve found or been pointed at for helping people learn to program. These are most definitely biased towards Ruby and Rails, as that is my current area of concentration, and generate the most requests that come to me.

 - [[http://www.theodinproject.com/home][*The Odin Project*]] -- pulling together a curriculum from around the web, this is a curation site that gives order and structure to learning how to develop web applications.

 - [[http://codekata.com/][*Code Kata*]] -- Dave Thomas&#39;s site that lists a great set of coding exercises. You can work these more than once, in fact that is what you do with kata.

 - [[http://exercism.io/][*Exercism.IO*]] -- a site devoted to helping people learn and think deeply about writing excellent code. It has projects you implement and then get feedback on from others, and allows you to give feedback as well.

 - [[http://docs.railsbridge.org/docs/][*RailsBridge*]] -- a site devoted to helping people get up and running on learning Ruby on Rails, with emphasis on reaching out to women and LGBTQ folks. RailsBridge workshops are run around the world and the documents here can be used individually to help turn your computer into a development machine. What so often isn&#39;t addressed directly by very many of these sites and books is the ecosystem that one has to learn as well: a coding editor, the command line, rake, irb/pry, git, heroku if that is your choice for deployment (which I do recommend for small beginner projects so you can show it off to your friends); RailsBridge tutorials include these very important tools.

 - [[http://guides.railsgirls.com/][*RailsGirls Guides*]] -- I haven&#39;t explored these in depth yet, I just got the site yesterday. However, I can see just from the list of guides these would be pretty great, just like the RailsBridge site above.

 - [[http://www.railstutorial.org/][*Hartl&#39;s Rails Tutorial*]] -- the most often recommended site to learn how to create web applications in Rails, it goes beyond the Rails stack itself, teaching Ruby, HTML5, CSS3, JavaScript, user authentication and authorization, data modeling, and so on. While Michael sells the book, tutorials, and screen casts, the text of the tutorial online is free at http://www.railstutorial.org/book. Considerable work has gone into this effort, however, so if you can afford to, please purchase at least the book.

 - [[https://www.codeschool.com/][*CodeSchool*]] -- learn from the &quot;Comfort of your own browser&quot;. Codeschool has web casts, coding practices, challenges, and so on.

 - [[http://codeacademy.com][*CodeAcademy*]] -- although I do not personally like the way one interacts with the web site, it does offer an gentle introduction to ruby, javascript, python and other subjects in an immediate feedback environment.

 - [[https://www.khanacademy.org/computing/cs][*Kahn Academy*]] -- learning to program with JavaScript (if you are just starting out, JS is a fine language to learn. It&#39;s fairly ubiquitous in the online world.). Their approach is teaching young folks, which might or might not appeal.

 - [[http://railscasts.com/][*RailsCasts*]] -- another super awesome effort has been put together by Ryan Bates. Current production is on hiatus, so the $9/month fee for the full screen casts is being pro-rated, so you can buy in for $9 and there won&#39;t be further monthly charges until production starts up again.

 - [[https://www.rubytapas.com/frequently-asked-questions/][*RubyTapas*]] -- Avdi Grimm is a fabulous Ruby and Rails mentor and guide, who puts out two very short screen casts a week (tapas -- small plates). These are really impeccably done, and I personally love listening to Avdi talk.

 - [[http://learncodethehardway.org/][*LearnCodeTheHardWay*]] -- provides online versions of books and tutorials for [[http://learnpythonthehardway.org/book/][*Python*]], [[http://ruby.learncodethehardway.org/book/][*Ruby*]], [[http://c.learncodethehardway.org/book/][*C*]], [[http://sql.learncodethehardway.org/book/][*SQL*]], [[http://regex.learncodethehardway.org/book/][*Regular Expressions*]] and more.

 - [[http://www.rubykoans.com/][*Ruby Koans*]] -- &quot;koans&quot; are an Eastern discipline tradition: small, repeated exercises to learn skills and build them into your muscles and memory, so you can use them without thinking consciously about them. In this sense, the ruby koans are small exercises intended to lead you on the way to learning ruby. I can&#39;t say if they&#39;re that successful, but some people definitely enjoy this progressive way of learning. The ruby koans definitely guide you in the way of test-first development, which is a beneficial practice for all to know.

 - [[https://thoughtbot.com/upcase][*Upcase, by Thoughtbot*]] -- not a bootcamp, a finishing school. Where to go to level-up.

** Podcasts

 I am not such a big fan of podcasts, but that has more to do with my personal learning style. Nevertheless, there are some great pocasts out there.

 - [[http://www.greaterthancode.com/][*Greater Than Code*]] Also known as =&gt;Code=, this is a podcast that&#39;s more about people that practice software development and allied things, about management of such people, and making all our lives better.

 - [[http://frontendhappyhour.com/][**Frontend Happy Hour]] A handful of front end developers, including Brian Holt, Jem Young, Ryan Burgess, Augustus Yuan, and Stacy London, joined by various guests. It&#39;s a fun podcast, each week with a special word or phrase that when uttered, everyone takes a drink.

 - [[http://www.codenewbie.org/][*CodeNewbies*]] -- started off as a twitter chat, and grew into a thing, CodeNewbies offers podcasts on topics that range far and wide. Recent topics have included Scrum/Agile methods, maintaining your mental health while programming, interviews with folks who have created significant web sites (Gina Trapani of LifeHacker!!), mobile, databases, single-page apps, you name it. One of the best aspects I can see directly is that this is a /very/ open, diverse collaboration.

** Teaching Organizations

 These are the ones I&#39;m familiar with at this point in time (late 2015) in the Twin Cities area:

 - [[https://frontendmasters.com/][*Frontend Masters*]] -- Based out of Savage, MN, they offer both live in-person and online courses, and they have recorded all the training sessions for on-demand viewing if you&#39;re a member. The quality of these sessions and the videos are extremely good (these are not your twitch.tv live sessions of someone rambling about their code as they hack away) All the courses I&#39;ve taken and viewed are fantastic.

   FrontendMasters tackles intermediate and advanced topics in developing on the front end of web applications. Heavy into JavaScript, libraries, frameworks, techniques, and so on.

** Bootcamps

 These are becoming quite popular, if expensive, but they seem to provide what&#39;s being offered: intensive training in the skills necessary to become a web application developer, with experience and skills in the entire lifecycle of modern software development. I can&#39;t really provide much information on them, as I&#39;ve never experienced them. [[http://www.bootcamps.in/][Bootcamps.in]] provides at least a first-glance at several bootcamps.

** Conferences and Meetups

 Going to conferences, hanging out, meeting like-minded people, and generally instilling one&#39;s self into the millieau of the Ruby and Rails communities can be extremely rewarding. Even if you&#39;re not the conference type, make an effort to find people in your area to talk to.

 There&#39;s lots of other meetups in the Twin Cities I&#39;m regularly trying to attend:

 - [[https://www.meetup.com/Women-Who-Code-Twin-Cities/][Women Who Code Twin Cities]]
 - [[https://www.meetup.com/ruby-mn/][Ruby.MN]]
 - [[https://www.meetup.com/JavaScriptMN/][JavaScript.MN]]
 - [[https://www.meetup.com/React-Minneapolis-Meetup/][React Minneapolis Meeetup]]
 - [[https://www.meetup.com/Elixir-MN/][Elixir MN]]
 - [[https://www.meetup.com/Minneapolis-St-Paul-WordPress-User-Group/][MSP WP]]

** More Advanced

If you want to go deep and learn more about computer science, the book [[https://mitpress.mit.edu/sicp/][/Structure and Interpretation of Computer Programs/]] is probably your best bet in terms of a real CS text book that&#39;s available online for free. It&#39;s not a tutorial, but there are exercises in the text. The book uses Scheme, a lisp-like programming language. Everyone should learn a little lisp at some point. :) However it&#39;s not mandatory one use Scheme (or Clojure as the local Clojure user group has been doing). The analytical concepts apply across all languages. If you&#39;re focused on JavaScript or Ruby, you can work the examples in those languages, too.

The afore-mentioned Frontend Masters has been producing some much more advanced courses lately:

- [[https://frontendmasters.com/courses/computer-science/][Four Semesters of Computer Science in 5 Hours]] with [[https://frontendmasters.com/teachers/brian-holt/][Brian Holt]]

- [[https://frontendmasters.com/courses/computer-science-2/][Four Semesters of Computer Science in 5 Hours, Part 2]] with Brian Holt

- [[https://frontendmasters.com/courses/practical-algorithms/][A Practical Guide to Algorithms with JavaScript]] with [[https://frontendmasters.com/teachers/bianca-gandolfo/][Bianca Gandolfo]]

- [[https://frontendmasters.com/courses/data-structures-interviews/][Introduction to Data Structures for Interviews]] with Bianca Gandolfo

- With Will Sentance:

  - [[https://frontendmasters.com/courses/javascript-hard-parts/][JavaScript: The Hard Parts]]

  - [[https://frontendmasters.com/courses/javascript-new-hard-parts/][JavaScript: The New Hard Parts]]

  - [[https://frontendmasters.com/courses/object-oriented-js/][JavaScript: The Hard Parts of Object Oriented JavaScript]]

I&#39;m just going to list [[https://frontendmasters.com/teachers/kyle-simpson/][Kyle Simpson&#39;s entire collection]] because they are *all* great

Other fav instructors:

- [[https://frontendmasters.com/teachers/scott-moss/][Scott Moss]]
- [[https://frontendmasters.com/teachers/shirley-wu/][Shirley Wu]]
- [[https://frontendmasters.com/teachers/kentcdodds/][Kent C. Dodds]]
- [[https://frontendmasters.com/teachers/jem-young/][Jem Young]]
- [[https://frontendmasters.com/teachers/lukas-ruebbelke/][Lukas Reubbelke]]
- [[https://frontendmasters.com/teachers/sarah-drasner/][Sarah Drasner]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/12/2020-12-09-til-deleting-nested-objects-in-accepts-nested-attributes-for.md</id>
      <updated>2020-12-09T22:47:55-06:00</updated>
      <title>2020-12-09-til-deleting-nested-objects-in-accepts-nested-attributes-for</title>
      <content>---
title: &quot;TIL: Deleting nested objects in accepts_nested_attributes_for&quot;
Area: SWaaC
Created: 2020-05-04T12:46:00
Link: https://api.rubyonrails.org/v5.1.7/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for
Published: 2020-12-09T22:46
tags: Rails, attributes, nesting
topic: Ruby and Rails
---

&gt; By default the associated records are protected from being destroyed. If you want to destroy any of the associated records through the attributes hash, you have to enable it first using the `:allow_destroy` option. This will allow you to also use the `_destroy` key to destroy existing records:

```ruby
class Member &lt; ActiveRecord::Base
  has_many :posts
  accepts_nested_attributes_for :posts, allow_destroy: true
end

params = { member: {
  posts_attributes: [{ id: &#39;2&#39;, _destroy: &#39;1&#39; }]
}}

member.attributes = params[:member]
member.posts.detect { |p| p.id == 2 }.marked_for_destruction? # =&gt; true
member.posts.length # =&gt; 2
member.save
member.reload.posts.length # =&gt; 1
```

Up earlier in the page, the `_destroy` is mentioned:

&gt; For each hash that does not have an id key a new record will be instantiated, unless the hash also contains a `_destroy` key that evaluates to true.

So apparently it doesn&#39;t matter what the actual value of the key is, as long as it&#39;s *truthy*

In the controller, make sure to permit the `_destroy` attribute as well.

## an example

If this is the row in your form that contains a subitem to go along with the update of the item:

```html
&lt;div class=&quot;row&quot; id=&quot;item_subitem_2_row&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;item[subitem][2][id]&quot; value=&quot;12&quot; id=&quot;item_subitem_2_id&quot; /&gt;
  &lt;!-- rest of row fields --&gt;
  &lt;button type=&quot;button&quot; id=&quot;item_subitem_2_delete_button&quot;&gt;
    &lt;span class=&quot;trash-can-icon&quot;&gt;&lt;/span&gt;
  &lt;/button&gt;
&lt;/div&gt;
```

you would need to extract that row and replace it with:

```html
&lt;div class=&quot;row&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;item[subitem][2][id]&quot; value=&quot;12&quot; /&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;item[subitem][2][_destroy]&quot; value=&quot;1&quot; /&gt;
&lt;/div&gt;
```

The `id` on the `input` field in the first code snippet is typically auto-generated by Rails form helpers. The &quot;destroy&quot; hidden input doesn&#39;t really need an `id` field as it won&#39;t be referred to by the DOM. Unless you need to for some reason, then add one.

Then some JavaScript is necessary to detect the delete subitem button click, and perform the replacement.

Theoretically, which means I haven&#39;t been able to try this yet, the `_destroy` field could be already defined for the form row, and you set the value of it to something truthy on button click, and hide the row.

-----

Source: &lt;https://api.rubyonrails.org/v5.1.7/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for&gt;
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-23-honouring-colour-scheme-in-css.md</id>
      <updated>2020-10-21T11:31:51-05:00</updated>
      <title>2020-03-23-honouring-colour-scheme-in-css</title>
      <content>---
title: &quot;Honouring the user&#39;s preferred colour scheme in CSS&quot;
date: 2020-03-23T03:32
category: css
tags: [colour-scheme, dark-mode, light-mode, react, styled-components]
---

How do I honour the user&#39;s chosen preferred colour scheme in the CSS I&#39;m writing? Recently MacOS introduced dark mode in Mojave, and further added a shifting light and dark mode to match the time of day in Catalina. I&#39;d like my sites, but more importantly, my React apps to follow this.


## Background ##

The W3C has defined a media query, `prefers-color-scheme` ([Defined in Media Queries Level 5 Draft, March 2020](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme &quot;Still a draft&quot;)). It has [some implementations](https://caniuse.com/#search=prefers-color-scheme) already. At least it&#39;s on the majors, so it&#39;s probably okay to use.

## Media query ##

The check to see what colour scheme the user has set is done with a media query:

``` css
@media screen and (prefers-color-scheme: light) {
  /* settings for light scheme */
}
@media screen and (prefers-color-scheme: dark) {
  /* settings for dark scheme */
}
```

So this is clearly possible in regular CSS.

## Using in styled-components ##

Since I most often code in React, and most often use `styled-components` library to implement CSS-in-JS, I need a way that this will work. Turns out it&#39;s not so bad, using SC&#39;s `ThemeProvider`.

In your theme file, set up the various colours, with a group for light mode and another group for dark mode:

``` rjsx
const colors = {
    light: {
        primaryText: &quot;#333&quot;,
        primaryBg: &quot;#FFF&quot;,
        // and so on
    },
    dark: {
        primaryText: &quot;#F2F2F2&quot;,
        primaryBg: &quot;#000&quot;,
        // and so on
    },
    common: {
        // colors that work for both
    }
};

export default {
    colors
};

```

Where I wrap react components with the SC ThemeProvider, I can import and provide the theme as usual:

``` rjsx
import React from &quot;react&quot;;
import { ThemeProvider} from &#39;styled-components&#39;;
import theme from &quot;../../theme&quot;;

function App({ children }) {
    return (
        &lt;ThemeProvider theme={theme} &gt;
          {children}
        &lt;/ThemeProvider&gt;
    );
}

export default App;
```

Then later, in the styled compeonent, this happens:

``` rjsx

import styled from &#39;styled-components&#39;;

export const SomeSection = styled.section`
  color: ${props =&gt; props.theme.colors.light.primaryText};
  backgound-color: ${props =&gt; props.theme.colors.light.primaryBg};

  @media screen and (prefers-color-scheme: light) {
    color: ${props =&gt; props.theme.colors.light.primaryText};
    backgound-color: ${props =&gt; props.theme.colors.light.primaryBg};
  }
  @media screen and (prefers-color-scheme: dark) {
    color: ${props =&gt; props.theme.colors.dark.primaryText};
    backgound-color: ${props =&gt; props.theme.colors.dark.primaryBg};
  }
`
```
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/10/TIL-scoped-uniqueness-validation-syntax.md</id>
      <updated>2020-10-21T11:30:09-05:00</updated>
      <title>TIL-scoped-uniqueness-validation-syntax</title>
      <content>## Keywords:

- Ruby
- Rails
- Validators
- ActiveRecord
- Uniqueness

## Introduction

In Rails versions prior to 5.1, the standard accepted way to do a scoped uniqueness validation was by using the `validate_uniqueness_of` method:

``` ruby
class Subcategory &lt; ApplicationRecord

  belongs_to :category
  
  validate_presence of :slug
  validate_uniqueness_of :slug, scope: :category_id
end
```

With Rails 5.2, the longer forms are being deprecated, in favour of using the `validates` method instead.

In the api docs, however, the uniqueness validator isn&#39;t discussed, not even an example.

Luckily, I had rubocop set up to complain about the use of the older methods, and told it to fix the failures it found.

The new syntax would be:

``` ruby
class Subcategory &lt; ApplicationRecord

  belongs_to :category
  
  validates :slug, presence: true
  validates :slug, uniqueness: { scope: :category_id }
end
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/gdi-classes.org</id>
      <updated>2020-05-23T16:52:21-05:00</updated>
      <title>GDI</title>
      <content>* GDI
** Slack convos
*** Discussion in #random about job salaries
    CAPTURE_DATE: [2017-06-05 Mon 15:45]

    #+BEGIN_QUOTE

 OP [1 hour ago]
 Hey all, I have a question that I have been struggling with for a bit. I am currently working through a bootcamp for full stack development and would like to start getting organized for the job search. I am starting to watch job postings and some ask what my preferred salary would be. I spent many years as a national park ranger, which means low pay and no chance at negotiating starting pay either. I have tried to look around at what the starting pay would be for staying in the twin cities but find reports on average salaries of experienced developers. Does anyone have resources on this or advice on what to ask for and how much to negotiate? I just don&#39;t know what to even ask for as a salary aside from making sure it pays the bills. Feel free to DM too if you would prefer. THANKS!

 R1 [1 hour ago]
 @OP: 1st things 1st, never mention your previous salary. Especially since it doesn’t apply to your next role as a dev.

 R1 [1 hour ago]
 2nd things 2nd, take a look at glassdoor, linkedin, and indeed. heck even the gov websites with salary averages to start getting a range.

 R1 [1 hour ago]
 then think about your life, lifestyle, I came up with a minimum I am comfortable with and then I keep that to myself.

 R1 [1 hour ago]
 I ask for 10-20k higher, depending on the company

 R1 [1 hour ago]
 My one phrase of advice when it comes to this is “The worst thing they can say is no, and even if they say no, it’s probably a maybe” (edited)

 R1 [1 hour ago]
 Know what you’re bringing to the table, some people will try to use your bootcamp only experience as a negative against you, it’s not. It’s a positive. It speaks to your thirst to learn, ability to learn and adapt quickly, passion and so much more.

 R1 [1 hour ago]
 People often underestimate what it means to basically change your whole life overnight when it comes to deciding to go to a bootcamp

 R1 [1 hour ago]
 anyways rant over… That’s my advice!

 R1 [1 hour ago]
 I bet @R5 has great advice on this as well

 OP [1 hour ago]
 thanks! that helps get me started

 R1 [1 hour ago]
 anytime. Congrats on getting ready to get out there!!

 R2 [1 hour ago]
 Yes yes yes. I second everything @R1 just mentioned. @R5 brought up the “never mention your previous salary” comment the other day. This is so key. Keep in mind that when a company posts a job, they already have a budget in mind. Let them share that first!

 R2 [1 hour ago]
 Not everyone will do that, and some might be cranky if you stay firm (this just happened to me) but it’s definitely worth a try.

 R2 [1 hour ago]
 We had a negotiating GDI workshop about a year ago that I found so valuable. Go in to the discussion with three numbers in your mind: the number that would just blow your socks off and make you crazy happy, a number that seems fair, reasonable and makes you excited, and a minimum number that you are willing to walk away from if they don’t meet. Keep these to yourself, but start with your high in the sky number and go from there :slightly_smiling_face:

 R3 [1 hour ago]
 Sometimes a company will ask you also what you used to make. When they ask me what I was making at my last job, I always lie and tell them a number that I&#39;m actually targeting to make at this new position. A lot of jobs will make an offer so close to your last salary that saying a number you&#39;re wanting will put you in a negotiating range where you can say, &quot;Well, I was actually looking to make more than at my last position.&quot;

 R4 [1 hour ago]
 Negotiating tactics apply to salary negotiation as much as they do to other negotiable situations (car buying, flea markets, etc), so if you want to psych yourself up with some general negotiation strategies from across the Internet as well, that can&#39;t hurt. (edited)

 R3 [44 minutes ago]
 Also, keep yourself open to possible company perks, maybe you&#39;d take less $$ if you have more vacation, or work from home days, or really amazing health insurance. It&#39;s not just about salary negotiation. The biggest thing people don&#39;t negotiate for more is vacation, and sometimes can be the easiest to get.


 R4 [39 minutes ago]
 Agreed that the salary number isn&#39;t everything - we hear a lot about &quot;company culture&quot; these days, and a lot of what companies tout as their &quot;culture&quot; is meaningless, so diving into that can also net you a bomb place to work that helps your mental health and personal fulfilment even if it doesn&#39;t pay Google money. Awesome on-site skill-building opportunities? Plenty of experienced people who enjoy mentoring and have helpful attitudes? Tangible, clear, supported diversity initiatives? Strong community/charitable ties? What kinds of &quot;culture&quot; things matter to you?

 R1 [28 minutes ago]
 Agreed. I would work at a place that covers my insurances, and offers more PTO, conference stipends, etc, if the salary is lower because I find those kinds of things very valuable.

 R1 [28 minutes ago]
 Definitely make sure culturally it is a fit for you too. Ask to meet the team before you make any final decisions

 R5
 [15 minutes ago]
 @R1 I really have nothing to add. Dang, write a book!!


 R1 [14 minutes ago]
 hahaha. I’ve heard that before

 R1 [14 minutes ago]
 Maybe i should :thinking_face:


 R2 [14 minutes ago]
 Yes, please!

 R5
 [13 minutes ago]
 Oh, i guess i do have an additional piece of advice: do *not* refer to yourself as a “Junior Developer” (or “junior” anything). Certainly, you don’t the time/experience/etc BUT you do have skills they can use today, and you should have the ability to learn things, but most of all, solve problems


 R5
 [12 minutes ago]
 no one actually knows what the difference between a jr dev and sr dev actually is; it it most certainly not number of years, although that’s often the only thing people think of.

 R2 [12 minutes ago]
 @__ might have something to add, too. I know HackReactor has a lot of opinions on this.

 R5
 [11 minutes ago]
 I might be getting a bit subversive here, but the skills ppl look for in sr people is the ability to be self-directed, take initiative, and most of be able to solve problems

 R2 [10 minutes ago]
 Ha. What makes you “senior” is a whole other giant discussion that I woudl love to have.

 R5
 [10 minutes ago]
 you can most definitely have those; it’s not number of years. sure, someone like me, i’ve just made a huge huge pile of mistakes to learn from, but there’s a lot of sr people who do not bother to learn

 R5
 [10 minutes ago]
 it’s a false label  /  dichotomy

 R5
 [9 minutes ago]
 but it’s one that is so entrenched it’s hard to deal with. so again, do not put that label on yourself

 R5
 [9 minutes ago]
 we need to have another meetup this week so we can have all these great conversations LOL


 R2 [9 minutes ago]
 yep yep yep - hard when that’s often tied to salary, recognition, opportunities, responsibility, etc.

 R1 [9 minutes ago]
 do it!

 R2 [8 minutes ago]
 RIGHT?!

 R1 [8 minutes ago]
 that’s a conversation i would love to be a part of

    #+END_QUOTE



*** Discussion on GDIMPLS Slack
    CAPTURE_DATE: [2017-03-06 Mon 16:17]
    TOPIC:    Y U No Hire Jr Devs?

    OP started off a discussion in the #general chat in
    GDIMpls.slack.com team.

    #+BEGIN_QUOTE
    OP [Today at 1:51 PM]
    question for everybody: have you ever worked at a place that “doesn’t hire jr devs”, spoken to a place/person that “doesn’t hire jr devs”, or do you personally not like jr devs (i won’t be hurt/offended)?

    R1 [1 hour ago]
    so, personally, you gotta know i love jr. devs, otherwise i wouldn&#39;t be trying to help make some :slightly_smiling_face:

    OP [1 hour ago]
    true true

    R1 [1 hour ago]
    but the &quot;we don&#39;t hire jr. devs&quot; is so fucking real

    R1 [1 hour ago]
    i have long convos with recruiters and companies about this alla time. The problem, and I think know it, is that when everyone is hiring sr. devs, that means no one is creating new sr. devs, and you have to hire jr. devs to make sr. devs

    R1 [1 hour ago]
    sorry, I think *everyone* knows it

    R1 [1 hour ago]
    (thinking too fast to type)

    R2 [1 hour ago]
    Yep not many people are willing to put the time in to make the senior devs they truly want by training jr devs.

    R1 [1 hour ago]
    and yet the complaint is that they can&#39;t afford to train jr. devs

    R1 [1 hour ago]
    the typical mindset for tech companies is that they don&#39;t have the time, can&#39;t take the risk, and so on, because they don&#39;t fundamentally understand what they&#39;re trying to make

    R2 [1 hour ago]
    Yep

    R1 [1 hour ago]
    there&#39;s a tremendous lack of mindfulness about developing software, in pretty much any form

    R1 [1 hour ago]
    a lot of this is historical, of course, but that really doesn&#39;t excuse the lack of introspection about what the software industry is

    OP [1 hour ago]
    this is great! I hadn’t thought about that.

    R1 [1 hour ago]
    this also ties into the latest very visible reports of misogyny, we&#39;ve seen, but cuts across all the -isms; where you do not see diversity happening, just talked about and much handwringing

    R1 [1 hour ago]
    you notice women, poc, pwd, etc., when they get someplace primarily because it is so fucking rare

    OP [1 hour ago]
    Diversity &amp; Inclusion -Buzzwords of 2016/17

    R1 [1 hour ago]
    sadly, just buzzwords

    OP [1 hour ago]
    EXACTLY

    R1 [1 hour ago]
    fill out your bingo card!


    R1 [1 hour ago]
    this is not new; i don&#39;t see it changing, i see it getting more lip service, and no real change

    R1 [1 hour ago]
    i don&#39;t think it&#39;s any better

    R1 [1 hour ago]
    and this pisses me off to no end

    R2 [1 hour ago]
    This really has my mind running now. Why arent more companies open to jr devs? Seriously, they have the skills to learn, they have the want, and they require less compensation, why not let them work on your smaller projects until they are your senior dev you want. (edited)

    R1 [1 hour ago]
    and even more, how i have been unable to make and change, and how i&#39;ve been totally complicite

    R1 [1 hour ago]
    i had a phone intreview this morning, and we talked about exactly that, R2

    R2 [45 minutes ago]
    Train the senior devs you want. Why is that so hard?!

    R1 [45 minutes ago]
    how this company *had* hired a bunch of jr. devs, but they had no direction, and no idea of what they should be doing

    R2 [44 minutes ago]
    Yeah thats the opposite problem

    R2 [44 minutes ago]
    they need a leader that wants to and is a good mentor too


    R1 [44 minutes ago]
    and so now they&#39;re looking at getting more sr. people to help with that

    R2 [44 minutes ago]
    Thats good

    R1 [44 minutes ago]
    it&#39;s just another huge example of mindlessness

    R2 [44 minutes ago]
    Yep

    R2 [44 minutes ago]
    Lack of proper planning

    R1 [43 minutes ago]
    what i would love to do, most of all, is help jr. devs become sr. devs


    R1 [43 minutes ago]
    the companies that do hire jr. devs, then proceed to never give them any guidance.

    OP [43 minutes ago]
    I’m interested in why you feel you’ve been complicit @R1

    R2 [42 minutes ago]
    Me too Tamara.

    R2 [42 minutes ago]
    I wish there was a sustainable way to do that. My only idea was winning the lottery so money wasnt a concern, hahaha.

    R1 [41 minutes ago]
    because i fall prey to the same thinking that everyone else does; we had this long convo this weekend at lunch about diversity as it relates to women in tech, and NOT ONCE did anyone, including myself, ever mention the intersectionalities

    R1 [41 minutes ago]
    not. once.

    R3 [41 minutes ago]
    &quot;the companies that do hire jr. devs, then proceed to never give them any guidance.&quot; &lt;-- this is super interesting. (i mean all of this is)

    R1 [40 minutes ago]
    my blue sky pipe dream is that we can open a coop / collective, that isn&#39;t a for profit, and people who participate also have to give back in time and resources

    R3 [40 minutes ago]
    I think that might be part of the hesitation for many. They may want to do it _right_ and convince themselves they don&#39;t have the bandwidth to take on an individual that will need guidance/mentoring/support.

    R1 [40 minutes ago]
    Do understand I am way overgeneralising that

    R2 [40 minutes ago]
    Agreed. I think that is a lot of it. It seems to overwhelming so they just avoid it.

    R3 [40 minutes ago]
    We did this at W______, _very_ intentionally this past year.

    R3 [40 minutes ago]
    Our goal was to hire a &quot;junior&quot; dev

    R1 [40 minutes ago]
    some place have done that, some places do do that

    R2 [39 minutes ago]
    Your pipe dream sounds great R1.

    R3 [38 minutes ago]
    Companies want to make money, and as we discussed at lunch this weekend, assembling and creating a safe place for a diverse team will always create a higher quality product.

    R1 [38 minutes ago]
    what i heard talking with LP last week and this, is an interesting model of organization. A team is 5 people, a lead dev, two jr or other devs, a product mgr, and a UI/UX &quot;specialist&quot; (their term, could be a dev, dunno for sure yet)

    R3 [38 minutes ago]
    I wonder if people don&#39;t actualy believe that, or if they just don&#39;t know how to get there

    R1 [38 minutes ago]
    it&#39;s an interesting model

    R1 [38 minutes ago]
    i think the latter, R3

    R1 [37 minutes ago]
    don&#39;t know, don&#39;t know how to find out, and that&#39;s a huge risk to take

    R3 [37 minutes ago]
    Mhm

    R2 [37 minutes ago]
    That is the perfect team mix, R1, in my mind.

    R1 [37 minutes ago]
    mine to; i hope it&#39;s not just words

    R1 [37 minutes ago]
    i&#39;ve pretty much decided i&#39;ll take their offer if they make one

    R1 [37 minutes ago]
    pls don&#39;t tell

    R2 [36 minutes ago]
    Oh thats super great. So would you be one of those senior devs helping mentor the jr&#39;s?

    R1 [36 minutes ago]
    yeah

    R2 [36 minutes ago]
    My boss mentioned getting a junior &quot;me&quot; (my role, not me specifically) and I was so excited. Mentoring is one of my fave things to do.

    R1 [36 minutes ago]
    i mean, we were all speaking the same language, right? so now all my red flags are flying....

    OP [36 minutes ago]
    this is all really good stuff. And I know that the 3 of you (and more) do want to create that space for those like myself. It’s just really disheartening to be told because I’m a jr dev, I can’t add value

    R1 [35 minutes ago]
    AND THAT IS SO WRONG

    R1 [35 minutes ago]
    IT IS A LIE

    OP [35 minutes ago]
    I KNOW!

    R1 [35 minutes ago]
    spoken by people who are not adding value

    R2 [35 minutes ago]
    That is so horrible. You are amazing and I know you will not let it get you down, but make sure that you do not take that to heart or find it discouraging. (edited)

    OP [35 minutes ago]
    I want to learn the way a company codes, their standards, structure, i want to fix all the little things nobody else does, I want to build shit.


    R2 [34 minutes ago]
    You can add TONS of value.

    OP [34 minutes ago]
    Thank you.

    OP [34 minutes ago]
    It just adds more fuel to an already huge fire

    R2 [34 minutes ago]
    :fire:

    R1 [34 minutes ago]
    i&#39;m not really joking when i say &quot;burn it all down&quot;

    R2 [33 minutes ago]
    You are a strong person, it makes me sad for the people that are less like you. (edited)

    R2 [33 minutes ago]
    The ones that wont have that fight in them and will give up and move on.


    R1 [33 minutes ago]
    but this is also back to relying superheroism to make things better


    OP [32 minutes ago]
    right. That’s another reason why I want to do this at Minnebar

    OP [32 minutes ago]
    because I know that there are so many people that just won’t say anything

    R1 [31 minutes ago]
    you mean have this conversation at Minnebar?

    OP [30 minutes ago]
    yeah, i’m writing up a session called “So you don’t hire Jr Devs? Tell me more.&quot;


    R1 [29 minutes ago]
    oh fuck yeah

    OP [29 minutes ago]
    to speak as a jr dev, how jr devs feel in the market, what can other devs do to support and advocate and our importance

    OP [29 minutes ago]
    and then Lanice and I are also writing up one on Diversity &amp; Inclusion

    R1 [28 minutes ago]
    without jr devs there is no future software business


    R2 [28 minutes ago]
    OMG I am sad, I will miss that.

    R2 [28 minutes ago]
    I will be speaking at WordCamp in San Diego.

    R2 [28 minutes ago]
    Please definitely do that - the world needs to hear it.

    OP [27 minutes ago]
    I am sad you’re missing it too!!

    R1 [26 minutes ago]
    tickets are all gone

    R1 [25 minutes ago]
    also, i hate super large people events

    R1 [24 minutes ago]
    so that&#39;s an example of me being complicit

    R1 [23 minutes ago]
    so, like, what i should say instead, is there anything i can help with?

    R3 [23 minutes ago]
    ^^^^^^^^^^^

    R3 [23 minutes ago]
    that

    R3 [23 minutes ago]
    haha

    R3 [22 minutes ago]
    ditto

    R1 [21 minutes ago]
    &quot;The master&#39;s tools will never dismantle the master&#39;s house&quot; so we make our own tools

    R4 [18 minutes ago]
    This thread just got me really emotional. Thanks to everyone who&#39;s been sharing thoughts and perspectives. As a current junior dev who struggled to find a job and heard from companies that they don&#39;t hire jr, it got really challenging.


    R1 [17 minutes ago]
    This topic is hugely emotional for me as well, cari.tan, it goes into a lot of other things for me as well.

    R1 [16 minutes ago]
    primarily, i think our failing as sr. devs, mgrs, and so on, i.e., the people that *could* change things, is we just do not become or stay mindful

    R4 [16 minutes ago]
    One of the things that I kept thinking about was how if you hire junior devs, then they are coming in and learning your systems, your procedures and it might in someways be easier to integrate into the company processes because they are not bringing in past habits, which might be good and bad.


    R1 [15 minutes ago]
    EXACTLY!! and you&#39;ll have more effective devs than if you wait for the perfect sr. dev to show up

    R1 [14 minutes ago]
    AND! those jr. devs need guidance, attention, (care &amp; feeding?)


    R4 [14 minutes ago]
    I&#39;m currently on a team that doesn&#39;t have any real support for me because I&#39;m the only one working in the area that I work in and I have to go outside of my team when I&#39;m stuck, which can be challenging because of the schedules and workloads of their teams. It gets really hard sometimes.

    R1 [13 minutes ago]
    does you management listen to such issues well?

    R1 [12 minutes ago]
    (i was trying to figure out a way to ask in such a way as to not make any assumptions, but i don&#39;t think i can)

    R4 [12 minutes ago]
    Not really. I&#39;m on contract, which adds some complications. It

    R1 [11 minutes ago]
    certainly

    R1 [10 minutes ago]
    this is another place i have a huge advantage as a sr. dev, even, or especially, on contract, i don&#39;t usually have any hesitations in telling management their organization / communication / processes are not working well

    R4 [10 minutes ago]
    It&#39;s largely due to a restructuring that happened right after I started. I was hired onto a team of six people who all worked on the same parts of the website and then about 3 weeks later we were split across three new teams. I was the only one from the original team that ended up on mine. They are aware, but there&#39;s no real motivation for them to do much about it (add or shift resources, etc).

    R1 [9 minutes ago]
    but it&#39;s not something that a jr. can do with credibility :disappointed:

    R4 [8 minutes ago]
    Yeah, exactly.

    R1 [8 minutes ago]
    start looking for your next contract, maybe


    OP [8 minutes ago]
    i agree.

    R1 [7 minutes ago]
    because, holy cow, fixing their shit is not on you

    R1 [6 minutes ago]
    of course, the other side is get the learning you can out of the current situation

    R1 [5 minutes ago]
    idk, folks, this whole system is not going to solved by waiting for companies to wake up

    R4 [4 minutes ago]
    I have started looking for the next thing. I&#39;ve learned quite a bit, but am definitely ready for something different with more support.

    R1 [4 minutes ago]
    and as much fun as it would be for me to train jr. devs into sr. devs, i also don&#39;t want to just create a chain of cannon fodder

    R1 [3 minutes ago]
    cari.tan : awesome!!

    R4 [3 minutes ago]
    Thanks @OP for starting this conversation. It needs to be talked about and revisited often.

    R1 [3 minutes ago]
    :+1:

    R1 [2 minutes ago]
    i sure want to hear from you all on this

    R1 [2 minutes ago]
    and i am quite serious about the offers of help


    OP [1 minute ago]
    Thank you ALL for contributing. I am glad to know that sr/mid/lead devs care about this

    R4 [1 minute ago]
    Thanks @R1, @R3 and @R2 for being in leadership and senior roles and sharing your perspective and helping to work on this issue!
    #+END_QUOTE

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/code-review-notes.org</id>
      <updated>2020-05-23T16:31:19-05:00</updated>
      <title>Introduction</title>
      <content>#+TITLE: Notes on conduction guided code reviews

* Introduction

During the course of react web client development, it&#39;s become clear that using our standard method of a team mate reading through a github PR would not work, since the amount of code and files is enormous, contradicting any best practice about doing code reviews. Instead, we&#39;re going to conduct guided code reviews, a practice where we meet as a team to walk through the significant aspects of the code change, to help the other team members understand what is happening and be able to make better contributions to the review.

** Research

*** [[https://www.ibm.com/developerworks/rational/library/11-proven-practices-for-peer-review/index.html][11 Proven Practices for more effective, efficient peer code reviews (IBM Developer)]]

Summary:

1. Review fewer than 200–400 lines of code at a time
2. Aim for an inspection rate of fewer than 300–500 LOC per hour
3. Take enough time for a proper, slow review, but not more than 60–90 minutes
4. Be sure that authors annotate source code before the review begins
5. Establish quantifiable goals for code review, and capture metrics so you can improve your processes
6. Use checklists, because they substantially improve results for both authors and reviewers
7. Verify that the defects are actually fixed
8. Foster a good code review culture in which finding defects is viewed positively
9. Beware of the Big Brother effect
10. Review at least part of the code, even if you can&#39;t do all of it, to benefit from The Ego Effect
11. Adopt lightweight, tool-assisted code reviews


*** [[https://en.wikipedia.org/wiki/Software_walkthrough][Software Walkthroughs (Wikipedia)]]

- [[https://ieeexplore.ieee.org/document/4601584][1028-2008 - IEEE Standard for Software Reviews and Audits]]
- [[http://pesona.mmu.edu.my/~wruslan/SE2/Readings/detail/Reading-6.pdf][IEEE Std 1028-1999 Standard for Software Reviews]] (PDF)


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
