<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2020-04-07T09:14:55-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/04/2020-04-07-yil-rails-validators-dont-change-type.md</id>
      <updated>2020-04-07T09:14:55-05:00</updated>
      <title>2020-04-07-yil-rails-validators-dont-change-type</title>
      <content>---
title: &quot;YIL: Rails validators don&#39;t change parameter type&quot;
date: 2020-04-07T09:04
category: rails 
tags: [validation, type, params]
---

So I figured this out a while ago, but seems that I forgot to write it down, hence &quot;YIL&quot; - Yesterday I Learned.

I was working with a numeric parameter in Rails, that needed to be a non-negative interger, less than a maximum level. A pretty simple validator :

``` ruby
validates_numericality_of :age,
                          :only_integer,
                          greater_than_or_equal_to: 0,
                          less_than_or_equal_to: MAX_AGE
```

The validators work with `age` regardless of whether it&#39;s a number or string; coming in via a parameter from the controller, it will be a string. In a Rails model, this isn&#39;t much of an issue since the variable gets converted to whatever is the right type when the record is persisted.

The case I was working with wasn&#39;t an ActiveRecord however, but just an ActiveModel service object.

In order to fix this for the object model, I used an `after_validation` callback to transform the variable:

``` ruby
def recast_attributes

  age = age.to_i

end
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/04/2020-04-01-building-rails-compatible-query-strings-in-javascript.md</id>
      <updated>2020-04-01T14:19:22-05:00</updated>
      <title>2020-04-01-building-rails-compatible-query-strings-in-javascript</title>
      <content>---
layout: post
title: &quot;Building Rails-compatible Query Strings in JavaScript&quot;
date: 2020-04-01T13:57
categories: [javascript]
tags: [query-string, javascript, functions, missing-libraries, rails]
---

The [MDN](https://developer.mozilla.org/en-US/ &quot;Mozilla Development Network&quot;) defines the [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams &quot;The URLSearchParams interface defines utility methods to work with the query string of a URL&quot;) to help build query strings based on objects.

What it *doesn&#39;t* do, however, is build a Rails-compatible query string from a nested object, i.e., an object with properties that other objects, i.e. Object, Array, etc. This won&#39;t do anything if the parent object has a function property, but it&#39;s a pretty good implementation.

I don&#39;t even remember where this comes from, I&#39;ve written it for so many different projects I just copy it from the last one.

The problem is that when given a params object like:

``` javascript
let params = {
    a: 27,
    b: &quot;forty-two&quot;,
    c: [1, 2, 3, 5],
    d: { id: 2887, name: &quot;Gillian&quot; }
}
```

Passing this into URLSearchParams doesn&#39;t give a query string that Rails finds useful in parsing parameters up in the controller:

``` javascript
let qa = new URLSearchParams(params).toString()
```

yields: `a=27&amp;b=forty-two&amp;c=1,2,3,5&amp;d=d=%5Bobject+Object%5D` which is *really* no good to Rails (doubt it would be good for express either, but that&#39;s not what this one&#39;s about).

So we need something a bit more on point:

``` javascript
function serializeObjectToRailsQueryString(params, prefix) {
  const query = Object.keys(params).map(key =&gt; {
     const value = params[key]

     if (params.constructor === Array) key = `${prefix}[]`
     else if (params.constructor === Object)
       key = prefix ? `${prefix}[${key}]` : key

     if (typeof value === &quot;object&quot;)
       return serializeObjectToQueryString(value, key)
     else return `${key}=${encodeURIComponent(value)}`
   })

   return [].concat.apply([], query).join(&quot;&amp;&quot;)
}
```

Passing that same params object above, yields the following:

``` javascript
&quot;a=27&amp;b=forty-two&amp;c[]=1&amp;c[]=2&amp;c[]=3&amp;c[]=5&amp;d[id]=2887&amp;d[name]=Gillian&quot;
```

When the controller `params` method is called, it yields a AC::Parameters object of:

``` ruby

{
  a: 27,
  b: &quot;forty-two&quot;,
  c: [1, 2, 3, 5],
  d: { id: 2887, name: &quot;Gillian&quot;}
}

```

just as we&#39;d expect.

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-21-setting-git-default-editor.md</id>
      <updated>2020-03-23T12:16:32-05:00</updated>
      <title>2020-03-21-setting-git-default-editor</title>
      <content>---
title: &quot;Setting git&#39;s default editor&quot;
date: 2020-03-21
category: tools
keywords: git, editor, emacs
---


# Setting git&#39;s default editor #

By default, when git needs to fire up an editor to do something such as write a commmit message, it uses whatever is configured as the default editor for the user. (Configuring the user&#39;s default editor is an entirely differnt topic.)

There are a couple of ways to change this for `git`:

1. setting one or two environment variables
2. modifying the global git configuration

Of these, I long used the first way, since the environment variables are also recognized by other command line tools (although not all).

Recently I was made aware of method two, modifying the global git configuration.



## Settingh environment variables ##


Git will use two common environment variables, `EDITOR` and `VISUAL`, to determine what editor it should run. Some tools make a distinction between when these are used:

- `EDITOR` is used generally in an environments where there may or may not be a terminal available.
- `VISUAL` is used specifically when there is a terminal available.

Git doesn&#39;t really care, you can set one or the other. In the course of my career, I settled on the expediency of setting them both to the same thing and calling it a day.

## Modifying git global config ##

Head over to &lt;https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&gt; to see the official documentation on modifying the config.

The specific part to set the editor is described here:

&gt; **core.editor**
&gt;
&gt; By default, Git uses whatever you’ve set as your default text editor via one of the shell environment variables VISUAL or EDITOR, or else falls back to the vi editor to create and edit your commit and tag messages. To change that default to something else, you can use the core.editor setting:
&gt;
&gt;     $ git config --global core.editor emacs
&gt;
&gt; Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages.

They are already speaking my kind of language. But I want to go just a bit further and use `emacsclient` so as to not call up another instance of the full emacs editor if I can help it. Instead, I set the core.editor value to:

    emacsclient -a emacs

which will run emacsclient to use the currently running instance of emacs, *and*, if there is no currently running instance, start one up.

### A caveat ###

I initially used the command line arguments I normally run emacsclient with: `-c -n`, which say to open a new frame and not to wait for the editing session to finish. Bad move. If the git command is not forced to wait while I modify the commit message, it assumes it wasn&#39;t changed and aborts the commit. I also didn&#39;t want to have it be spawning new frames since that just gets messy if I forget to close them, which I most often do.

### I hear you, you don&#39;t use emacs ###

You aren&#39;t a dinosaur like I am, I got you.

You can run VSCode from the command line, or Atom, etc., etc., etc..  I&#39;m not going to teach you how to set that up, *but you should learn how if you don&#39;t because it will speed up your work.*

Here are some of the alternative:

- VSCode: `git config -global core.editor &quot;code -w&quot;`
- Atom: `git config --global core.editor &quot;atom -w&quot;`
- Vim: `git config --global core.editor vim`

## Git-mode in Editors ##

Most modern-day editors have a means of running git commands from inside the editor. This is often a far richer environment, closer to a GUI tool, really, than the command line offers. I use `magit` in emacs all the time, but I also use the command line all the time; some operations are better for one than the other. (By the way, `magit` has seriously the very best implementation for doing an interactive rebase, i.e., squashing your commits.)



</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-23-books-on-software-estimating.md</id>
      <updated>2020-03-23T10:23:17-05:00</updated>
      <title>2020-03-23-books-on-software-estimating</title>
      <content>---
title: &quot;Books and Resources on Software Estimating&quot;
date: 2020-03-23T10:15
category: books
tags: [estimating, management]
---

Someone was asking for some youtube / vimeos on software engineering. I don&#39;t have any. I learned this back in that dark ages.

My first thought was to head to [The Pragmatic Programmer](https://pragprog.com/book/tpp20/the-pragmatic-programmer-20th-anniversary-edition), and sure enough there is a section on estimating.

Next thought was look at [Code Complete](https://en.wikipedia.org/wiki/Code_Complete), which also has an even more detailed look at estimating. The is also a section on **Additional Resources on Software Estimation**:

&gt; Here are some additional references about software estimation:
&gt; Boehm, Barry, et al. Software Cost Estimation with Cocomo II. Boston, MA: Addison-Wesley, 2000. This book describes the ins and outs of the Cocomo II estimating model, which is undoubtedly the most popular model in use today.
&gt; Boehm, Barry W. Software Engineering Economics. Englewood Cliffs, NJ: Prentice Hall, 1981. This older book contains an exhaustive treatment of software-project estimation considered more generally than in Boehm&#39;s newer book.
&gt; Humphrey, Watts S. A Discipline for Software Engineering. Reading, MA: Addison-Wesley, 1995. Chapter 5 of this book describes Humphrey&#39;s Probe method, which is a technique for estimating work at the individual developer level.
&gt; Conte, S. D., H. E. Dunsmore, and V. Y. Shen. Software Engineering Metrics and Models. Menlo Park, CA: Benjamin/Cummings, 1986. Chapter 6 contains a good survey of estimation techniques, including a history of estimation, statistical models, theoretically based models, and composite models. The book also demonstrates the use of each estimation technique on a database of projects and compares the estimates to the projects&#39; actual lengths.
&gt; Gilb, Tom. Principles of Software Engineering Management. Wokingham, England: Addison-Wesley, 1988. The title[…]”

*(Excerpt From: Steve McConnell. “Code Complete, Second Edition.” Apple Books. )*

These are old as the hills, being contemporary with my learning the craft. I met most of them, and spent time with Boehm, Humphrey, and Gilb while I was working with Hewlett-Packard.

For modern software estimating, especially in the world of web applications, Gilb is probably still the most germain.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/gatsby-categories-and-tags.md</id>
      <updated>2020-03-23T05:19:55-05:00</updated>
      <title>gatsby-categories-and-tags</title>
      <content>---
title: &quot;Gatsby Categories and Tags&quot;
date: 2020-02-01
---

## Categories and Tags in Gatsby ##

I&#39;ve been re-writing my on-line recipe collection using Gatsby as an exercise. In the original Jekyll site, I had recipes organized into categories like chapters in a printed cookbook, and tags that allowed more fine-detailed structure, listing such things as ingredients, cuising type, and other things like being gluten-free. Both categories and tags were stored as entries in the frontmatter of each recipe in the collection.

To make that work, I needed to write a Jekyll plug-in to generate the category and tag pages. And to make it work in Gatsby, I needed to write something in `gatsby-node.js`

### Categories as Subdirectories

Instead of putting the category in the frontmatter, I decided to organize the recipe markdown into subdirectories under the `recipes/` content directory.

#### A hook for categories

To pull out the categories, I created a custom hook `useCategories` to run a static query and return the collection of category names:

```javascript
import { graphql, useStaticQuery } from &quot;gatsby&quot;
export const useRecipeCategories = () =&gt; {
  const { allDirectory } = useStaticQuery(
    graphql`
      query RECIPE_CATEGORIES {
        allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
          nodes {
            relativePath
          }
        }
      }
    `
  )
  return allDirectory.nodes.map(category =&gt; category.relativePath)
}
```

Putting that query into the GraphiQL IDE, the response is:

```text
{
  &quot;data&quot;: {
    &quot;allDirectory&quot;: {
      &quot;nodes&quot;: [
        {
          &quot;relativePath&quot;: &quot;baked-goods&quot;
        },
        {
          &quot;relativePath&quot;: &quot;desserts&quot;
        },
        {
          &quot;relativePath&quot;: &quot;breakfast&quot;
        },
        {
          &quot;relativePath&quot;: &quot;drinks&quot;
        },
        {
          &quot;relativePath&quot;: &quot;main-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;kitchen-tips&quot;
        },
        {
          &quot;relativePath&quot;: &quot;appetizers&quot;
        },
        {
          &quot;relativePath&quot;: &quot;pizza&quot;
        },
        {
          &quot;relativePath&quot;: &quot;salads&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sandwiches&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sauces&quot;
        },
        {
          &quot;relativePath&quot;: &quot;side-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;soups&quot;
        }
      ]
    }
  }
}
```

That gives me a nice, reusable list of categories anywhere in the site.

#### Generating the Table of Contents

The `CategoriesMenu` component creates a list of the categories with links to each category page:

```javascript
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import { useRecipeCategories } from &quot;../hooks/useCategories.js&quot;

export default () =&gt; {
  const categories = useRecipeCategories()

  return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
}

```

\(I&#39;m still in the midst of generating a style for the site, so eventually the `ul` and `li` will get replaced with some styled components. That&#39;s not important for this discussion.\)

The `Link` to each category page expects them to be a page at the root of the route. These pages are not in the repo itself, and must be generated. The code to generate the category page is in `gatsby-node.js` :

```javascript
const { createFilePath } = require(`gatsby-source-filesystem`)
const path = require(`path`)

exports.createPages = ({ actions, graphql }) =&gt; {
  // ...
  const categoryTemplate = path.resolve(&quot;./src/templates/categoryTemplate.js&quot;)

  return graphql(`
    {
      # .. other queries
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }
  `).then(result =&gt; {

    // ... stuff for mdx pages

    const categories = result.data.allDirectory.nodes
    categories.forEach(category =&gt; {
      createPage({
        path: &quot;/&quot; + category.relativePath + &quot;/&quot;,
        component: categoryTemplate,
        context: {
          category: category.relativePath,
        },
      })
    })
    
    // ... more stuff
  })
}

```

The partial graphql query returns the relative paths from the recipes area, which is the same as we do in the `useCategories` hook; there ought to be a way to reuse that, but here it&#39;s part of a larger query \(redacted from the example\). Looping through the categories, I&#39;m running `createPage` on each node \(i.e. category\) and building a page using a template, quite like one does for making Markdown/MDX pages. The context contains the category &quot;slug&quot;, which is created below.

The categories need to be made into nodes:

```javascript
exports.onCreateNode = ({ node, actions, getNode }) =&gt; {
  const { createNodeField } = actions
  if (node.internal.type === `Mdx`) {
    const value = createFilePath({ node, getNode })
    // .. other nodes
    createNodeField({
      name: `recipeCategory`,
      node,
      value: value.split(&quot;/&quot;)[1],
    })
  }
}
```

This is pretty similar again to how you make slugs for Markdown/MDX psges. The `value` comes from file path created in line 4, and it looks like `/:relativePath/:recipeFilename/`. Since what we&#39;re looking for is the recipe category, that is the `:relativePath` in the string above. Splitting on the divider gives a `null` first value in the array, and `:relativePath` in the second slot, so the index is 1 to pull it out. There&#39;s probably better ways to do this, but this works.

### Tag pages

Tag pages are also created in `gatsby-node.js` but the way tags are collected to start with is very different from categories. Categories are determined by placement in a subdirectory, but tags are declared in the frontmatter of the recipe MDX file.

\(One _could_ do the same thing with categories, using a field in the frontmatter, but after working with that form in the Jekyll version for years, I&#39;ve decided doing them as subdirectories made more sense to me.\)

Going back to the `gatsby-node.js` file, the full query looks like this:

```graphql
    {
      allMdx {
        nodes {
          fields {
            slug
          }
          frontmatter {
            title
            tags
          }
          fileAbsolutePath
        }
      }
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }

```

In this case, we need to collect the _unique_ tags from every recipe file, so while we are shooting the list building the recipe pages, we&#39;ll also collect the tags into a Set:

```graphql
    const recipes = result.data.allMdx.nodes
    let tags = new Set()

    // create page for each mdx file
    recipes.forEach(recipe =&gt; {
      createPage(/* .. for each recipe page .. */)

      if (recipe &amp;&amp; recipe.frontmatter &amp;&amp; recipe.frontmatter.tags) {
        recipe.frontmatter.tags.map(tag =&gt; {
          tags.add(tag)
        })
      }
    })
```

If there are a collection of tags in the recipe file, this adds them to the `tags` Set, which ensures only unique tags are collected.

Further down, we need to create the tag _pages_ :

```javascript
    tags.forEach(tag =&gt; {
      createPage({
        path: `/tags/${tag}/`,
        component: tagTemplate,
        context: {
          tag,
        },
      })
    })
```

### Putting Categories and Tags to use

#### The Category Menu in the Sidebar

I decided for this design iteration to put the categories into a sidebar arrangement \(I still haven&#39;t done any styling on this\). Recall the code up at **Generating the table of contents**: 

```jsx
return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
```

which generates a link to each category page. This is mounted in the Sidebar.

#### Tag links in each recipe display

Tags are a little different at this point: they are only listed in each individual recipe page, using the `TagList` component:

```jsx
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import styled from &quot;styled-components&quot;

export default ({ tags }) =&gt; {
  if (!tags || tags.length &lt; 1) {
    return null
  }
  return (
    &lt;TagListWrapper&gt;
      {tags.map((tag, index) =&gt; {
        return (
          &lt;TagListItem key={`tag-item-${index}`}&gt;
            &lt;Link to={`/tags/${tag}/`}&gt;{tag}&lt;/Link&gt;
          &lt;/TagListItem&gt;
        )
      })}
    &lt;/TagListWrapper&gt;
  )
}

const TagListWrapper = styled.ul`
  display: inline;
  list-style: none;
`
const TagListItem = styled.li`
  display: inline-block;
  &amp;:after {
    content: &quot;, &quot;;
    padding-right: 0.5em;
  }
  &amp;:last-child:after {
    content: &quot;&quot;;
  }
`
```

\(Yay, some styling\)

Eventually, I&#39;m going to want a tag cloud of some sort, too.

That&#39;s basically it. It took a minute for me to go from looking at how the Markdown / MDX in every gatsby tutorial worked, and had to work out how to generate the pages from other data queries. This seems pretty simple, but seems to be lacking from the tutorials.

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-10-using-rails-url-helpers-outside-a-controller.md</id>
      <updated>2020-03-23T05:16:14-05:00</updated>
      <title>2020-03-10-using-rails-url-helpers-outside-a-controller</title>
      <content>---
title: &quot;Using Rails url_helpers outside a controller context&quot;
date: 2020-03-10T20:38
categories: [rails]
tags: [rails, helpers, url_helpers]
---

Sometimes I want to use a Rails url helper method outside the controller context.

Link: [Explanation on StackOverflow](https://stackoverflow.com/a/5456103 &quot;good examples for doing this&quot;)

In essence:

``` ruby
Rails.application.routes.url_helpers.new_post_path
```


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-23-honouring-colour-scheme-in-css.md</id>
      <updated>2020-03-23T05:16:14-05:00</updated>
      <title>2020-03-23-honouring-colour-scheme-in-css</title>
      <content>---
title: &quot;Honouring the user&#39;s preferred colour scheme in CSS&quot;
date: 2020-03-23T03:32
category: css
tags: [colour-scheme, dark-mode, light-mode]
---

How do I honour the user&#39;s chosen preferred colour scheme in the CSS I&#39;m writing? Recently MacOS introduced dark mode in Mojave, and further added a shifting light and dark mode to match the time of day in Catalina. I&#39;d like my sites, but more importantly, my React apps to follow this.


## Background ##

The W3C has defined a media query, `prefers-color-scheme` ([Defined in Media Queries Level 5 Draft, March 2020](https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme &quot;Still a draft&quot;)). It has [some implementations](https://caniuse.com/#search=prefers-color-scheme) already. At least it&#39;s on the majors, so it&#39;s probably okay to use.

## Media query ##

The check to see what colour scheme the user has set is done with a media query:

``` css
@media screen and (prefers-color-scheme: light) {
  /* settings for light scheme */
}
@media screen and (prefers-color-scheme: dark) {
  /* settings for dark scheme */
}
```

So this is clearly possible in regular CSS.

## Using in styled-components ##

Since I most often code in React, and most often use `styled-components` library to implement CSS-in-JS, I need a way that this will work. Turns out it&#39;s not so bad, using SC&#39;s `ThemeProvider`.

In your theme file, set up the various colours, with a group for light mode and another group for dark mode:

``` rjsx
const colors = {
    light: {
        primaryText: &quot;#333&quot;,
        primaryBg: &quot;#FFF&quot;,
        // and so on
    },
    dark: {
        primaryText: &quot;#F2F2F2&quot;,
        primaryBg: &quot;#000&quot;,
        // and so on
    },
    common: {
        // colors that work for both
    }
};

export default {
    colors
};

```

Where I wrap react components with the SC ThemeProvider, I can import and provide the theme as usual:

``` rjsx
import React from &quot;react&quot;;
import { ThemeProvider} from &#39;styled-components&#39;;
import theme from &quot;../../theme&quot;;

function App({ children }) {
    return (
        &lt;ThemeProvider theme={theme} &gt;
          {children}
        &lt;/ThemeProvider&gt;
    );
}

export default App;
```

Then later, in the styled compeonent, this happens:

``` rjsx

import styled from &#39;styled-components&#39;;

export const SomeSection = styled.section`
  color: ${props =&gt; props.theme.colors.light.primaryText};
  backgound-color: ${props =&gt; props.theme.colors.light.primaryBg};

  @media screen and (prefers-color-scheme: light) {
    color: ${props =&gt; props.theme.colors.light.primaryText};
    backgound-color: ${props =&gt; props.theme.colors.light.primaryBg};
  }
  @media screen and (prefers-color-scheme: dark) {
    color: ${props =&gt; props.theme.colors.dark.primaryText};
    backgound-color: ${props =&gt; props.theme.colors.dark.primaryBg};
  }
`
```
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number.md</id>
      <updated>2020-03-23T05:16:14-05:00</updated>
      <title>2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number</title>
      <content>---
title: &quot;How To: Preface your git commit messages with the Jira ticket number&quot;
date: 2020-02-10T08:57:37-0600
categories: [&quot;git&quot;]
tags: [git-follies, commit-message, jira, how-to]
published: true
---

This is something you can build into your project&#39;s git hooks, that will preface your commit messages with the Jira ticket number based on the branch name.

[WIP]

We want something that will pull the tracking ticket number from the branch, like so:

| branch name                     | message prefix |
|:-------------------------------:|:--------------:|
| `kick-1234-this-cool-feature`   | `[KICK-1234]`  |
| `bug/KICK-789-woops`            | `[KICK-789]`   |
| `feature/kick_2100_the_precept` | `[KICK-2100]`  |
| `777_sunset_life`               | `[777]`        |
|                                 |                |

Create a hook for `.git/hooks/prepare-commit-msg` with the following script:

``` shell
# Current branch name: &quot;KICK-3586_revert_nullable_custom_field_creation&quot;
$ git rev-parse --abbrev-ref HEAD | ruby -ne &#39;ticket = %r{^(?&lt;proj&gt;\w+)[-_ ](?&lt;num&gt;\d+)}.match($_).named_captures; puts &quot;[#{ticket[&quot;proj&quot;].upcase}-#{ticket[&quot;num&quot;]}]&quot; &#39;
# =&gt; [KICK-3586]

```

Make sure the hook is executable.


When you make a commit, git will execute `.git/hooks/prepare-commit-msg .git/COMMIT_MESSAGE`

Adding the hook to a code repo.




Inspiration: https://medium.com/better-programming/how-to-automatically-add-the-ticket-number-in-git-commit-message-bda5426ded05
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/in-rails-prefer-use_zone-to-zone.md</id>
      <updated>2020-03-23T05:16:14-05:00</updated>
      <title>in-rails-prefer-use_zone-to-zone</title>
      <content>---
title: &quot;Prefer Time.use_zone to Time.zone in Rails&quot;
date: 2020-01-19
categories: [rails]
tags: [timezones]
---

&gt; Rails better practice for dealing with altering the current process&#39;s timezone

# In Rails, Prefer \`.use\_zone\` to \`.zone=\`

I had thought to write a post on this, but never got around to it.

[Prathamesh Sonpatki](https://prathamesh.tech/) [beat me to it :\)](https://prathamesh.tech/2019/07/11/use-time-use_zone-to-navigate-timezone/)

Essentially, this is the practice I use:

```text
Time.use_zone(current_user.timezone) do 
  # Do Time and DateTime operations under the auspices of the
  # current user&#39;s timezone setting.
  
  Time.current # The current time in the current user&#39;s timezone
  Time.zone.now # Equivalent to the above
end
```

It&#39;s better than just supposing that `Time.zone` has been set somewhere in the current process, **or** that `Time.zone` has been set to what the code in the block _expects it to be!_

## In Testing ##

The biggest source of error that I&#39;ve encountered for this isn&#39;t in requests, but actually in the spec test cases for the product. Some test cases blythely set `Time.zone` in a before action, but never reset it in an after action.

If possible, wrap the time zone use inside an `around` action:

```text
around(:each) do |example|
  Time.use_zone(some_timezone) do
    yield example
  end
end
```

### With [Timecop](https://github.com/travisjeffery/timecop) ###

Since Timecop is essentially mocking the system clock, you can use it with `.use_zone` with impunity.

```text
around do |example|
  Timecop.freeze do
    @account = Fabricate(:account)
    Time.use_zone(account.timezone) do
      yield example
    end
  end
end
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/08/2019-08-29-testing-react-checkbox-component.org</id>
      <updated>2020-03-23T05:16:14-05:00</updated>
      <title>Testing React Checkbox Component</title>
      <content>
*WARNING: This is old and likely obsolete.*

* Testing React Checkbox Component

published date: [2019-08-29 Thu]

keywords: react, testing, checkbox, querySelector, rerender, queryByTestId, testing-library

Recently, I built a partial form section that included a couple of checkboxes, and I wanted to verify their operation with a unit test.

I&#39;m using [[https://testing-library.com/docs/intro][testing-library]], including the react-specific methods. I&#39;m finding this a godsend in making tests easier to write and understand.

Testing and debugging react components is still fraught with uncertainty for me, I&#39;m still learning and fumbling my way around. Hooks have made writing components much easier, without a doubt, yet there are still times I just don&#39;t know what&#39;s happening.

In this particular episode, your intrepid frontend dev (me) had to find out three things about the form segment:

1. a lookup (autosuggest) field was completely hidden until a partcular checkbox was set.
2. another checkbox was disabled until another field had data in it.
3. a specific row of the form would appear only when another value was true.

For our purposes here, only 1 and 2 are of interest.

** Displaying a field form when a checkbox is setfield

For this form row, the code under test looks like this:

#+BEGIN_SRC rjsx
  const ServiceLocation = ({ name, value, initialValue, onSelectParent }) =&gt; {
    const [serviceArea, setServiceArea] = useState(!!value)
    const toggleCheckbox = () =&gt; {
      setServiceArea(!serviceArea)
    }
    return (
      &lt;FormField name={name}&gt;
        &lt;FormFieldSubRow&gt;
          &lt;Checkbox
            value={serviceArea}
            onChange={toggleCheckbox}
            data-testid=&quot;service-area-checkbox&quot;
          &gt;
            {&quot; &quot;}
            {I18n.t(&quot;service_location.label&quot;, { scope: i18nScope })}
          &lt;/Checkbox&gt;{&quot; &quot;}
          {serviceArea ? (
            &lt;CustomerLookupWrapper data-testid=&quot;customer-lookup-wrapper&quot;&gt;
              &lt;CustomerLookup
                name={name}
                initialValue={initialValue}
                placeholder=&quot;Parent&quot;
                onSelect={onSelectParent}
              /&gt;
            &lt;/CustomerLookupWrapper&gt;
          ) : null}
        &lt;/FormFieldSubRow&gt;
      &lt;/FormField&gt;
    )
  }
#+END_SRC

Placing the ~data-testid~ &quot;service-area-checkbox&quot; on the ~Checkbox~ component gives the test a way of finding the DOM element it needs to work with. The &quot;customer-lookup-wrapper&quot; `data-testid` will be used to determine if the second element shows up when the that checkbox is clicked.

The spec for this looks like:

#+BEGIN_SRC rjsx
    it(&quot;displays the parent lookup field when the service location checkbox becomes checked&quot;, async () =&gt; {
      const LOOKUP_WRAPPER_TESTID = &quot;customer-lookup-wrapper&quot;
      const props = {
        fields: {},
        parent: {},
        handleChange: jest.fn(),
        onDuplicateCustomerName: jest.fn(),
        onSelectParent: jest.fn()
      }

      const { queryByTestId, getByTestId, rerender } = render(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} /&gt;
        &lt;/Providers&gt;
      )

      const serviceAreaCheckbox = getByTestId(&quot;service-area-checkbox&quot;)
      const checkBoxActual = serviceAreaCheckbox.querySelector(
        &quot;input[type=checkbox]&quot;
      )

      /* PRECONDITIONS */
      expect(queryByTestId(LOOKUP_WRAPPER_TESTID)).not.toBeInTheDocument()
      expect(checkBoxActual.checked).toEqual(false)

      /* ACTION */
      fireEvent.click(checkBoxActual)

      /* VERIFY */
      expect(checkBoxActual.checked).toEqual(true)
      expect(queryByTestId(LOOKUP_WRAPPER_TESTID)).toBeInTheDocument()
    })
#+END_SRC

The two line where things get really interesting are:

#+BEGIN_SRC rjsx
      const serviceAreaCheckbox = getByTestId(&quot;service-area-checkbox&quot;)
      const checkBoxActual = serviceAreaCheckbox.querySelector(
        &quot;input[type=checkbox]&quot;
      )
#+END_SRC

We can get the ~Checkbox~ component with the first line, but this only gets us the label wrapper and not the actual checkbox, so the second line pulls up the actual checkbox from within it.

The rendered code from the ~Checkbox~ component looks like this:

#+BEGIN_SRC html
      &lt;label
        class=&quot;sc-kAzzGY dXoiwv&quot;
        data-testid=&quot;service-area-checkbox&quot;
      &gt;
        &lt;input
          class=&quot;sc-cSHVUG bYZObx&quot;
          type=&quot;checkbox&quot;
        /&gt;

        service_location.label
      &lt;/label&gt;
#+END_SRC

The funky looking classes are the result of ~style-components~. What&#39;s interesting to note is that the ~data-testid~ was placed on the ~label~ node. Using ~querySelector~ let&#39;s me pull out the actual checkbox, which is an HTML element of type &quot;checkbox&quot;.

From there, verifying the preconditions and postconditions becomes fairly easy:

- the state of the check box (ie. checked or not checked) is avalable as a property of the element
- using ~queryByTestId~ tests whether the particular element is in the document or not

Making the change happens with the ~fireEvent.click~. (/Note:/ the ~change~ event doesn&#39;t work for checkboxes. See: https://github.com/testing-library/react-testing-library/pull/178/files#diff-04c6e90faac2675aa89e2176d2eec7d8R631 ) (and beware the drift of time as well...)

** Verifying a checkbox is en-/disabled based on another value

This case shows something a little different, and shows how to approach changing props as related to component testing.

The code under test in this case is:

#+BEGIN_SRC rjsx
  const SmsNotifications = ({ name, value, onChange, isMobileSet }) =&gt; {
    return (
      &lt;FormField name={name} label={null}&gt;
        &lt;div&gt;
          &lt;strong&gt;{I18n.t(&quot;notify_via_sms.title&quot;, { scope: i18nScope })}&lt;/strong&gt;
          &lt;Checkbox
            name={name}
            value={value || &quot;&quot;}
            onChange={onChange}
            disabled={isMobileSet ? null : &quot;disabled&quot;}
            wrap={&quot;wrap&quot;}
            data-testid=&quot;notify-via-sms-checkbox&quot;
          &gt;
            {&quot; &quot;}
            {I18n.t(&quot;notify_via_sms.label&quot;, { scope: i18nScope })}
          &lt;/Checkbox&gt;
        &lt;/div&gt;
      &lt;/FormField&gt;
    )
  }

#+END_SRC

The spec test for this feature is:

#+BEGIN_SRC rjsx
    it(&quot;enables the notify via sms checkbox when the mobile field has a value&quot;, () =&gt; {
      const NOTIFY_CHECKBOX_TESTID = &quot;notify-via-sms-checkbox&quot;

      const props = {
        fields: {},
        handleChange: jest.fn(),
        onDuplicateCustomerName: jest.fn(),
        onSelectParent: jest.fn()
      }
      const { queryByTestId, getByTestId, rerender } = render(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} /&gt;
        &lt;/Providers&gt;
      )
      const notifyCheckBoxComponent = getByTestId(NOTIFY_CHECKBOX_TESTID)
      const checkBoxActual = notifyCheckBoxComponent.querySelector(
        &quot;input[type=checkbox]&quot;
      )
      expect(checkBoxActual.disabled).toEqual(true)

      rerender(
        &lt;Providers&gt;
          &lt;CustomerInfoFormSection {...props} fields={{ mobile: &quot;555121&quot; }} /&gt;
        &lt;/Providers&gt;
      )

      expect(checkBoxActual.disabled).toEqual(false)
    })
#+END_SRC

I&#39;m doing the same trick as before about grabbing the actual checkbox by using ~querySelect~ on the element returned with ~getByTestId(&quot;NOTIFY_CHECKBOX_TESTID&quot;)~. This provides access to the ~disabled~ property.

This test uses the testing library&#39;s ~rerender~ method, which is used to apply different props. In this case the props for the compoonent are controlled above this component, so this is actually a valid test matching how it would work in the user&#39;s environment.

For the rerender, I&#39;m passing in a value for the mobile phone number, which is used to determine whether the checkbox is en-/disabled.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
