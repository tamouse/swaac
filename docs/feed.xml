<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2019-05-31T13:29:08-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/05/2019-05-31-prefer-pluck-to-map.org</id>
      <updated>2019-05-31T13:29:08-05:00</updated>
      <title>2019-05-31-prefer-pluck-to-map</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 2019-05-31-prefer-pluck-to-map
#+DATE: &lt;2019-05-31 Fri&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)

** Remember:


#+CAPTION: prefer pluck to map
[[../../../images/prefer-pluck-to-map.jpg]]


   When extracting specific columns from an ActiveRecord::Collection, prefer ~pluck(:field1, :field2, :field3)~ to ~map{|row| [row[:field], row[:field], row[:field]]}~. This more often comes up when you want just the ~:id~, for example:

   #+BEGIN_SRC ruby
     @work_task_type = @account
			 .task_types
			 .where(name: &quot;Work&quot;)
			 .pluck(:id)

     # vs

     @work_task_type = @account
			 .task_types
			 .where(name: &quot;Work&quot;)
			 .map(&amp;:id)

   #+END_SRC
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/02/how-to-reset-ios-simulator.org</id>
      <updated>2019-05-31T13:28:47-05:00</updated>
      <title>How to reset iOS simulator</title>
      <content>#+OPTIONS: &#39;:nil *:t -:t ::t &lt;:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not &quot;LOGBOOK&quot;) date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: how-to-reset-ios-simulator
#+DATE: &lt;2018-02-15 Thu&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+KEYWORDS: ios, simulator, development, reset

* How to reset iOS simulator

I ran into an issue recently where I was trying to debug a problem in a project, but had a problem accessing the right data server since I was logged into a local development server, and really needed to get back to the &quot;new app&quot; state.

I searched for &quot;reset xcode simulator&quot; via DDG and first hit came up with &lt;https://stackoverflow.com/questions/16195859/reset-ios-simulator-application-data-to-run-app-for-first-time#16195931&gt; which gave me an answer.

The command line versions work, but it can be a pain to get the UDID for the simulator. Doing it from the running simulator was easier, but of course the menu options are different than discussed in the stackoverflow answer.

I found it on the Simulator (Version 10.0 (SimulatorApp-835.2.1) seen in the following screen shot:

#+CAPTION: Reset IOS Simulator Screenshot
[[../../../images/reset-ios-simulator.png]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/05/2019-05-02-til-jquery-attr-vs-prop.org</id>
      <updated>2019-05-02T08:14:03-05:00</updated>
      <title>TIL: jQuery .attr() vs .prop()</title>
      <content>#+COMMENT -*- time-stamp-line-limit: 20; time-stamp-count: 2 -*-
#+TITLE: TIL: jQuery .attr() vs .prop()
#+DATE: [2019-05-02 Thu]
#+KEYWORDS: jQuery, attr, prop
#+DESCRIPTION: Today, I learned another difference between jQuery&#39;s .attr() and .prop() methods

* TIL: jQuery .attr() vs .prop()
   - last update: Time-stamp: &lt;2019-05-02 08:14:03 tamara&gt;

** Intro

   Sometime in the past, jQuery only had an ~.attr()~ method for looking at and setting an element&#39;s attributes. More recently, it acquired the ~.prop()~ method for setting a node&#39;s properties.

** Radio Button example

   The problem I ran into this with was old code that dealt with toggling radio buttons on a form:

    #+BEGIN_SRC rjsx
      $(&#39;#customer_which_billing_address_service&#39;).attr(&#39;checked&#39;, true);
    #+END_SRC

    This would set the sense of the attribute in the source, but it wouldn&#39;t change the property, so the radio button remained unchecked visually; in addition, when the form was submitted the radio buttons set didn&#39;t get posted correctly.

    Changing this to the ~.prop()~ method fixed both problems:

    #+BEGIN_SRC rjsx
      $(&#39;#customer_which_billing_address_parent&#39;).prop(&#39;checked&#39;, false);
      $(&#39;#customer_which_billing_address_service&#39;).prop(&#39;checked&#39;, true);
    #+END_SRC

    This visually set the proper radio button, and when the form was submitted the correct radio button value was posted.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/04/2019-04-27-flash-toastr-using-react-hooks.org</id>
      <updated>2019-04-27T16:28:56-05:00</updated>
      <title>FlashToastr React Component using React Hooks</title>
      <content>#+TITLE: 2019-04-27-flash-toastr-using-react-hooks
#+DATE: &lt;2019-04-27 Sat&gt;
#+AUTHOR: Tamara Temple
#+EMAIL: tamouse@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t html5-fancy:t
#+OPTIONS: tex:t
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER: div
#+DESCRIPTION: An example implementation to learn react hooks
#+KEYWORDS: react,hooks,context,component,flash messages,toastr
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD: &lt;link rel=&quot;stylesheet&quot; href=&quot;../../../others/style.css&quot; /&gt;
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 26.1 (&lt;a href=&quot;https://orgmode.org&quot;&gt;Org&lt;/a&gt; mode 9.1.9)
#+LATEX_HEADER:

* FlashToastr React Component using React Hooks

  Today I set out on a learning journey. I&#39;d been looking at React&#39;s Hooks implementation for a bit, but haven&#39;t really gone out to make anything.

  The app I work on, Kickserv, has a Redux-based Flash message component that used in the new React-based client. It&#39;s rather large, and totally over-engineered for the need it&#39;s fulfilling.

  Roll up with Hooks in React 16.8 getting full support, and I figured it&#39;s really time to buckle down and learn them.

** First mis-direction

   Initially, I thought I would be able to do this using only ~useState~ in the hook. This led to a few hours of hair-pulling, the wailing of gnashing of teeth, and a few good swears. It turns out I was missing something really important:

   &gt; When you use ~useState~, *it&#39;s actually creating new state*

   This is probably obvious, and it shouldn&#39;t need stating, but it was breaking me. See, for the flash message thing, it&#39;s treated sort of like a modal, but not really. It needs a context to be able to let a component anywhere within the app be able to submit a flash message to it, and have the little toastr overlay alert show up. In this app, there is only one, they don&#39;t stack up like notifications do in other systems, they just show up at the top of the page until dismissed by the user, a la Rails&#39; flash messages.

** Enter Context

   What I figured out finally was that I needed a context that would keep state across the app and for the flash components themselves. This turned out to be pretty nifty and solved things quite nicely.

   The context holds information on what the flash message is, what level of message it is, and whether the message is showing or not. In addition, it has setters for each of these. The context provider .. erm .. provides them, and the hook picks them up with ~useContext~, implements 2 convenience functions for setting/showing the flash, and another for closing it.

** Storybook View

   The component is illustrated using storybook, and can be seen at [[https://flash_toastr.surge.sh/]] .

** Github Repo

   The repo containing the code is out at [[https://github.com/tamouse/flash_toaster]] if you want to play around with it or something.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/10/link-ARIA-is-spackle-not-rebar.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>LINK: [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]]</title>
      <content>* LINK: [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]]

- Time-stamp: &lt;2019-02-02 17:27:14 tamara&gt;
- published date: [2018-11-04 Sun]
- keywords: ARIA, accessibility, a11y, link

There&#39;s an excellent article over at [[https://css-tricks.com/][CSS Tricks]] by Eric Bailey, [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]], written November 2017, that lays out the reasons when to use ARIA ([[https://www.w3.org/WAI/standards-guidelines/aria/][Accessible Rich Internet Applications Suite]]) directly, and most importantly in my view, when _not_ to use it explicitly (tl;dr: most of the time).

I think this sums up the intent nicely:

#+BEGIN_QUOTE
Before considering other options, start with markup that semantically describes the content it is wrapping.
#+END_QUOTE

And while that is definitely true, it really does help to understand what ARIA is for and how it works. So while we&#39;re on the subject, I want to point out the excellent [[https://frontendmasters.com][Frontend Masters]] course: [[https://frontendmasters.com/courses/web-accessibility/][Website Accessibility]] by Jon Kuperman.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/07/playing-games-with-the-checked-pseudo-selector.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>Playing games with the :checked pseudo-selector</title>
      <content>* Playing games with the :checked pseudo-selector
  :PROPERTIES:
  :CAPTURE_DATE: 2017-07-06 01:25
  :END:

- keywords: css, checked
- source: [[https://codepen.io/tamouse/pen/YQjVNb?editors=1100]]

I&#39;m not sure what made me think of this, but I got a wild hair and thought I&#39;d try it out.

The =:checked= CSS pseudo-selector lets you select a /checked/ checkbox or radio button. The question I wondered, would this be a cheap-azz way of making a sliding sidebar? And the answer is, yes it could.

Over at [[https://codepen.io/tamouse/pen/YQjVNb?editors=1100][codepen]] I left a pen showing just that:

#+BEGIN_HTML
  &lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;what can you do with :checked?&quot; src=&quot;//codepen.io/tamouse/embed/YQjVNb/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;
See the Pen what can you do with :checked? by Tamara Temple (@tamouse)
on CodePen.
  &lt;/iframe&gt;
#+END_HTML

Some of the interesting bits:

- The body is set to =display: flex= and =flex-direction: row=, which would normally put the 3 major body parts, =input=, =aside=, and =article= horizontally, but,

- The input checkbox is positioned absolute taking it out of the flex flow, so only the =aside= and =article= are flexed

- After setting everything up for the &quot;normal&quot; state, with the checkbox /un/checked, and the sidebar /hidden/, I added the last CSS rule to display the sidebar when the input checkbox is checked.

*** normal state

#+BEGIN_SRC css
    .sidebar {
      width: 20px;
      background: tomato;
      padding-top: 40px;
      &gt; * {
        display: none;
      }
    }
#+END_SRC

*** checked state

#+BEGIN_SRC css
    input.sidebar-toggle:checked ~ .sidebar {
        width: 200px;
      &gt; * {
        display: inherit;
      }
    }
#+END_SRC

Of course, this could be taken in all sorts of directions, but I wanted to try this out to see if it works.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/04/link-decorating-activerecord.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>Link: Decorating ActiveRecord</title>
      <content>* Link: Decorating ActiveRecord
  :PROPERTIES:
  :CUSTOM_ID: link-decorating-activerecord
  :END:

- published date: 2017-04-06 23:01
- keywords: [&quot;activerecord&quot;, &quot;decorators&quot;, &quot;links&quot;, &quot;rails&quot;, &quot;tl-dr&quot;]
- source: [[https://robots.thoughtbot.com/decorating-activerecord]]

This came across my path this week: [[https://robots.thoughtbot.com/authors/joel-quenneville][Joël Quenneville]]&#39;s article, [[https://robots.thoughtbot.com/decorating-activerecord][Decorating ActiveRecord]], which outlines some hazards when you go about decorating ActiveRecord models.

Do read the article, it&#39;s good.

--------------

Here&#39;s the tl;dr for my memory:

#+BEGIN_QUOTE
  If you&#39;re decorating an ActiveRecord or ActiveModel object in Rails, you probably want to define the following to ensure the decorator works the way you expect instead of silently delegating to the underlying object:
#+END_QUOTE

#+BEGIN_HTML
  &lt;blockquote&gt;
#+END_HTML

```ruby linenos class Profile &lt; SimpleDelegator extend ActiveModel::Naming

def to_model self end end ```

#+BEGIN_HTML
  &lt;/blockquote&gt;
#+END_HTML
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/02/gitlab-database-outage-post-mortem.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>Gitlab Database Outage Post-Mortem</title>
      <content>* Gitlab Database Outage Post-Mortem

  - published date: 2017-02-11 01:54
  - keywords: [&quot;database-outage&quot;, &quot;devops&quot;, &quot;gitlab&quot;, &quot;post-mortem&quot;]
  - source: https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/

  Back at the end of January 2017, git SaaS provider [[https://gitlab.com][Gitlab]] reported a disaster of epic proportions:

  #+BEGIN_QUOTE
  On January 31st 2017, we experienced a major service outage for one of our products, the online service GitLab.com. The outage was caused by an accidental removal of data from our primary database server.
  #+END_QUOTE

  #+BEGIN_QUOTE
  This incident caused the GitLab.com service to be unavailable for many hours. We also lost some production data that we were eventually unable to recover. Specifically, we lost modifications to database data such as projects, comments, user accounts, issues and snippets, that took place between 17:20 and 00:00 UTC on January 31. Our best estimate is that it affected roughly 5,000 projects, 5,000 comments and 700 new user accounts. Code repositories or wikis hosted on GitLab.com were unavailable during the outage, but were not affected by the data loss. GitLab Enterprise customers, GitHost customers, and self-hosted GitLab CE users were not affected by the outage, or the data loss.
  #+END_QUOTE

  They had destroyed the database holding all their repository information, and then could not find any viable backups.

  *Today, 11 February 2017,* they released a [[https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/][post-mortem]] of the situation, providing something few companies have /ever/ done: transparency and openness into a major devops disaster so that /everyone/ can learn.

  They list several items in the Root Cause Analysis section, and provide a list of mitigation and recovery improvements now underway.

  *Major kudos to Gitlab!*
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2016/12/todo-app-using-just-react-with-pojs-no-jsx-or-es6.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>Todo app using just React with POJS - no JSX or ES6</title>
      <content>* Todo app using just React with POJS - no JSX or ES6
  :PROPERTIES:
  :CUSTOM_ID: todo-app-using-just-react-with-pojs---no-jsx-or-es6
  :END:

- published date: 2016-12-03 09:56
- keywords: [&quot;brian-holt&quot;, &quot;frontend-masters&quot;, &quot;javascript&quot;, &quot;learning&quot;, &quot;react&quot;, &quot;todoapp&quot;]
- source: https://github.com/tamouse/todo-react-nojsx

I just moderated the [[https://frontendmasters.com][Frontend Masters]] class &quot;Complete Introduction to React&quot; taught by [[https://twitter.com/holtbt][Brian Holt]] of Netflix and Reddit fame.

It was a great course, but as moderator I was doing a lot of things to keep the chat room flowing and didn&#39;t get to pay much attention to the detail Brian was presenting, and definitely didn&#39;t have time in class to try out stuff.

So I thought I&#39;d just give the first bit of Brian&#39;s presentation a go, where we just worked with React as a plain JS library, nothing fancy, no JSX transpiling, etc.

[[https://github.com/tamouse/todo-react-nojsx][This]] is the result, the canonical single page Todo application.

It was pretty easy, and pretty fun. I kept only to the [[https://facebook.github.io/react/docs/][React docs]], especially

- [[https://facebook.github.io/react/docs/react-without-es6.html][React Without ES6 - React]]
- [[https://facebook.github.io/react/docs/react-without-jsx.html][React Without JSX - React]]

I&#39;m pleased with the experiement.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2016/12/flexbox-website-with-fixed-headers-and-footer.org</id>
      <updated>2019-04-27T06:24:39-05:00</updated>
      <title>flexbox website with fixed headers and footer</title>
      <content>* flexbox website with fixed headers and footer
  :PROPERTIES:
  :CUSTOM_ID: flexbox-website-with-fixed-headers-and-footer
  :END:

- published date: 2016-12-04 14:31
- keywords: [&quot;css&quot;, &quot;flexbox&quot;]

I was playing around with some React stuff and came upon a basic layout issue. I wanted to have the standard header + footer + main + sidebar sort of layout, but I wanted to do it flexbox. I also wanted the header and footer to be fixed to the top and bottom, respectively, and for the main content to be able to scroll inside it.

*UPDATE!!* Now with more responsive!

The results can be seen at [[https://github.com/tamouse/sample-flex-website-layout][this repo]], and a demo at [[https://tamouse.github.io/sample-flex-website-layout/][Flex Standard Layout (demo)]].

** Page Boundaries: Header and Footer
   :PROPERTIES:
   :CUSTOM_ID: page-boundaries-header-and-footer
   :END:

Making the header and footer fixed to top and bottom is fairly easy. The following attributes generally work well:

#+BEGIN_SRC css
    .fixed-top, .fixed-bottom {
      position: aboslute;
      height: 40px;
    }
    .fixed-top { top: 0 }
    .fixed-bottom { bottom: 0 }
#+END_SRC

** Full-height columns
   :PROPERTIES:
   :CUSTOM_ID: full-height-columns
   :END:

Getting columns of equal height is a bit tricksier, and I resorted to what seems like a hack.

#+BEGIN_SRC css
    .fixed-middle {
      position: absolute;
      top: 40px;
      bottom: 40px;
      overflow: hidden;

    }

    .fixed-middle .column {
      overflow: auto;
    }
#+END_SRC

** Where&#39;s the flex?
   :PROPERTIES:
   :CUSTOM_ID: wheres-the-flex
   :END:

This isn&#39;t very flexy yet, so I added in some goodness for that:

#+BEGIN_SRC css
    .fixed-middle {
      dislplay: flex
    }
    .fixed-middle .col {
      flex: 1
    }
#+END_SRC

Much better, but then the sidebars and central main content area are all the same width. I want the content area to dominate.

I arranged the main content part to come before the sidebars, like so:

#+BEGIN_EXAMPLE
    &lt;div class=&quot;fixed-middle&quot;&gt;
        &lt;main class=&quot;main-content&quot; role=&quot;main&quot;&gt;
            &lt;!-- main content --&gt;
        &lt;/main&gt;
        &lt;aside class=&quot;left-side&quot;&gt;
            &lt;!-- left side bar content --&gt;
        &lt;/aside&gt;
        &lt;aside class=&quot;right-side&quot;&gt;
            &lt;!-- right sidebar content --&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
#+END_EXAMPLE

After removing =.fixed-middle .col= CSS definition, I put in:

#+BEGIN_SRC css
    .fixed-middle .main-content {
       flex: 5;
       order: 2;
    }
    .fixed-middle .left-side {
       flex: 1;
       order: 1;
    }
    .fixed-middle .right-side {
       flex: 1;
       order: 3;
    }
#+END_SRC

This tells flexbox to let the main content area grow to 5 times the size of the sidebars, but make sure the left side bar&#39;s content comes first in the row.

** Header and Footer Redux
   :PROPERTIES:
   :CUSTOM_ID: header-and-footer-redux
   :END:

I wanted to extend this even further, so the case where you may have multiple &quot;widgets&quot; in the header or footer, and so redid the same idea for the those, but keeping the flex to 1.

If I ended up with a 2/3 widget and 1/3 widget, I could mark them with appropriate classes and set the flex accordingly.

** Making it responsive
   :PROPERTIES:
   :CUSTOM_ID: making-it-responsive
   :END:

This turned out to be really easy, and all I needed to do is wrap the flexbox and absolute positioning in a media query.

I had put the page header after the main content, but that didn&#39;t look as good, so I moved that to the top.

The image was misbehaving as well, so I introduced an =.img-responsive= class that limited the width to 100%.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
