<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2018-12-30T12:42:52-06:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2015/05/learning.org</id>
      <updated>2018-12-30T12:42:52-06:00</updated>
      <title>Resources for learning how to program, especially how to program in Ruby and Rails</title>
      <content>* Resources for learning how to program, especially how to program in Ruby and Rails

- last updated Time-stamp: &lt;2018-12-30 12:42:51 tamara&gt;

** Introduction

Many people ask me &quot;How do I learn to program?&quot; and &quot;What book(!) should I read to learn Rails?&quot;.

These are legitimate questions, but they aren&#39;t necessarily the right questions to ask in order to begin the journey of becoming a software craftsperson.

Better questions, I feel, are:

- What resources do you recommend for beginners?
- Where can I go for help?

I&#39;ve been finding things around the &#39;net that can greatly help people new to programming, new to web development, new to Rails, and so on.

--------------

*UPDATE:* I&#39;ve created a section for the [[./beginners-section.org][Absolute Beginner]] as well, you might find it useful.

This is a quick, short list of things. I urge you to seek them out, and seek out others as well, and create your /own/ list of learning resources. People will begin to ask you, and it&#39;s nice to have something handy.

Also, [[https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard][learning Rails is hard]]. But don&#39;t despair! The key to learning is break things down, focusing and practicing small things, and build up a lot of skills slowly. (&quot;Wax on, wax off.&quot; &quot;Ok, Mr.Â Myagi.&quot;) I&#39;m going to jump ahead and tell you to download the first chapter (free) of Justin Weiss&#39;s book [[https://www.justinweiss.com/practicing-rails/][Practicing Rails]]. Search for &quot;first chapter&quot; and fill out the form to get it. You&#39;re also signing up to get e-mail from Justin, but it&#39;s always good stuff.

--------------

/Update Sun Jun 8 11:39:13 2014:/ Recently came across web post [[http://astonj.com/tech/best-way-to-learn-ruby-rails/][Best Way To Learn Ruby and Rails]] and must say it is a great compilation of resources. In addition, Ashton puts the focus right at the heart of the matter: you have learn /both/ Ruby /and/ Rails.

--------------

** Books

 - [[https://www.goodreads.com/book/show/13590009-think-like-a-programmer][*Think Like a Programmer: An Introduction to Creative Problem Solving*]] by V. Anton Spraul.

   Spraul&#39;s purpose in this book is not to teach you how to write a program, but to begin to understand the problem-solving approach that is inherent in good programmers. Like so many skills, programming is driven by the desire and vision of the practitioner. A painter uses brushes, canvas, paints, other media to create a work of art, but it isn&#39;t the tools, it isn&#39;t the specific techniques, and it isn&#39;t even the particular skill the painter has that makes a good work of art; it is their composition, the melding of media and surface, the use of different techniques, and practice in developing the skills that come together to form the work of art. Spraul is going to take you deeper than just the syntax, semantics, and data structures of software to the heart of what makes a good programmer: the ability to creatively find and generate solutions to problems.

 - [[https://www.goodreads.com/book/show/520.Learn_to_Program][*Learn to Program*]] by Chris Pine.

   To be honest, I have not looked through this book. It is, however, nearly universally recommended to people new to programming. The original tutorial is available online for free as well: [[https://pine.fm/LearnToProgram/]]. LtP was featured on the great webcomic [[http://www.unshelved.com/2014-7-25][Unshelved]].

 - [[https://pragprog.com/book/tpp/the-pragmatic-programmer][**The Pragmatic Programmer]] by Andrew Hunt and David Thomas

   This is the best modern treatise on the craft of programming. It represents the best of experiences programmers have come to appreciate during years of development. I read this book after years of practice, and found everything in it to ring true. (The thought &quot;I could have written this!&quot; came up frequently.) This book is not about any specific language or technology, but spans the gamut of software development. This is a must-have for practitioners.

 - [[https://www.goodreads.com/book/show/79766.A_Pattern_Language][*A Pattern Language: Towns, Buildings, Construction*]] by Christopher Alexander.

   You may be wondering why I&#39;ve included a book on building construction. The answer is quite simple: the concepts in building towns and houses is nearly directly translatable to building software applications and systems. One part of being an excellent craftsperson is being able to apply abstract learning in different problem domains. If you are an expert in writing software, you are almost /never/ going to be solving problems only for other software developers. (You can and should do so, but the client and users are generally non-programmers.) Thus you&#39;re most likely going to be working in someone else&#39;s domain of expertise. Alexander&#39;s views on architecture apply to software architecture as well.

 - [[http://shop.oreilly.com/product/9780596510046.do][*Beautiful Code*]] by Andy Oram and Greg Wilson.

   A book with a purpose, that isn&#39;t a how to, so much as a how to think. It&#39;s a collection of essays by various software developers on what they think makes code beautiful. In all, the following holds true:

   1. First, make it correct.
   2. Second, make it pretty.
   3. Third, make it fast.

 - *Programming Proverbs* by Henry F. Ledgard

   This book, published in 1975, and a subsequent volume dedicated to the Pascal language published in 1979, were essential to me back when I was in university learning computer science. They&#39;re out of print now, so I&#39;m starting a blog series covering them. [[file:%7B%7Bsite.baseurl%7D%7D%7B%%20link%20_posts/2017-07-23-pp-introduction.markdown%20%%7D][Programming Proverbs: Introduction]]

 - [[https://leanpub.com/systemdesignheuristics][*Systems Design Heuristics*]] - by the late, great Jerry Wienberg.

   Jerry was a friend as well as a teacher. I miss him enourmously. This book is full of his thoughts and writings on how one should do systems design. As the title implies, there are no rules, but there are some heuristics one can apply to the overall design and architecture of systems.


*** Object-Oriented Programming

 - [[https://www.sandimetz.com/99bottles][*99 Bottles of OOP*]] by Sandi Metz and Katrina Owen.

   A recent book, representing the absolute best by two teachers of software engineering. Sandi has been teaching Object-oriented programming for decades, and Katrina brings in her expertise with refactoring, resulting in a deep book that stretches beyond the basics and deep into the structures and understanding of object systems and idioms. It brings up to date the actual concepts of refactoring, test-driven development, naming things, reducing code &quot;smells&quot; and making code more easily and economically maintainable and sustainable. They take all the buzzwords and unbuzzify them into practical, useful methodologies and techniques.

*** Ruby-specific

 - [[https://www.goodreads.com/book/show/9364729-eloquent-ruby][*Eloquent Ruby*]] by Russ Olsen.

   Olsen&#39;s approach in this book is to go far beyond just learning a programming language, but a way to learning the idioms and the &quot;Ruby Way&quot;. Even if your chosen language is something other than Ruby, reading this book will give you an appreciation for how to delve into a language and get the most out of it.

 - [[http://www.confidentruby.com/][*Confident Ruby*]] by Avdi Grimm.

   More than any other book I&#39;ve read on Ruby, &quot;Confident Ruby&quot; has affected my coding habits more than any other. If Ruby is about making programmers happy, /Confident Ruby/ is about making programming joyful, and not just in the immediate, but being able to look at code you&#39;ve written in the future and recall the joy. /Confident Ruby/ seeks to combat software rot from the get-go.

 - [[http://www.amazon.com/The-Well-Grounded-Rubyist-David-Black/dp/1617291692][*Well-Grounded Rubyist*]] by David A. Black

   Also known as the &quot;Black Book&quot; (because of the author&#39;s name), WGR is the successor to /Ruby for Rails/ by Black that provided me with the much-needed introduction to how to write Ruby code, with the idea of using it in Ruby for Rails. This book is a fabulous primer on the Ruby idioms and expressions that help make one a good Ruby programmer.

 - [[http://www.poodr.com/][*Practical Object-Oriented Design in Ruby*]] by Sandi Metz

   This book provides a deeply-needed introduction to object-oriented design, specifically targeted to the Ruby language. Ruby is one of the richest languages in which to express object-oriented patterns, but it is easy to fall of the OO wagon and start to get things messed up. Sandi provides the thinking tools necessary to decide how to structure your code for better maintainability, extensibility and testability. Comprehension and forward communication of the choices made during software design are crucial to programming, and Sandi is one of the very best at explaining things.

*** Rails-specific

 - [[http://www.manning.com/bigg2/][*Rails 4 in Action*]] by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner.

   A follow-on the highly successful Rails 3 in Action, R4iA has been completely rewritten, with new examples, case study, and all the great new features in Rails 4.

   A great book for beginning Rails developers to start with, and for intermediate developers to step up their game.

 - [[https://www.justinweiss.com/practicing-rails/][*Practicing Rails*]] by [[http://www.justinweiss.com][Justin Weiss]].

   The first chapter alone (free!) is worth a download and very thorough read. Justin has provided one of the most effective strategies for learning just about /anything/ skill based, and it&#39;s especially effective for learning software skills. The focus of the book and the examples and such are obviously Rails, but the first chapter is applicable to anything.

*** JavaScript-specific

 - [[https://www.goodreads.com/book/show/2998152-javascript][*JavaScript: The Good Parts*]] by David Crockford.

   JavaScript is a vast, sprawling language and ecosystem, and has been maligned for much poor code on the web. Crockford extracts out the parts that are really useful, giving the reader a better grounding. This book is the progenitor of many of the JavaScript frameworks that have come up the past few years, as well as CoffeeScript and other *Script derivatives.

 - [[https://github.com/getify/You-Dont-Know-JS][*You Don&#39;t Know JS series*]] by [[https://github.com/getify][Kyle Simpson]].

   A /tour de force/ by one of the great teachers and evangelists of JavaScript, Kyle&#39;s &quot;You Don&#39;t Know JS&quot; series is a must-read collection of books. You can get the books in raw form on-line at the above address, and you can get the published e-books at your favourite vendor.

 - [[http://eloquentjavascript.net/][*Eloquent Javascript*]] by Marijn Haverbeke.

   When I was more naive about JS, I wrote a bit of a negative review of this book. Subsequently, I&#39;ve learned of it&#39;s true eloquence and meaning in giving a model of how to organize and implement modern JS. The subtitle &quot;A modern introduction to programming&quot; is still a bit misleading, perhaps, because you have to understand a fair bit of JavaScript /and/ programming to get the message, I feel. But that&#39;s just a quibble at this point. Read this before you strike out on creating a client-based JS application; you won&#39;t regret it.

 - *Test-Driven JavaScript Development* by Christian Johansen (Addison-Wesley Professional, September 2010, ISBN 9780321683915)

   (The [[http://www.informit.com/store/test-driven-javascript-development-9780321684042][ebook]] for this title is ridiculously expensive. I read it via [[https://learning.oreilly.com/library/view/test-driven-javascript-development/9780321684097/][safarionline]].)

   This book provides some great insights into testing JavaScript applications. Released in 2010, the things that are out of date are the specific tools used for testing, /however/, the concepts for writing tests and performing test-driven Javascript development are still very appropriate.

 - [[https://leanpub.com/javascriptallongesix][*JavaScript AllongÃ©*]] by Reginald &quot;raganwald&quot; Braithwait

   Using the metaphor of a coffee barista, Reg goes in depth on thinking about how JavaScript works; this is not a practical book from the standpoint of &quot;tell me what code to write&quot;, but rather from the standpoint of knowing how JavaScript works inside so you can write better code yourself.


*** HTML and CSS Specific

 - [[https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189?ie=UTF8&amp;*Version*=1&amp;*entries*=0][*HTML and CSS Design and Build Websites*]] by Jon Duckett.

   This book has been recommended by several people in the [GDI] courses I&#39;ve been helping in. A very visual approach, using full-colour photographs to explain the two declarative languages.

** Web sites

 This is just going to be a list of sites I&#39;ve found or been pointed at for helping people learn to program. These are most definitely biased towards Ruby and Rails, as that is my current area of concentration, and generate the most requests that come to me.

 - [[http://www.theodinproject.com/home][*The Odin Project*]] -- pulling together a curriculum from around the web, this is a curation site that gives order and structure to learning how to develop web applications.

 - [[http://codekata.com/][*Code Kata*]] -- Dave Thomas&#39;s site that lists a great set of coding exercises. You can work these more than once, in fact that is what you do with kata.

 - [[http://exercism.io/][*Exercism.IO*]] -- a site devoted to helping people learn and think deeply about writing excellent code. It has projects you implement and then get feedback on from others, and allows you to give feedback as well.

 - [[http://docs.railsbridge.org/docs/][*RailsBridge*]] -- a site devoted to helping people get up and running on learning Ruby on Rails, with emphasis on reaching out to women and LGBTQ folks. RailsBridge workshops are run around the world and the documents here can be used individually to help turn your computer into a development machine. What so often isn&#39;t addressed directly by very many of these sites and books is the ecosystem that one has to learn as well: a coding editor, the command line, rake, irb/pry, git, heroku if that is your choice for deployment (which I do recommend for small beginner projects so you can show it off to your friends); RailsBridge tutorials include these very important tools.

 - [[http://guides.railsgirls.com/][*RailsGirls Guides*]] -- I haven&#39;t explored these in depth yet, I just got the site yesterday. However, I can see just from the list of guides these would be pretty great, just like the RailsBridge site above.

 - [[http://www.railstutorial.org/][*Hartl&#39;s Rails Tutorial*]] -- the most often recommended site to learn how to create web applications in Rails, it goes beyond the Rails stack itself, teaching Ruby, HTML5, CSS3, JavaScript, user authentication and authorization, data modeling, and so on. While Michael sells the book, tutorials, and screen casts, the text of the tutorial online is free at http://www.railstutorial.org/book. Considerable work has gone into this effort, however, so if you can afford to, please purchase at least the book.

 - [[https://www.codeschool.com/][*CodeSchool*]] -- learn from the &quot;Comfort of your own browser&quot;. Codeschool has web casts, coding practices, challenges, and so on.

 - [[http://codeacademy.com][*CodeAcademy*]] -- although I do not personally like the way one interacts with the web site, it does offer an gentle introduction to ruby, javascript, python and other subjects in an immediate feedback environment.

 - [[https://www.khanacademy.org/computing/cs][*Kahn Academy*]] -- learning to program with JavaScript (if you are just starting out, JS is a fine language to learn. It&#39;s fairly ubiquitous in the online world.). Their approach is teaching young folks, which might or might not appeal.

 - [[http://railscasts.com/][*RailsCasts*]] -- another super awesome effort has been put together by Ryan Bates. Current production is on hiatus, so the $9/month fee for the full screen casts is being pro-rated, so you can buy in for $9 and there won&#39;t be further monthly charges until production starts up again.

 - [[https://www.rubytapas.com/frequently-asked-questions/][*RubyTapas*]] -- Avdi Grimm is a fabulous Ruby and Rails mentor and guide, who puts out two very short screen casts a week (tapas -- small plates). These are really impeccably done, and I personally love listening to Avdi talk.

 - [[http://learncodethehardway.org/][*LearnCodeTheHardWay*]] -- provides online versions of books and tutorials for [[http://learnpythonthehardway.org/book/][*Python*]], [[http://ruby.learncodethehardway.org/book/][*Ruby*]], [[http://c.learncodethehardway.org/book/][*C*]], [[http://sql.learncodethehardway.org/book/][*SQL*]], [[http://regex.learncodethehardway.org/book/][*Regular Expressions*]] and more.

 - [[http://www.rubykoans.com/][*Ruby Koans*]] -- &quot;koans&quot; are an Eastern discipline tradition: small, repeated exercises to learn skills and build them into your muscles and memory, so you can use them without thinking consciously about them. In this sense, the ruby koans are small exercises intended to lead you on the way to learning ruby. I can&#39;t say if they&#39;re that successful, but some people definitely enjoy this progressive way of learning. The ruby koans definitely guide you in the way of test-first development, which is a beneficial practice for all to know.

 - [[https://thoughtbot.com/upcase][*Upcase, by Thoughtbot*]] -- not a bootcamp, a finishing school. Where to go to level-up.

** Podcasts

 I am not such a big fan of podcasts, but that has more to do with my personal learning style. Nevertheless, there are some great pocasts out there.

 - [[http://www.greaterthancode.com/][*Greater Than Code*]] Also known as =&gt;Code=, this is a podcast that&#39;s more about people that practice software development and allied things, about management of such people, and making all our lives better.

 - [[http://frontendhappyhour.com/][**Frontend Happy Hour]] A handful of front end developers, including Brian Holt, Jem Young, Ryan Burgess, Augustus Yuan, and Stacy London, joined by various guests. It&#39;s a fun podcast, each week with a special word or phrase that when uttered, everyone takes a drink.

 - [[http://www.codenewbie.org/][*CodeNewbies*]] -- started off as a twitter chat, and grew into a thing, CodeNewbies offers podcasts on topics that range far and wide. Recent topics have included Scrum/Agile methods, maintaining your mental health while programming, interviews with folks who have created significant web sites (Gina Trapani of LifeHacker!!), mobile, databases, single-page apps, you name it. One of the best aspects I can see directly is that this is a /very/ open, diverse collaboration.

** Teaching Organizations

 These are the ones I&#39;m familiar with at this point in time (late 2015) in the Twin Cities area:

 - [[https://frontendmasters.com/][*Frontend Masters*]] -- Based out of Savage, MN, they offer both live in-person and online courses, and they have recorded all the training sessions for on-demand viewing if you&#39;re a member. The quality of these sessions and the videos are extremely good (these are not your twitch.tv live sessions of someone rambling about their code as they hack away) All the courses I&#39;ve taken and viewed are fantastic.

   FrontendMasters tackles intermediate and advanced topics in developing on the front end of web applications. Heavy into JavaScript, libraries, frameworks, techniques, and so on.

** Bootcamps

 These are becoming quite popular, if expensive, but they seem to provide what&#39;s being offered: intensive training in the skills necessary to become a web application developer, with experience and skills in the entire lifecycle of modern software development. I can&#39;t really provide much information on them, as I&#39;ve never experienced them. [[http://www.bootcamps.in/][Bootcamps.in]] provides at least a first-glance at several bootcamps.

** Conferences and Meetups

 Going to conferences, hanging out, meeting like-minded people, and generally instilling one&#39;s self into the millieau of the Ruby and Rails communities can be extremely rewarding. Even if you&#39;re not the conference type, make an effort to find people in your area to talk to.

 There&#39;s lots of other meetups in the Twin Cities I&#39;m regularly trying to attend:

 - [[https://www.meetup.com/Women-Who-Code-Twin-Cities/][Women Who Code Twin Cities]]
 - [[https://www.meetup.com/ruby-mn/][Ruby.MN]]
 - [[https://www.meetup.com/JavaScriptMN/][JavaScript.MN]]
 - [[https://www.meetup.com/React-Minneapolis-Meetup/][React Minneapolis Meeetup]]
 - [[https://www.meetup.com/Elixir-MN/][Elixir MN]]
 - [[https://www.meetup.com/Minneapolis-St-Paul-WordPress-User-Group/][MSP WP]]

** More Advanced

If you want to go deep and learn more about computer science, the book [[https://mitpress.mit.edu/sicp/][/Structure and Interpretation of Computer Programs/]] is probably your best bet in terms of a real CS text book that&#39;s available online for free. It&#39;s not a tutorial, but there are exercises in the text. The book uses Scheme, a lisp-like programming language. Everyone should learn a little lisp at some point. :) However it&#39;s not mandatory one use Scheme (or Clojure as the local Clojure user group has been doing). The analytical concepts apply across all languages. If you&#39;re focused on JavaScript or Ruby, you can work the examples in those languages, too.

The afore-mentioned Frontend Masters has been producing some much more advanced courses lately:

- [[https://frontendmasters.com/courses/computer-science/][Four Semesters of Computer Science in 5 Hours]] with [[https://frontendmasters.com/teachers/brian-holt/][Brian Holt]]

- [[https://frontendmasters.com/courses/computer-science-2/][Four Semesters of Computer Science in 5 Hours, Part 2]] with Brian Holt

- [[https://frontendmasters.com/courses/practical-algorithms/][A Practical Guide to Algorithms with JavaScript]] with [[https://frontendmasters.com/teachers/bianca-gandolfo/][Bianca Gandolfo]]

- [[https://frontendmasters.com/courses/data-structures-interviews/][Introduction to Data Structures for Interviews]] with Bianca Gandolfo

- With Will Sentance:

  - [[https://frontendmasters.com/courses/javascript-hard-parts/][JavaScript: The Hard Parts]]

  - [[https://frontendmasters.com/courses/javascript-new-hard-parts/][JavaScript: The New Hard Parts]]

  - [[https://frontendmasters.com/courses/object-oriented-js/][JavaScript: The Hard Parts of Object Oriented JavaScript]]

I&#39;m just going to list [[https://frontendmasters.com/teachers/kyle-simpson/][Kyle Simpson&#39;s entire collection]] because they are *all* great

Other fav instructors:

- [[https://frontendmasters.com/teachers/scott-moss/][Scott Moss]]
- [[https://frontendmasters.com/teachers/shirley-wu/][Shirley Wu]]
- [[https://frontendmasters.com/teachers/kentcdodds/][Kent C. Dodds]]
- [[https://frontendmasters.com/teachers/jem-young/][Jem Young]]
- [[https://frontendmasters.com/teachers/lukas-ruebbelke/][Lukas Reubbelke]]
- [[https://frontendmasters.com/teachers/sarah-drasner/][Sarah Drasner]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-20-adding-methods-to-base-graphql-classes.org</id>
      <updated>2018-12-20T09:04:16-06:00</updated>
      <title>Adding methods to base GraphQL classes</title>
      <content>* Adding methods to base GraphQL classes

- Time-stamp: &lt;2018-12-20 09:04:16 tamara&gt;
- keywords: graphql

Sometime in the past year I started looking into using the class-based interface with ~graphql-ruby~. Here&#39;s an example to provide millisecond precision time as integer:

#+name: types/base_object.rb
#+begin_src ruby
  module Types
    class BaseObject &lt; GraphQL::Schema::Object

      def created_at_ms
        time_to_ms(object.created_at)
      end

      def updated_at_ms
        time_to_ms(object.updated_at)
      end

      def time_to_ms(time)
        (time.to_f * 1000).to_i
      end

    end
  end
#+end_src

With that in place, another object that inherits from the base object will automatically get use of these:

#+name: types/author_type.rb
#+begin_src ruby
  module Types
    class AuthorType &lt; Types::BaseObject
      field :name, String, null: false
      field :url, String, null: true
      field :created_at_ms, Integer, null: false
      field :updated_at_ms, Integer, null: false
    end
  end
#+end_src

If there are other datetime fields, you can still use the ~time_to_ms~ method:

#+name: types/book_type.rb
#+begin_src ruby
  module Types
    class BookType &lt; Types::BaseObject
      field :title, String, null: false
      field :isbn, String, null: true
      field :purchased_on_ms, Integer, null: true
      def purchased_on_ms
        time_to_ms(object.purchased_on)
      end
      field :finished_reading_on_ms, Integer, null: true
      def finished_reading_on_ms
        time_to_ms(object.finished_reading_on)
      end
      field :rating, Integer, null: true
      field :private, Boolean, null: true
      field :created_at_ms, Integer, null: true
      field :updated_at_ms, Integer, null: true
    end
  end
#+end_src

These are from my [[https://github.com/tamouse/rails_react_graphql_template_example][rails react graphql template example]] repo.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-12-tenants-of-toast-and-tech.org</id>
      <updated>2018-12-12T23:07:18-06:00</updated>
      <title>The Tenants of Toast and Tech</title>
      <content>* The Tenants of Toast and Tech
  :PROPERTIES:
  :CAPTURE_DATE: [2018-12-12 Wed]
  :END:

- last_updated: Time-stamp: &lt;2018-12-12 23:07:18 tamara&gt;
- keywords: Learning Space, Toast and Tech

As some of you following know, I&#39;ve led this thing on Tuesday nights called &quot;Toast &amp; Tech&quot; for about 3 years [starting in the Autumn of 2015], nominally under the organization at .@GDImpls, the Minneapolis chapter of .@girldevelopit.

I have left that organization, but I want to leave behind something for those involved in T&amp;T, and for those looking to make a space for learning that it inclusive

** The Tenants of Toast and Tech:

- make *everyone* welcome, enthusiastically
- make *all* questions welcome, enthusiastically
- everyone is learning, everyone is teaching
- there is no single path, there are as many paths as people attending, as many paths as needed
- you don&#39;t need a project or tech work to attend, just come
- you don&#39;t need any experience to attend, just come
- support everyone who shows up
- Make it safe to learn, safe to ask questions, safe to show up.

Possibly the *most* important tenant of all: #ToastAndTech can happen *anywhere*, run by *anyone*; all it takes is letting folks know about it, and showing up to hold the space.

#CauseAScene
#KeepLearning
#HappyToast

[[./kawaii-toast.png][happy toast]]

[[https://twitter.com/i/moments/1073061297200267265][moment on twitter]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-06-posting-a-file-with-XMLHttpRequest.org</id>
      <updated>2018-12-12T22:58:01-06:00</updated>
      <title>RESEARCH: Posting a file with XMLHttpRequest</title>
      <content>* RESEARCH: Posting a file with XMLHttpRequest

- Time-stamp: &lt;2018-11-06 14:26:38 tamara&gt;
- published date: [2018-11-06 Tue 13:46]
- keywords: XMLHttpRequest, file upload, JavaScript, research, React


See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_nothing_but_XMLHttpRequest][Using nothing but XMLHttpRequest]] &lt;-- maybe not

See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_FormData_objects][Using FormData objects]] &lt;-- necessary for files, I think

In contrast to [[./2018-11-06-posting-a-file-with-fetch-api.org][Posting with Fetch API]], this is a bit lower on the food chain in terms of JS stuff, *but* it lets you get access to ~progress~ events, for doing such things as displaying a progress bar. Yay.

** Using FormData

MDN makes a special note:

#+BEGIN_QUOTE
Note: As we said, FormData objects are not stringifiable objects. If you want to stringify a submitted data, use the previous pure-AJAX example. Note also that, although in this example there are some file &lt;input&gt; fields, when you submit a form through the FormData API you do not need to use the FileReader API also: files are automatically loaded and uploaded.
#+END_QUOTE

** Using Event Handlers

From the top of the page, just using / setting event handlers:

#+BEGIN_SRC rjsx
  function reqListener () {
    console.log(this.responseText);
  }

  var oReq = new XMLHttpRequest();

  // this sets the &#39;load&#39; event handler, which fires when the file is fully loaded.
  // I think this works for POST/PUT as well...
  oReq.addEventListener(&quot;load&quot;, reqListener);

  oReq.open(&quot;GET&quot;, &quot;http://www.example.org/example.txt&quot;);
  oReq.send();
#+END_SRC

There&#39;s a note [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Monitoring_progress][somewhere on the page]] saying something about ~progress~ event handlers needing to be set before the ~.open~ call.

This would load up all the event handlers for XMLHttpRequest:

#+BEGIN_SRC rjsx
  let oReq = new XMLHttpRequest();

  oReq.addEventListener(&quot;progress&quot;, updateProgress);
  oReq.addEventListener(&quot;load&quot;, transferComplete);
  oReq.addEventListener(&quot;error&quot;, transferFailed);
  oReq.addEventListener(&quot;abort&quot;, transferCanceled);

  oReq.open();
#+END_SRC

** Progress Indication

The ~progress~ event handler takes in the progress event, which is defined at [[https://xhr.spec.whatwg.org/#interface-progressevent][WhatWG Progress Event specification]]. It has 3 attributes:

- ~lengthComputable~ [boolean] whether the length of the object is known
- ~loaded~ [number] how much has loaded so far
- ~total~ [number] how much there is to load

So progress can be calculated by:

#+BEGIN_SRC rjsx
  handleProgress = event =&gt; {
      let progress = 0
      if (event.total !== 0) {
          progress = event.loaded / event.total
      }
      const percentCompleted = progress * 100
      this,setState({ progress, percentCompleted })
  }

  handleLoaded = event =&gt; {
      this.setState({ progress: 1, percentCompleted: 100, loaded: true })
  }

  // ...

  request = () =&gt; {

      const req = new XMLHttpRequest()

      req.addEventListener(&#39;progress&#39;, this.handleProgress)
      req.addEventListener(&#39;load&#39;, this.handleLoaded)

      // ... etc
  }
#+END_SRC
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2012/12/code-as-literature-software-dev-as-communication.org</id>
      <updated>2018-12-12T22:58:01-06:00</updated>
      <title>code as literature, software dev as communication</title>
      <content>* code as literature, software dev as communication

- date: 2012-12-05 05:02:50
- categories: [swaac]
- tags: [communication]

Kind of a random bit of monologue from an IRC channel, but I thought it might be interesting to save and think about sometime in the future.

#+begin_quote
    my very young dev coworker gave me an enourmous compliment today.
    
    he&#39;s all of 25, shithot developer, but also still young and naive.
    
    anyway, i had written a little script to do something we needed,
       and he said it was a masterwork and the best bit of code he&#39;s
       seen from our group
       
    i was like &quot;what? why?&quot;
    
    he said &quot;these are the best comments in code i&#39;ve ever seen. and
       the code is neat and clean&quot;
       
    i kind of had to struggle to take the compliment

    i tell this not to say &quot;oh tamara, you&#39;re so great&quot;
    
    i&#39;m not
    
    i&#39;m probably better than mediocre
    
    but i&#39;m not great
    
    i say this because, in his way, he gave a very depressing,
       but accurate account of our software
       
    what&#39;s sort of funny about this, too, is that the majority
       of the script was repurposed from something he wrote,
       that i tore out of the rakefile to make a stand-alone
       script
       
    what exactly did i do?
    
    wrapped it in a class, connected database
       records to it, and added some defensiveness to it
       
    and the comments i wrote were telling about the things i
       found while writing that and why i chose to do it the way
       i did

    then tonite i was thinking about this

    /code is literature/
    
    (not literate programming, that&#39;s something else)
       [though related]

    code is a message, a story:
    - it&#39;s not really about telling the computer what to do
    - it&#39;s about telling *someone else* what the computer is *doing*
    
    and i find this further deepens my understanding in the sense
       of software dev as a craft

    not just syntax, variables, etc; not just algorithms and data;
    but a way of telling other people how to solve problems

    i&#39;ve been thinking about this a lot lately
    
    it might be because of my elder status/position
    and it&#39;s not just a little of the crap education i&#39;m seeing
       people give themselves, and places that they go to for help
       only answering rather mudnane details about sytax errors
    
    we learned because we taught ourselves
    
    but we also learned because we were fascinated both by the
       technology itself, and not a little by learning itself

    i was talking to someone, somewhere, about how people are
       picking up programming
    
    like, it&#39;s the &quot;hot new must-have skill for everyone&quot;;
    a life-skill, if you will

    i don&#39;t necessarily disagree with that?

    and i think there&#39;s all sorts of levels, just like, say cooking

    but imagine if you learned how to cook the way programming
       is being taught
    - you might be able to survive
    - but i don&#39;t think it would be very fun
    - and know it wouldn&#39;t be worthy, really, of being called a craft

    your scrambled eggs don&#39;t work, so you send in a message
       with a photo of the results in your pan to a
       &quot;eggs cooking mailing list&quot;
       
    and wow, you can&#39;t *eat* until you get it right
    
    part of the problem, maybe a great deal of the problem, is
       that there aren&#39;t places really to learn the craft of it

    and it is probably different now that it was for us
    
    i mean, yeah, i went to uni, you didn&#39;t, but i think the
       learning for each of us was highly self-directed

    i was writing basic code since 7th grade

    i think for many people that i&#39;ve come across that are
       learning, (maybe espcially php and html) is that
       they are looking at it sort of desperately
       as some way of making money?
       
    and i think that this slams against my privilege hard
    because i never went at this as a way to make money
    i *do* make money at it
    
    i *ask* for money when i do things for someone
    but it&#39;s not like i have to learn to do this so i can make money
    and that puts me in a position of privilege, surely

    yet i also see this as, again, a matter of craftsmanship
    and that acquiring the ability to make money requires
       a sense of ownership of the skills, knowledge, and tools
       to solve problems, solve *other* people&#39;s problems,
       by writing software

    and concomittant with that is the ability to *communicate*
       *effectively* what you are telling the computer to do,
       *to someone else*

    idk

    i think i&#39;ve ended up at the beginning; 
    or beginned up at the end

    i *think* this is what has me so excited,
    so *interested* in continuing to learn,
    to work, and to teach, software development.
#+end_quote
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-01-polyfill-for-custom-event.org</id>
      <updated>2018-12-01T11:00:30-06:00</updated>
      <title>Polyfill for JavaScript&#39;s ~CustomEvent~ constructor</title>
      <content>* Polyfill for JavaScript&#39;s ~CustomEvent~ constructor

I had a project I needed to use a non-DOM event with, where a couple of React components were signaling a change in state, and they didn&#39;t share any context.

I could have used Redux, but that seemed like heavy lifting for only using an event, so I dug into using custom events.

The downside is that only since version 9 has Internet Explorer supported some form of ~CustomEvent~, and it is not the same. I was looking at other libraries until I happened on the polyfill provided by Mozilla at [[https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill][CustomEvent Polyfill on MDN]]. I copied that into a file and import it where I want to dispatch a custom event.

I attach the listeners in the various React components&#39; ~componentDidMount~ at the ~window~ DOM node as common ancestor for all components on the page, and remove them in ~componentWillUnmount~.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-29-thoughts-on-writing-good-tests.org</id>
      <updated>2018-11-29T14:54:22-06:00</updated>
      <title>Thoughts on learning to write good tests                          :testing:</title>
      <content>* Thoughts on learning to write good tests                          :testing:
  :PROPERTIES:
  :CAPTURE_DATE: [2018-11-29 Thu]
  :KEYWORDS: testing, learning, good tests
  :END:

- Time-stamp: &lt;2018-11-29 14:54:22 tamara&gt;
- current_date: [2018-11-29 Thu]
- keywords: testing, learning


Someone asked this question on the WWCodeTC #learning-to-code Slack channel the other day:

#+BEGIN_QUOTE
OP: I asked this in another group and I got a million answers but I&#39;ll ask here: anyone have a good way to learn how to write good tests? I&#39;ve listened to a test driven development course on lynda.com. I don&#39;t really have a specific question per se, just looking for a pointer to good testing practices beyond the basics.
#+END_QUOTE


My response:

#+BEGIN_QUOTE

everyone says testing is Super Important, but no one seems to definitively answer that question. the obvious answer is &quot;write a lot of bad tests&quot; but that is oh so dismal.

the stuff i learned from, ages and ages ago, is probably no longer in print, but look for these authors:

- jerry weinberg
- boris beizer
- larry constantine
- glen meyers
- bob grady

I met and worked these guys aeons ago, all really amazing authors

look up software quality institute,  I&#39;m not sure if it&#39;s still going

most all classes and tutorials i see are about how to write tests in a framework, which is good, but like most software education, never really gets at how to do design of software for a purpose and tests do need to fit a purpose

I&#39;ll just throw out a few questions you may want to try on as heuristics:

- what are the most critical actions or features users need to function impeccably
- what features are showing the most failures in use
- if a feature is unclear in how to use, how many ways can it be used or abused
- how can i break this?


another way to approach it is from the test driven side, and write tests that describe exactly what the feature does, does not do, responds to random input, responds to incorrect input, etc, so you completely spec the feature before any feature code is written.

#+END_QUOTE
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-23-til-setting-window-location-in-jest-tests.org</id>
      <updated>2018-11-23T16:44:09-06:00</updated>
      <title>TIL: Setting `window.location` during Jest testing</title>
      <content>* TIL: Setting `window.location` during Jest testing
  :PROPERTIES:
  :CAPTURE_DATE: 2018-11-23
  :KEYWORDS: jest, window.location, testing
  :END:

- Time-stamp: &lt;2018-11-23 16:44:09 tamara&gt;
- capture_date: [2018-11-23 Fri]
- keywords: jest, window.location, testing


By default, the `window.location` properties are read-only. But for some tests, I need these to be specific, set values.

In [[https://github.com/facebook/jest/issues/890][Jest issue 890]] over on github, there is a long discussion about this, and ways people have solved this issue for themselves.

The first one I happened upon is one used by Facebook engineers:

I needed to modify `pathname` property only for my test:
#+BEGIN_SRC rjsx
  Object.defineProperties(window.location, &#39;pathname&#39;, {
      writeable: true,
      value: defaultPathname
  })
#+END_SRC



Here&#39;s a more universal one:

#+BEGIN_SRC rjsx
  const setURL = (url) =&gt; {
    const parser = document.createElement(&#39;a&#39;);
    parser.href = url;
    [&#39;href&#39;, &#39;protocol&#39;, &#39;host&#39;, &#39;hostname&#39;, &#39;origin&#39;, &#39;port&#39;, &#39;pathname&#39;, &#39;search&#39;, &#39;hash&#39;].forEach(prop =&gt; {
      Object.defineProperty(window.location, prop, {
        value: parser[prop],
        writable: true,
      });
    });
  };
#+END_SRC

The sneaky trick of creating a wee little parser out of a document anchor element is pretty dang cool, too.

Later in the issue page, there&#39;s some discussion about how this might break in future versions of `jsdom`, and another way to set the location property, by modifying the history on `window`:

#+name: package.json
#+begin_src js
  {
      &quot;testUrl&quot;: &quot;https://somehost.com/some/path/test.html&quot;
  }
#+end_src

And in your test setup:
#+BEGIN_SRC rjsx
  window.history.pushState({}, &#39;Test Title&#39;, &#39;/another/path/test.html?query=true&#39;);
#+END_SRC

This is from the [[https://www.ryandoll.com/post/2018/3/29/jest-and-url-mocking][Jest and URL testing]] by Ryan Doll.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-20-til-input-file-has-accepts-attribute.org</id>
      <updated>2018-11-20T00:30:53-06:00</updated>
      <title>TIL: The ~input[type=file]~ element has an ~accepts~ attribute</title>
      <content>* TIL: The ~input[type=file]~ element has an ~accepts~ attribute

- Time-stamp: &lt;2018-11-20 00:30:53 tamara&gt;
- capture date: [2018-11-20 Tue]
- keywords: html, input, file, pass list

The ~input[type=file]~ element has an attribute, ~accepts~ that provides a pass filter for the types of files that are accepted in the input file field. See [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept][the MDN documentation for input accept]] for details.

This means, if I have a set of allowed extensions, I can put them in the ~accepts~ field to limit what the user can select:

#+BEGIN_SRC html
  &lt;!-- to accept all image types --&gt;
  &lt;input type=&quot;file&quot; name=&quot;image_file&quot; accept=&quot;image/*&quot;&gt;

  &lt;!-- to accept various file extensions --&gt;
  &lt;input type=&quot;file&quot; name=&quot;data&quot; accept=&quot;.jpg,.jpeg,.gif,.png,.bmp,.pdf,.txt,.md,.markdown&quot;&gt;
#+END_SRC

With a little more work, if there is a pass list of extensions on the server, I could pass it down to the client via the ~gon~ object where a React client could pick it up.


#+name: config/constants.rb
#+begin_src ruby
  module App
    module CONSTANTS
      UPLOAD_PASS_LIST = %w[
        jpg
        jpeg
        png
        gif
        bmp
        pdf
        text
        txt
        markdown
        md
        csv
        xls
        xlsx
        doc
        docx
      ].freeze
    end
  end
#+end_src

#+name: app/controllers/application_controller
#+begin_src ruby
  before_action :export_upload_pass_list

  # ...

  def export_upload_pass_list
    gon.push(upload_pass_list: App::CONSTANTS::UPLOAD_PASS_LIST)
  end
#+end_src

#+name: upload_file_form.js
#+begin_src jsx

  accepts_list = () =&gt; {
      return gon.upload_pass_list.map(ext =&gt; `.${ext}`).join(&quot;,&quot;)
  }

  render() {
      return (
          &lt;input
            type=&quot;file&quot;
            name=&quot;data&quot;
            accepts={this.accepts_list()}
            onChange={this.fileChange}
          /&gt;
      )
  }

#+end_src
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/11/2018-11-14-video-of-storybook-for-react-talk-from-october-2018.org</id>
      <updated>2018-11-14T21:08:10-06:00</updated>
      <title>Video of Storybook for React talk from October 2018</title>
      <content>* Video of Storybook for React talk from October 2018

  - Time-stamp: &lt;2018-11-06 20:08:58 tamara.temple&gt;
  - capture date: [2018-11-06 Tue 19:59]
  - keywords: react, storybook, presentation

** Intro

   In October 2018, I gave a talk / tutorial on [[https://storybook.js.org/basics/introduction/][Storybook]], an environment for developing visual components, and how I&#39;m using it in developing React components at work, for [[https://twitter.com/ReactMpls][React Minneapolis meetup]].

** Video

   The talk was recorded, and video is up at [[https://youtu.be/9B-IB2U3qSI][yahoo]].

#+BEGIN_EXPORT html
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9B-IB2U3qSI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
#+END_EXPORT
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
