<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2019-04-05T01:54:31-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/04/2019-04-05-common-error-not-clearing-selected-value.org</id>
      <updated>2019-04-05T01:54:31-05:00</updated>
      <title>Fixing a common problem: not clearing a selected option before setting a new selected option</title>
      <content>* Fixing a common problem: not clearing a selected option before setting a new selected option
  :PROPERTIES:
  :KEYWORDS: javascript, jquery
  :CAPTURE_DATE: Fri Apr  5 01:11:42 2019
  :LAST_UPDATE: Time-stamp: &lt;2019-04-05 01:54:31 tamara&gt;
  :END:

- keywords: javascript, jquery
- capture date: Fri Apr  5 01:11:42 2019
- last updated: Time-stamp: &lt;2019-04-05 01:54:31 tamara&gt;

** Intro

This was a problem that our customers found (OOPS! :( ) that caused the wrong itme to be sent up to the server. What was most interesting about this is the way it presented itself was it was only failing in Safari on macOS. It worked as &quot;expected&quot; on both Chrome and Firefox.

** The problem

The problem was that when the user selected and option button, the app was using jQuery to change a hidden select tag by marking the option `selected`. The issue was the originally selected item was not cleared.

So in the case of Chrome and Firefox, in particular, they used the *first* selected option, while Safari used the *last* selected option. Neither are particularly right or wrong, and open to interpretation.

** The solution

The answer is that before setting an item &quot;selected&quot;, remove all the existing &quot;selected&quot; options. Theoretically there should be only one, however unless there&#39;s some ungodly number of options that it might affect perceived performance, it&#39;s easiest to just clear every option, first.

** Some code

THis is a tiny bit of jQuery that implemented the fix:

#+BEGIN_SRC js
  function setTaskType(type) {
      // missing this caused the problem
      $(&#39;#task_task_type_id option&#39;)
	  .attr(&#39;selected&#39;, false);

      // this was the original
      $(&#39;#task_task_type_id option&#39;)
	  .filter(function() { return $.trim( $(this).text() ) == type; })
	  .attr(&#39;selected&#39;,true);
  }
#+END_SRC

** Other thoughts

I&#39;m calling this a &quot;common error&quot; because I&#39;ve seen this exact problem crop up in other circumstances, perhaps a dozen times. If *I&#39;ve* seen it that often, and I haven&#39;t been writing a lot of JS for very long (a handful of years), it&#39;s probably something that happens more often. It&#39;s easy to forget it. It&#39;s even easier to neglect to test this, especially if it looks like it&#39;s working on one browser.

I think, in actuality, if this feature had been tested by pressing random buttons, in different orders, and selecting different options more than once, this error might have shown up a lot earlier, and on all browsers, too. That it showed up in the customers&#39; world is a let down. That it took one line to fix was pure luck.

#+BEGIN_COMMENT
Local Variables:
time-stamp-count: 2
time-stamp-line-limit: 20
End:
#+END_COMMENT
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/12/2018-12-12-tenets-of-toast-and-tech.org</id>
      <updated>2019-04-05T01:09:23-05:00</updated>
      <title>The Tenets of Toast and Tech</title>
      <content>* The Tenets of Toast and Tech
  :PROPERTIES:
  :CAPTURE_DATE: [2018-12-12 Wed]
  :last_update: Time-stamp: &lt;2019-04-05 01:09:23 tamara&gt;
  :END:

  - last_updated: Time-stamp: &lt;2019-04-05 01:09:23 tamara&gt;
  - keywords: Learning Space, Toast and Tech
  - capture date: [2018-12-12 Wed]

  As some of you following know, I&#39;ve led this thing on Tuesday nights called &quot;Toast &amp; Tech&quot; for about 3 years [starting in the Autumn of 2015], nominally under the organization at .@GDImpls, the Minneapolis chapter of .@girldevelopit.

  I have left that organization, but I want to leave behind something for those involved in T&amp;T, and for those looking to make a space for learning that it inclusive

** The Tenets of Toast and Tech:

   - make *everyone* welcome, enthusiastically
   - make *all* questions welcome, enthusiastically
   - everyone is learning, everyone is teaching
   - there is no single path, there are as many paths as people attending, as many paths as needed
   - you don&#39;t need a project or tech work to attend, just come
   - you don&#39;t need any experience to attend, just come
   - support everyone who shows up
   - Make it safe to learn, safe to ask questions, safe to show up.

   Possibly the *most* important tenet of all: #ToastAndTech can happen *anywhere*, run by *anyone*; all it takes is letting folks know about it, and showing up to hold the space.

   #CauseAScene
   #KeepLearning
   #HappyToast

   [[./kawaii-toast.png][happy toast]]

   [[https://twitter.com/i/moments/1073061297200267265][moment on twitter]]


   #+BEGIN_COMMENT
   Local Variables:
   time-stamp-count: 2
   time-stamp-line-limit: 20
   End:
   #+END_COMMENT
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/04/2019-04-05-til-mounting-standalone-react-client-as-a-rails-react_component_works.org</id>
      <updated>2019-04-05T00:59:22-05:00</updated>
      <title>TIL: mounting stand-alone react client as a react_component in react-rails :rails:react:</title>
      <content>#+COMMENT -*- time-stamp-line-limit: 12; time-stamp-count: 2 -*-
* TIL: mounting stand-alone react client as a react_component in react-rails :rails:react:
  :PROPERTIES:
  :CAPTURE_DATE: [2019-04-05 Fri 00:40]
  :last_update: Time-stamp: &lt;2019-04-05 00:59:22 tamara&gt;
  :END:
  :LOGBOOK:
  CLOCK: [2019-04-05 Fri 00:41]--[2019-04-05 Fri 00:50] =&gt;  0:09
  :END:

  - last updated: Time-stamp: &lt;2019-04-05 00:59:22 tamara&gt;
  - capture date: [2019-04-05 Fri 00:40]
  - keywords: react-rails, rails, react

  This should have been obvious, but for some reason seemed like it was the &quot;wrong&quot; way to do this.

  We have a product that we&#39;re converting slowly to react-based components. One of the central philosophies has been to build towards a standalone react client, and move the rails app to be more strictly an API provider.

  I started out using the standard ~ReactDom~ style of mounting the application to the page. This has worked well so far, until we ran into a strange issue.

  The library ~styled-components~ has been something we&#39;ve adopted for putting our CSS in JS. However it has a problem: if multiple copies are loaded on the page in different bundles, it gets confused and the styles seem to go missing.

  My first reaction was to remove all the ~styled-components~ and go with inline style objects instead.

  However, my colleague pointed out that we could *also* just build one bundle which would keep the issue at bay.

  I ran an experiment to do this, and it worked. The essential parts are:

  1. Create a new component, in my case I named it ~ReactClient~, in the ~app/javascript/components/~ directory.
     - the component essentially just imports the ~App~ and renders it.
  2. Change the layout where you&#39;re loading the app to instead issue and ERB call to ~react_component~ that calls ~ReactClient~, possibly adding props options and HTML options.
  3. Remove the ~webpacker~ packs the build the client.

  This worked really well, with the caveat that the application bundle is rather large since it now contains everything.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/04/2019-04-05-link-how-to-access-production-data-in-rails-migrations.org</id>
      <updated>2019-04-05T00:56:37-05:00</updated>
      <title>Link: [[https://www.gregnavis.com/articles/how-to-access-production-data-in-rails-migrations.html][How to Access Production Data in Rails Migrations]] :rails:migrations:data:</title>
      <content>#+COMMENT -*- time-stamp-line-limit: 12; time-stamp-count: 2 -*-
* Link: [[https://www.gregnavis.com/articles/how-to-access-production-data-in-rails-migrations.html][How to Access Production Data in Rails Migrations]] :rails:migrations:data:
     :PROPERTIES:
     :CAPTURE_DATE: [2019-04-05 Fri 00:35]
     :last_update: Time-stamp: &lt;2019-04-05 00:56:37 tamara&gt;
     :END:

     - last update: Time-stamp: &lt;2019-04-05 00:56:37 tamara&gt;
     - keywords: rails, migrations, data
     - capture date: [2019-04-05 Fri 00:35]

     This article represents standard practice when you have to access actual data in the database (i.e. production) when running a migration. The example they use of adding a slug is pretty straight-forward. Beware, though, when modifying a table that has a huge number of records as this will effectively lock out the table while the migration is running. If you do go this route, better to schedule the down time.

     Of particular importance is to create the ActiveRecord models in the migration for the tables being modified. Do *not* use the actual models to avoid callbacks, validations, and the like.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/03/2019-03-07-til-fixing-a-capybara-problem-scrolling-submit-into-view-on-a-modal.org</id>
      <updated>2019-03-06T18:44:57-06:00</updated>
      <title>TIL: Fixing a Capybara Problem Scrolling the Submit Button Into View on a Modal Form Test</title>
      <content>#+COMMENT -*- time-stamp-line-limit: 12; time-stamp-count: 2 -*-
* TIL: Fixing a Capybara Problem Scrolling the Submit Button Into View on a Modal Form Test
  :PROPERTIES:
  :LAST_UPDATE: Time-stamp: &lt;2019-03-06 18:44:57 tamara&gt;
  :CAPTURE_DATE: [2019-03-06 Wed]
  :KEYWORDS: testing, capybara, scrolling, modal
  :END:

  - last_update: Time-stamp: &lt;2019-03-06 18:44:57 tamara&gt;
  - capture_date: [2019-03-06 Wed]
  - keywords: testing, capybara, scrolling, modal

** Background

   In [[https://www.kickserv.com/][the product I work on]], we have a form to let a user create a new customer during the editing of a job. This form is quite long. In the test, the only required field, the Customer&#39;s name, is filled in, and the new customer modal form is submitted.

** Problem

   Since the form is so long, the submit button is not visible on the page, so [[http://teamcapybara.github.io/capybara/][Capybara]] cannot find it to click on it.

** Solution

   Scroll the modal so the submit button comes into view.

   If you execute the following line in a Capybara test:

   #+BEGIN_SRC ruby
     page.execute_script &quot;window.scrollBy(0,10000)&quot;
   #+END_SRC

   it will scroll the window down, however, the modal isn&#39;t really sitting inside the window. It&#39;s definitely part of the DOM, but we need to scroll the modal itself.

   So we grab the *modal DOM element* and tell it to scroll down:

   #+BEGIN_SRC ruby
     page.execute_script &quot;document.getElementById(&#39;new-customer-modal&#39;).scroll(0, 10000)&quot;
   #+END_SRC

   which makes the submit button come into view, and then the Capybara ~.click~ method works.

** Caveats

   This works when you&#39;re using Chrome (visible or headless). It does *not* work in IE11 or lower, nor does it work in Safari mobile.

   The same issue can arise when using [[http://nightwatchjs.org/][NightWatch.js]], with a similar solution to scroll the modal rather than the window.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2019/01/2019-01-21-TIL-adding-a-new-html-tag-when-creating-a-react-portal.org</id>
      <updated>2019-02-24T17:52:08-06:00</updated>
      <title>TIL: Adding a new HTML tag name when creating a React Portal</title>
      <content>* TIL: Adding a new HTML tag name when creating a React Portal
  :PROPERTIES:
  :KEYWORDS: react, portal, html, tag names
  :CAPTURE_DATE: Mon Jan 21 16:49:12 2019
  :LAST_UPDATE: Time-stamp: &lt;2019-01-21 17:06:24 tamara.temple&gt;
  :END:

- keywords: react, portal, html, tag names
- capture date: Mon Jan 21 16:49:12 2019
- last updated: Time-stamp: &lt;2019-01-21 17:06:24 tamara.temple&gt;

I was working on a replacement for the ~Modal~ component in ~react-bootstrap~ since it is clear the library is moving away from where we want to be with our app.

While doing so, I noticed it was difficult to find the Portal that react creates in the DOM tree, since I was using just a regular old ~&lt;div&gt;~ element. Given in HTML5 you can invent your own HTML tag names (which Web Components and CSS Components take advantage of as well).

So I called the created element ~&lt;modal-portal&gt;~ and it&#39;s quite visible when it shows up in the DOM, and it makes an easy grab handle for testing.

In my ~ModalPortal~ component, the code looks like this:

#+name: ModalPortal.js
#+begin_src rjsx
    constructor(props) {
      super(props)
      this.el = document.createElement(&quot;modal-portal&quot;)
      this.modalRoot = document.querySelector(this.props.selector || &quot;body&quot;)
    }
#+end_src

In the DOM, the component looks like this:

#+BEGIN_SRC html
  &lt;modal-portal&gt;
    &lt;div class=&quot;modal fade in&quot; style=&quot;display: block;&quot;&gt;...&lt;/div&gt;
  &lt;/modal-portal&gt;
#+END_SRC


#+BEGIN_COMMENT
Local Variables:
time-stamp-count: 2
time-stamp-line-limit: 20
End:
#+END_COMMENT
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2018/10/link-ARIA-is-spackle-not-rebar.org</id>
      <updated>2019-02-24T17:49:10-06:00</updated>
      <title>LINK: [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]]</title>
      <content>* LINK: [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]]

- Time-stamp: &lt;2018-11-04 10:02:04 tamara&gt;
- published date: [2018-11-04 Sun]
- keywords: ARIA, accessibility, a11y, link

There&#39;s an excellent article over at [[https://css-tricks.com/][CSS Tricks]] by Eric Bailey, [[https://css-tricks.com/aria-spackle-not-rebar/][ARIA is Spackle, Not Rebar]], written November 2017, that lays out the reasons when to use ARIA ([[https://www.w3.org/WAI/standards-guidelines/aria/][Accessible Rich Internet Applications Suite]]) directly, and most importantly in my view, when _not_ to use it explicitly (tl;dr: most of the time).

I think this sums up the intent nicely:

&gt; Before considering other options, start with markup that semantically describes the content it is wrapping.

And while that is definitely true, it really does help to understand what ARIA is for and how it works. So while we&#39;re on the subject, I want to point out the excellent [[https://frontendmasters.com][Frontend Masters]] course: [[https://frontendmasters.com/courses/web-accessibility/][Website Accessibility]] by Jon Kuperman.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/07/playing-games-with-the-checked-pseudo-selector.org</id>
      <updated>2019-02-24T17:49:10-06:00</updated>
      <title>Playing games with the :checked pseudo-selector</title>
      <content>#+TITLE: Playing games with the :checked pseudo-selector
#+DATE: 2017-07-06 01:25

- keywords: css, checked
- source: https://codepen.io/tamouse/pen/YQjVNb?editors=1100

* Playing games with the :checked pseudo-selector

I&#39;m not sure what made me think of this, but I got a wild hair and
thought I&#39;d try it out.

The =:checked= CSS pseudo-selector lets you select a /checked/ checkbox
or radio button. The question I wondered, would this be a cheap-azz way
of making a sliding sidebar? And the answer is, yes it could.

Over at [[file:%7B%7Bpage.source%7D%7D][codepen]] I left a pen showing
just that:

#+BEGIN_HTML
  &lt;iframe height=&quot;265&quot; scrolling=&quot;no&quot; title=&quot;what can you do with :checked?&quot; src=&quot;//codepen.io/tamouse/embed/YQjVNb/?height=265&amp;amp;theme-id=0&amp;amp;default-tab=result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;
See the Pen what can you do with :checked? by Tamara Temple (@tamouse)
on CodePen.
  &lt;/iframe&gt;
#+END_HTML

Some of the interesting bits:

- The body is set to =display: flex= and =flex-direction: row=, which
  would normally put the 3 major body parts, =input=, =aside=, and
  =article= horizontally, but...

- The input checkbox is positioned absolute taking it out of the flex
  flow, so only the =aside= and =article= are flexed

- After setting everything up for the &quot;normal&quot; state, with the checkbox
  /un/checked, and the sidebar /hidden/, I added the last CSS rule to
  display the sidebar when the input checkbox is checked.

*** normal state

#+BEGIN_SRC css
    .sidebar {
      width: 20px;
      background: tomato;
      padding-top: 40px;
      &gt; * {
        display: none;
      }
    }
#+END_SRC

*** checked state

#+BEGIN_SRC css
    input.sidebar-toggle:checked ~ .sidebar {
        width: 200px;
      &gt; * {
        display: inherit;
      }
    }
#+END_SRC

Of course, this could be taken in all sorts of directions, but I wanted
to try this out to see if it works.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/04/link-decorating-activerecord.org</id>
      <updated>2019-02-24T17:49:10-06:00</updated>
      <title>Link: Decorating ActiveRecord</title>
      <content>* Link: Decorating ActiveRecord
  :PROPERTIES:
  :CUSTOM_ID: link-decorating-activerecord
  :END:

- published date: 2017-04-06 23:01
- keywords: [&quot;activerecord&quot;, &quot;decorators&quot;, &quot;links&quot;, &quot;rails&quot;, &quot;tl-dr&quot;]
- source: https://robots.thoughtbot.com/decorating-activerecord

This came across my path this week: [[https://robots.thoughtbot.com/authors/joel-quenneville][Joël Quenneville]]&#39;s article, [[file:%7B%7B%20page.source%20%7D%7D][Decorating ActiveRecord]], which outlines some hazards when you go about decorating ActiveRecord models.

Do read the article, it&#39;s good.

--------------

Here&#39;s the tl;dr for my memory:

#+BEGIN_QUOTE
  If you&#39;re decorating an ActiveRecord or ActiveModel object in Rails, you probably want to define the following to ensure the decorator works the way you expect instead of silently delegating to the underlying object:
#+END_QUOTE

#+BEGIN_HTML
  &lt;blockquote&gt;
#+END_HTML

```ruby linenos class Profile &lt; SimpleDelegator extend ActiveModel::Naming

def to_model self end end ```

#+BEGIN_HTML
  &lt;/blockquote&gt;
#+END_HTML
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/02/gitlab-database-outage-post-mortem.org</id>
      <updated>2019-02-24T17:49:10-06:00</updated>
      <title>Gitlab Database Outage Post-Mortem</title>
      <content>* Gitlab Database Outage Post-Mortem
  :PROPERTIES:
  :CUSTOM_ID: gitlab-database-outage-post-mortem
  :END:

- published date: 2017-02-11 01:54
- keywords: [&quot;database-outage&quot;, &quot;devops&quot;, &quot;gitlab&quot;, &quot;post-mortem&quot;]
- source: https://about.gitlab.com/2017/02/10/postmortem-of-database-outage-of-january-31/

Back at the end of January 2017, git SaaS provider [[https://gitlab.com][Gitlab]] reported a disaster of epic proportions:

#+BEGIN_QUOTE
  On January 31st 2017, we experienced a major service outage for one of our products, the online service GitLab.com. The outage was caused by an accidental removal of data from our primary database server.
#+END_QUOTE

#+BEGIN_QUOTE
  This incident caused the GitLab.com service to be unavailable for many hours. We also lost some production data that we were eventually unable to recover. Specifically, we lost modifications to database data such as projects, comments, user accounts, issues and snippets, that took place between 17:20 and 00:00 UTC on January 31. Our best estimate is that it affected roughly 5,000 projects, 5,000 comments and 700 new user accounts. Code repositories or wikis hosted on GitLab.com were unavailable during the outage, but were not affected by the data loss. GitLab Enterprise customers, GitHost customers, and self-hosted GitLab CE users were not affected by the outage, or the data loss.
#+END_QUOTE

They had destroyed the database holding all their repository information, and then could not find any viable backups.

*Today, 11 February 2017,* they released a [[file:%7B%7B%20page.source%20%7D%7D][post-mortem]] of the situation, providing something few companies have /ever/ done: transparency and openness into a major devops disaster so that /everyone/ can learn.

They list several items in the Root Cause Analysis section, and provide a list of mitigation and recovery improvements now underway.

** Major kudos to Gitlab!
   :PROPERTIES:
   :CUSTOM_ID: major-kudos-to-gitlab
   :END:
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
