<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2024-09-05T10:02:05-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2024/2024-09-05-writing-exclusion-files-for-rsync.md</id>
      <updated>2024-09-05T10:02:05-05:00</updated>
      <title>2024-09-05-writing-exclusion-files-for-rsync</title>
      <content>---
layout: post
title: &quot;Writing an exclusions file for rsync&quot;
date: 2024-09-05 10:00
categories: [&quot;CLI&quot;]
tags: [&quot;rsync&quot;, &quot;exclusions&quot;]

To create an exclusions file for `rsync` that excludes several directories across multiple levels of your directory tree, you&#39;ll need to list each pattern you want to exclude in the file. The patterns should match the directories or files you want to exclude, and you can use relative paths or wildcards to specify patterns effectively.

### Steps to Create an Exclusions File

1. **Create the Exclusions File**:

   You can create an exclusions file (e.g., `rsync-exclude.txt`) using a text editor. Each line in this file should represent a pattern or directory to exclude.

   **Example of `rsync-exclude.txt`:**
   ```
   # Exclude directories at any level
   directory1/
   directory2/

   # Exclude specific subdirectories
   subdir1/
   subdir2/

   # Exclude all .log files in any directory
   *.log

   # Exclude all &#39;temp&#39; directories
   temp/

   # Exclude a directory pattern in any subdirectory
   */cache/
   ```

   - **`directory1/` and `directory2/`**: Exclude directories named `directory1` and `directory2` at any level.
   - **`subdir1/` and `subdir2/`**: Exclude `subdir1` and `subdir2` at any level.
   - **`*.log`**: Exclude all `.log` files in any directory.
   - **`temp/`**: Exclude all directories named `temp`.
   - **`*/cache/`**: Exclude all directories named `cache` in any subdirectory.

2. **Use the Exclusions File with `rsync`**:

   When running the `rsync` command, use the `--exclude-from` option to specify your exclusions file:

   ```bash
   rsync -av --delete --exclude-from=&#39;/path/to/rsync-exclude.txt&#39; /source/directory/ /destination/directory/
   ```

   - **`-a`**: Archive mode (preserves symbolic links, permissions, timestamps, etc.).
   - **`-v`**: Verbose mode (provides detailed output of what `rsync` is doing).
   - **`--delete`**: Deletes files in the destination that are not present in the source.
   - **`--exclude-from=&#39;/path/to/rsync-exclude.txt&#39;`**: Specifies the file containing patterns to exclude.

### Writing Effective Patterns for `rsync`

- **Trailing Slash**: To exclude directories, include a trailing slash (e.g., `temp/`).
- **Wildcards**: Use `*` as a wildcard for any number of characters, `?` for a single character, and `**` for matching any directory level.
- **Relative Paths**: Patterns are relative to the source directory specified in the `rsync` command. Ensure your patterns match the layout and structure of your source directory.

### Example Exclusions for Specific Directories

If you have a source directory structure like:

```
/source/directory/
|-- dir1/
|   |-- subdirA/
|   `-- subdirB/
|-- dir2/
|   |-- subdirC/
|   `-- subdirD/
`-- logs/
    |-- error.log
    `-- access.log
```

And you want to exclude `subdirB` in any directory, `logs` directory, and all `.log` files, your `rsync-exclude.txt` would look like:

```plaintext
subdirB/
logs/
*.log
```

Using this file with `rsync` will exclude these directories and files from being synced to the destination.

By defining patterns clearly in your exclusions file, you can manage complex directory structures and exclusions efficiently with `rsync`.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2023/2023-06-09-make-git-ignore-local-changes-to-tracked-files.md</id>
      <updated>2024-07-01T01:19:11-05:00</updated>
      <title>2023-06-09-make-git-ignore-local-changes-to-tracked-files</title>
      <content># Make Git Ignore Local Changes to Tracked files

Source: https://practicalgit.com/blog/make-git-ignore-local-changes-to-tracked-files.html

Sometimes you want to change a tracked file so that you can run your project locally on your machine. This is typical of configuration files and templates. But you donâ€™t want to commit these files. One way is to discard these changes every time you are about to commit and redo them every time you pull from master. Another way is to stash them before you commit and reapply them after you pull.

But there is a better way! You can tell Git to ignore changes to this file:

```sh
git update-index --assume-unchanged &lt;file-to-ignore&gt;
```

Now you can go ahead and do whatever you want in that file and it will not show up as a changed file in git.

This will work unless that file is changed on the remote branch. In that case if you do a pull, you will get an error.

When that happens you need to tell Git to start caring about the file again, stash it, pull, apply your stashed changes, and tell Git to start ignoring the file again:

``` sh
# tell Git to stop ignoring this file
$ git update-index --no-assume-unchanged &lt;file-to-ignore&gt;

# stash your local changes to the file
$ git stash &lt;file-to-ignore&gt;

# Pull from remote
$ git pull

# Apply your stashed changes and resolve the possible conflict
$ git stash apply

# Now tell Git to ignore this file again
$ git update-index --assume-unchanged &lt;file-to-ignore&gt;
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2024/2024-06-29-removing-dsstore-from-aws-s3.org</id>
      <updated>2024-06-29T19:36:35-05:00</updated>
      <title>2024-06-29-removing-dsstore-from-aws-s3</title>
      <content>#+title: 2024 06 29 Removing .DS_Store From AWS S3

** Intro

Maybe this never happens to anyone else, but it seems like it&#39;s always happening to me.

I&#39;ll use the =aws s3 sync= command without thinking, and there will be a bunch of =.DS_Store= files littered down the folders on my mac. Aggravating!

I have a script that lists them in the =--exclude= option, but that option gets ignored if there is already a file that matches the pattern.

So what the juice?

** A long-ish command:

#+begin_src bash
aws s3 ls --recursive s3://bucket_name/path |\
    fgrep &#39;.DS_Store&#39; | \
    sed -e &#39;s/^.*path/s3:\/\/bucket_name/path/&#39; -e &#39;s/ /\\ /g&#39; | \
    xargs -n1 aws s3 rm
#+end_src

... and Bob&#39;s yer uncle.

No warrantees, your mileage will vary. If you end up deleting your bucket, I&#39;m sorry, but ...

** Okay, more explainenening

Let&#39;s start here:

#+begin_src bash
aws s3 ls --recursive s3://bucket_name/path
#+end_src

Substitute your bucket name, &#39;the-grippers-bucket&#39; for example, in place of &#39;bucket&#39;:

#+begin_src bash
aws s3 ls --recursive s3://the-grippers-bucket/path
#+end_src

Then, substitute the path where you want to start the search, &#39;last-ten/2024-05-01/11:00:00/&#39; for example, for &#39;path&#39;:

#+begin_src bash
aws s3 ls --recursive s3://the-grippers-bucket/last-ten/2024-05-01/11:00:00/
#+end_src

*** what do it do?

This gives you a list of all objects in that bucket and path.

Then we pipe that into:

** Only get the lines we&#39;re interested in

=fgrep= is a version of the =grep= command that doesn&#39;t use regular expressions in the pattern search. It&#39;s the same as saying =grep -F=, which you could also use.

So,

#+begin_src bash
fgrep &#39;.DS_Store&#39;
#+end_src

is going to pass through to =stdout= every line matching that string, which is the file name we&#39;re looking for.

If you have for some strange reason a match appearing on a line that doesn&#39;t have the exact match, maybe try this instead:

#+begin_src bash
grep &#39;/\.DS_Store$&#39;
#+end_src

which will, *for sure* only match lines /ending/ with =.DS_Store= which are the files we want to get rid of on S3.

** Then we need to munge things a bit

The third line we see our old friend =sed= which is our editing in line pal.

#+begin_src bash
sed -e &#39;s/^.*path/s3:\/\/bucket_name\/path&#39; -e &#39;s/ /\\ /g&#39;
#+end_src

You&#39;ll notice the lines coming through from the aws command have a bunch of info in front of the actual object name. We need just the object name. (There&#39;s likely an option to be brief, but I didn&#39;t look it up.) Anyway, the first =-e-= expression removes everything up to your path, and puts back the full bucket name and path so it&#39;s a valid S3 reference.

The second =-e= expression will /escape/ any spaces in the object name, should you be as poor as I am at making decent directory and file names.

The command becomes, based on your example,

#+begin_src bash
sed -e &#39;s/^.*last/s3:\/\/the-grippers-bucket\/last&#39; -e &#39;s/ /\\ /g&#39; # Note: you only have to specify enough path to match
#+end_src



** Our favourite worker, xargs

The last command in this pipe is =xargs= which is an amazing workhorse in *-nix. I didn&#39;t learn how to use it until I was a ways along in my career, so don&#39;t feel bad if you&#39;ve never heard of it either. But do look it up, it&#39;s awesome. (It&#39;s vaguely like using reduce in array filtering. Vaguely.)

#+begin_src bash
xargs -n1 aws s3 rm
#+end_src

So this is going to take the lines coming in the pipe from the =sed= command, taking each one individually (the =-n1= option), prepend =aws s3 rm= to the line, and then */execute/* that line in a subshell. How nifty is that?!

This is what I used to do before I learned =xargs=:

#+begin_src bash
sed -e &#39;s/^/aws s3 rm /&#39; | sh -xv
#+end_src

IDK, I like =xargs= better. :smile:

** The big pipe

So this is a deconstruction of that long pipe command above. I hope this is helpful. If you don&#39;t understand the commands, or what *-nix pipes are, or even the basics of command line usage, there&#39;s lots of documentation on that. You can learn it! Then write it up!
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2024/2024-05-31-how-to-force-restart-an-iphone.md</id>
      <updated>2024-06-23T16:05:31-05:00</updated>
      <title>2024-05-31-how-to-force-restart-an-iphone</title>
      <content># How to force restart an iPhone 11 Pro

Source: &lt;https://support.apple.com/guide/iphone/force-restart-iphone-iph8903c3ee6/ios&gt;

Turns out, it&#39;s sort of easy, if you can push the buttons in the exact right way.

I managed to set off the emergency call sequence that dialed 911, and everyone on my ICE list :facepalm: 

&gt; If iPhone isnâ€™t responding, and you canâ€™tÂ turn it off then on, try forcing it to restart.

1. Press and quickly release the volume up button.
2. Press and quickly release the volume down button.
3. Press and hold the side button.
4. When the Apple logo appears, release the side button.

![link text](../../images/iphone-reset-sequence.jpg)

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2023/2023-04-10-quick-start-for-take-home-tests.md</id>
      <updated>2023-04-11T14:36:45-05:00</updated>
      <title>2023-04-10-quick-start-for-take-home-tests</title>
      <content>---
title: &quot;Quick start for doing take home tests in Ruby and Rails&quot;
date: 2023-04-10T15:20
tags: [ruby,rails,interviews,take-home-tests,tips]
---

Having gone through a number of interviews this year and last, I have had to more than my share of take home tests for propective employers.

The take home test is typically couched as few requirements intended to show how you approach and solve a given problem. While it&#39;s not a truly valid representation of how you&#39;ll perform on the job, it&#39;s certainly a lot more accurate that timed over-the-shoulder programming, which seems to have replaced the dreaded white boarding coding exercises of the past. At least you get to use your own tools to build the response.

Ruby comes with the `bundler` gem, giving us the `bundle` command, with it set of subcommands which is a pretty common pattern in Ruby for command line tools. You&#39;re likely familiar with `bundle install` already,

Rails comes with an application generator, set off by the `rails new ...args`, showing the subcommand pattern already. The `rails new` command has a lot of options and it&#39;s not helpful to spend a lot of time reading up on them if you&#39;re only going to be building some backend features.

## A basic ruby setup ##

Running the command `bundle help gem` shows the options for building a skeleton gem, just like the ones we all bundle and use in our work. Here&#39;s a great start:

``` shell
bundle gem take_home_test -b -t minitest --ci=github --linter=rubocop 
```

The above creates a new directory called &quot;take_home_test&quot; and populates it with files and directories appropriate for building out an CLI app, Going through the options:

- `-b` - created and `exe/` directory and a stub file `exe/take_home_test`. This is the executable for the command line app.
- `t minitest` - sets up the gem to use minitest. You could also use `rspec` instead of minitest if you want.
- `--ci=github` - this is not required, but if you are using github to keep your take home test gem, might as well have it run the tests for you on push, too.
- `--linter=rubocop` - [Rubocop](https://rubocop.org/ &quot;The Ruby Linter/Formatter that Serves and Protects&quot;) is the more popular and agreed upon linter for Ruby. I prefer having it around, but it is optional

The output from the command looks like so (there may be some changes are time goes on):

``` text
Creating gem &#39;take_home_test&#39;...
Changelog enabled in config
rubocop is already configured, ignoring --linter flag.
RuboCop enabled in config
Initializing git repo in /Users/tamouse/tmp/take_home_test
      create  take_home_test/Gemfile
      create  take_home_test/lib/take_home_test.rb
      create  take_home_test/lib/take_home_test/version.rb
      create  take_home_test/sig/take_home_test.rbs
      create  take_home_test/take_home_test.gemspec
      create  take_home_test/Rakefile
      create  take_home_test/README.md
      create  take_home_test/bin/console
      create  take_home_test/bin/setup
      create  take_home_test/.gitignore
      create  take_home_test/test/test_helper.rb
      create  take_home_test/test/test_take_home_test.rb
      create  take_home_test/.github/workflows/main.yml
      create  take_home_test/CHANGELOG.md
      create  take_home_test/.rubocop.yml
      create  take_home_test/exe/take_home_test
```

If this is your first time running `bundle gem`, take some time to peruse the files to get familiar with them.

Before you can run `bundle install` to install the gems, you&#39;ll need to edit the `take_home_test.gemspec` file. You&#39;ll notice a number of &quot;TODO&quot;s. These need to be fixed before the `bundle install` command will work.

``` ruby
# frozen_string_literal: true

require_relative &quot;lib/take_home_test/version&quot;

Gem::Specification.new do |spec|
  spec.name = &quot;take_home_test&quot;
  spec.version = TakeHomeTest::VERSION
  spec.authors = [&quot;Tamara Temple&quot;]
  spec.email = [&quot;tamouse@gmail.com&quot;]

  spec.summary = &quot;take home test example&quot;
  # spec.description = &quot;TODO: Write a longer description or delete this line.&quot;
  spec.homepage = &quot;https://github.com/tamouse/take_home_test&quot;
  spec.required_ruby_version = &quot;&gt;= 2.6.0&quot;

  # spec.metadata[&quot;allowed_push_host&quot;] = &quot;TODO: Set to your gem server &#39;https://example.com&#39;&quot;

  # spec.metadata[&quot;homepage_uri&quot;] = spec.homepage
  # spec.metadata[&quot;source_code_uri&quot;] = &quot;TODO: Put your gem&#39;s public repo URL here.&quot;
  # spec.metadata[&quot;changelog_uri&quot;] = &quot;TODO: Put your gem&#39;s CHANGELOG.md URL here.&quot;

  # Specify which files should be added to the gem when it is released.
  # The `git ls-files -z` loads the files in the RubyGem that have been added into git.
  spec.files = Dir.chdir(File.expand_path(__dir__)) do
    `git ls-files -z`.split(&quot;\x0&quot;).reject do |f|
      (f == __FILE__) || f.match(%r{\A(?:(?:bin|test|spec|features)/|\.(?:git|travis|circleci)|appveyor)})
    end
  end
  spec.bindir = &quot;exe&quot;
  spec.executables = spec.files.grep(%r{\Aexe/}) { |f| File.basename(f) }
  spec.require_paths = [&quot;lib&quot;]

  # Uncomment to register a new dependency of your gem
  # spec.add_dependency &quot;example-gem&quot;, &quot;~&gt; 1.0&quot;

  # For more information and examples about making a new gem, check out our
  # guide at: https://bundler.io/guides/creating_gem.html
end

```
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2022/2022-07-20-git-moving-head-to-a-previous-commit.org</id>
      <updated>2022-07-20T13:54:15-05:00</updated>
      <title>2022-07-20-git-moving-head-to-a-previous-commit</title>
      <content>#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t html-scripts:nil
#+options: html-style:t html5-fancy:t tex:t
#+html_doctype: html5
#+html_container: div
#+html_content_class: content
#+description: How do you get rid of commits you do not want?
#+keywords: git, head, reset, revert
#+html_link_home: https://swaac.dev
#+html_head:
#+html_head_extra:
#+subtitle: When you just donâ€™t want that last commit
#+infojs_opt:
#+creator: &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; 28.1 (&lt;a href=&quot;https://orgmode.org&quot;&gt;Org&lt;/a&gt; mode 9.5.2)
#+latex_header:
#+TITLE: Git: Moving HEAD to a previous commit

** Oops, didnâ€˜t want that!

Sometimes in the course of development work, we decide that we didnâ€™t actually want a commit.

In a situation I recently ran into, I had done a merge from ~main~, and then the tech lead said to rebase it instead. Luckily, I hadnâ€™t yet pushed to ~origin~ so I could back out of the commit I had made.

But how?

** I hadnâ€™t pushed my branch yet

Following the advice given in this [[https://stackoverflow.com/questions/14243089/git-move-head-back-to-a-previous-commit][StackOverflow]] question, the form of the operation looks like this:

#+BEGIN_SRC shell
  git reset COMMIT_SHA
  git reset --soft HEAD@{1}
  git commit -m &quot;Reverted to COMMIT_SHA&quot;
  git status
  # Check on the uncommitted files, see if you want to salvage any of this work
  git reset --hard
#+END_SRC

~COMMIT_SHA~ is the short or long SHA of the commit I want to roll back to, e.g. &quot;56c637bd8&quot; or &quot;56c637bd8a369373dcfdc62cbdca810658a7fd4e&quot;

In the scenario I was in, I omitted the last ~git reset --hard~ command, so the changes that I was working on prior to the commit were left in their modified state. If I had wanted to just get rid of any changes and start fresh, then I would definitely run the last reset command.

** But what if I had pushed my branch?

In this case, I would have had to use ~git revert~ to revert the commits. Letâ€™s say I want to go back 4 commits from the tip of the branch, aka ~HEAD~.

#+BEGIN_SRC shell
  # Revert the changes specified by the fourth last commit in HEAD and create a new commit with the reverted changes.
  git revert HEAD~3
  git push -u origin BRANCH_NAME
#+END_SRC

Then when my teammates pull my branch for review and testing, it will have a commit with all the changes removed, and the history of the repo will remain intact.

** References

1. [[https://stackoverflow.com/questions/14243089/git-move-head-back-to-a-previous-commit][SO: GIT: move HEAD back to a previous commit]]
2. [[https://git-scm.com/docs/git-reset][Git reset]]
3. [[https://git-scm.com/docs/git-revert][Git revert]]

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/thor-notes.org</id>
      <updated>2022-07-20T13:00:47-05:00</updated>
      <title>thor-notes</title>
      <content>** Thor Notes

*** What is Thor?

    - http://whatisthor.com/
    - https://github.com/rails/thor
    - https://rdoc.info/gems/thor/Thor

*** Start here for next thor project

    Seriously, this has so much &quot;stock&quot; stuff:

    https://github.com/tamouse/rearrange_books/tree/start-here-for-next-thor-project

**** turn this thing into a thor thor generator!
     Dude, as if you&#39;re the first person to do this?

*** Some given barewords with useful values:

    - &quot;name&quot;: &quot;SuperModule::AnalyticsClass&quot;,
    - &quot;file_name&quot;: &quot;analytics_class&quot;,
    - &quot;file_path&quot;: &quot;super_module/analytics_class&quot;,
    - &quot;class_name&quot;: &quot;SuperModule::AnalyticsClass&quot;


*** Giving a task multiple arguments

    Q: How can I have a task get multiple arguments, like many regular
    POSIX commands?

    Example:

    #+BEGIN_SRC shell-script
      cp source_file source_file source_file source_file ... dest_dir
    #+END_SRC

    Pretty simple:

    #+BEGIN_SRC ruby
      desc &quot;taskname ARGLIST&quot;
      def taskname(*args)
      end
    #+END_SRC

    would let you do:

    #+BEGIN_SRC shell-script
      thor taskname arg1 arg2 arg3 arg4
    #+END_SRC

    and ~args~ in the task would be ~[&quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;, &quot;arg4&quot;]~



*** Invoke a thor task by giving only a class option
    :PROPERTIES:
    :CAPTURE_DATE: [2016-11-06 Sun 01:11]
    :END:

    From stackoverflow: http://stackoverflow.com/a/7311357/742446

    [...use] Thor.map to invoke a command by only giving an
    option flag:

    #+BEGIN_SRC ruby
      map &#39;-F&#39; =&gt; &#39;foo&#39;
    #+END_SRC

    Now you can also pass parameters

    #+BEGIN_SRC ruby
      mythorcommand -F bar # =&gt; invokes foo(&quot;bar&quot;)
    #+END_SRC

    answered Sep 5 &#39;11 at 17:57 by tfischbach

*** Give thor a default task
    :PROPERTIES:
    :CAPTURE_DATE: [2016-11-06 Sun 01:13]
    :END:

    From stackoverflow: http://stackoverflow.com/a/23955971/742446

    I found a rather &#39;strange&#39; solution for this problem that is working quite well with me.

    You add a default task to Thor. Than you add the method_missing so
    that you can trick Thor into passing the default method as an
    argument if there are parameters to your application.

    Taking from your example, the solution would look like this:

    #+BEGIN_SRC ruby
      class MyThorCommand &lt; Thor
	default_task :my_default

	desc &quot;my_default&quot;, &quot;A simple default&quot;
	def my_default(*args)
          puts args.inspect
	end

	def method_missing(method, *args)
          args = [&quot;my_default&quot;, method.to_s] + args
          MyThorCommand.start(args)
	end

      end

      MyThorCommand.start(ARGV)
    #+END_SRC

    If this is in the file &quot;my_thor.rb&quot; an execution &quot;ruby my_thor.rb
    foo bar&quot; would show &#39;[&quot;foo&quot;, &quot;bar&quot;]&#39; as a result.

    answered May 30 &#39;14 at 13:38 by Edu

*** Making Thor scripts colourful

   capture date: [2015-10-11 Sun 02:06]

   In Thor::Actions, the various output commands can be made nicely
   colourful. You can append symbols representing various colours after
   the output string. For example:

   #+begin_src ruby
     say &quot;This will make you green with envy&quot;, :green
     say &quot;Don&#39;t be sad&quot;, :blue
     say &quot;ACK! AN ERROR!&quot;, :red
   #+end_src

   Colour symbols are defined in
   https://github.com/erikhuda/thor/blob/master/lib/thor/shell/color.rb


   #+begin_src ruby
     # Set color by using a string or one of the defined constants. If a third
     # option is set to true, it also adds bold to the string. This is based
     # on Highline implementation and it automatically appends CLEAR to the end
     # of the returned String.
     #
     # Pass foreground, background and bold options to this method as
     # symbols.
     #
     # Example:
     #
     #   set_color &quot;Hi!&quot;, :red, :on_white, :bold
     #
     # The available colors are:
     #
     #   :bold
     #   :black
     #   :red
     #   :green
     #   :yellow
     #   :blue
     #   :magenta
     #   :cyan
     #   :white
     #   :on_black
     #   :on_red
     #   :on_green
     #   :on_yellow
     #   :on_blue
     #   :on_magenta
     #   :on_cyan
     #   :on_white

   #+end_src
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/provisioning-new-mac.org</id>
      <updated>2022-03-18T12:32:18-05:00</updated>
      <title>Provisioning a new Mac</title>
      <content>* Provisioning a new Mac

*KEY POINT:* the &quot;you&quot; in this writeup is me, the author. If you, the reader, are not me, the author, then you /have to modify to fit your own needs/.

** Admin Privs

If this is your own mac, your account should be created with Administrator privs, and you should be able to install software, do things like run ~sudo~, and all sorts of wonderful things, usually all you need to do is provide your account password when asked.

** Set default shell

This is optional, and it&#39;s probably high time to move to zsh, which is the default on new macs since 10.15. If you do want to set the default shell, this will do that.

#+BEGIN_SRC shell
chsh -s /bin/bash
#+END_SRC

** Modify Terminal to close window on exit

You should do this for all the terminal profiles you use. Also, this is a good time to modify colours so you can read them (e.g. red text on red sands sucks).

** Set alternate destination for screenshots

#+BEGIN_SRC shell
mkdir $HOME/Downloads/Screenshots
defaults write com.apple.screencapture location $HOME/Downloads/Screenshots
killall SystemUIServer
#+END_SRC

Using `$HOME/tmp/` might be good, too.

** Display Useful Info in Finder

#+BEGIN_SRC shell
defaults write com.apple.finder ShowPathbar -bool true
defaults write com.apple.finder ShowStatusBar -bool true
#+END_SRC

** Installing Keybase

This stores other credentials for the project, my org files, etc.

1. Go to [[https://keybase.io]] and log in
2. Download the app for the mac from that page
3. Open up the ~dmg~ and follow the prompts to install it
4. Launch the app /Applications/Keybase.app
5. Log in to your keybase account
6. Follow the prompts on the new machine and an old machine you selected to verify the new machine&#39;s identity
7. Log out and log in as the WA admin in the case of the work machine :P
8. Go to the file tab in keybase.app, and install the Finder extension
9. Log out of the WA account and back into the user (use the username instead of real name, i guess...)
10. Go the the file tab in Keybase.app again, open the Finder and see that you have access
11. Go to a new Terminal window, and run ~keybase help~ to make sure the command line works, too

** Other Privs

*** typical areas to find other credentials

- .aws/
- .gnupg/
- .netrc
- .ssh/

*** Keybase-based: getting your creds

The beauty of Keybase is that you can keep credentials and other secrets in the file system for your private use.

The pain is keeping them sync&#39;d.

I have the above directories sync&#39;d to my private keybase folder.

**** saving updating creds to keybase

*NOTE: make sure the directroeis you are copying do NOT have the / at the end!*

#+BEGIN_SRC shell-script
  rsync -av ~/.aws \
	~/.gnupg \
	~/.ssh \
	~/.netrc \
	/Volumes/Keybase/private/tamouse_/creds/
#+END_SRC

**** getting the cred to the new machine

(or just updating them)

#+BEGIN_SRC shell-script
  rsync -av /Volumes/Keybase/private/tamouse_/creds/ $HOME
#+END_SRC

** Install X-Code

This takes a brutally long time, since it&#39;s just such a ginormous download (8G?)

*** Install the dev toola

#+BEGIN_SRC shell-script
$ xcode-select --install
#+END_SRC

** Install homebrew (brew.sh)

Go out to the [[https://brew.sh][homebrew web page]], there&#39;s a command you can paste into a Terminal window. At some point, it should ask for your password; give it and then brew will be able to raise its privs when needed. The last time I did this, I ended up not being able to type at the Terminal. Swiftly just solved by quitting Terminal and restarting it. Run ~brew doctor~ to make sure everything is cromulent.

Install the newest version of git; the one on mac install is likely too old for development purposes:

~brew install git~

** Download config repos

Since the .ssh creds were copied over in a previous step, this step should be pretty easy.

Remember these are /my configs/; if you are not me, use your own, please.

*** Dot Files

1. clone the dot files repo first: ~git clone git@github.com:tamouse/my-dot-files.git .my-dot-files~
2. move into the new dir: ~pushd .my-dot-files~
3. poke around in the ~profile.d~ folder and make sure all the ones you want are marked as executable
4. in the ~.my-dot-files/~ folder, run ~./setup.sh~ which will set up the links to the various profile and rc files.
5. close the Terminal.app and repen it, the setup stuff should be working. Try it out by typing ~ll~ at the Terminal.

*** Emacs config

1. make sure you&#39;re in the HOME directory again: ~cd~
2. clone the emacs config: ~gcl git@github.com:tamouse/my-emacs-d.git .emacs.d~
3. follow the directions in the README

** Essential Software
*** Installing Emacs

For me, there is next to nothing that is more important that using my imprinted editor. It&#39;s easier than ever these days, too, being able to install as a cask from home brew.

I ran the following to check on stuff: ~brew cask info emacs~ -- in particular, I want a fairly high level version, which might not be completely released. I&#39;m running 26.2, the latest from the command shows 26.3, so it should be good to go.

1. run ~brew install --cask emacs~
2. start up emacs with just ~emacs~ to make sure the init.el works as hoped.

   1. on this latest install, i needed to modify init.el
   2. it was making a reference to ~/usr/local/share/emacs/~ which did not exist in this particular install from the home brew cask.
3. test out the ~emacsclient~ aliases:
   
        ecn .


Hopefully everything goes smoothly.

*** Installing Ruby(ies?)

1. Grab ~ruby-install~: ~brew install ruby-install~
2. Get the latest ruby versions: ~ruby-install~
3. Install your sweet version: ~ruby-install ruby 2.5.7~ for the project I&#39;m working for this work computer, others are good, too!
4. Grab ~chruby~: ~brew install chruby~
5. Close and reopen the Terminal
6. Run ~chruby~ to verify the ruby you just installed is there
7. For my work machine, I want to always be using the same version of ruby everywhere, so I create a ~.ruby-version~ file with ~ruby-2.5.7~ in it
8. Close and reopen the Terminal again
9. Verify the ruby:
   - ~chruby~ - should show the ruby version you added to the ~.ruby-version~ file
   - ~which ruby~ - should show the new ruby version under your ~.rubies/~ directory
   - ~ruby -v~ - shows the right version of ruby, yay!
10. Install some necessary global gems:
    - bundler - match the version your project(s) need, 2.0.3
    - rake - the version installed with ruby might be okay
    - rails 5.1.6 (or whatever your project uses) (takes a long time, whee)

*** Installing Node, NPM, and friends

**** Using nvm

Head over here, and do as it says &lt;https://github.com/nvm-sh/nvm#install--update-script&gt; to install `nvm`.

Installing the latest Long Term Support node, use

```
nvm install --lts
command -v node
node -v
npm -v
npx -v
```

**** If not using nvm.

We&#39;ll be installing from the nodejs web site, instead of using brew or nvm. 

1. Point the browser at [[https:///nodejs.org/en/]]
2. Click on the LTS version to download the installer
3. Launch the installer, click through confirming everythingss, and it should be good to go.
4. Close and reopen the Terminal, just for good time sake
5. Verify ~node~
   - ~node -v~
   - ~npm -v~
   - ~npx -v~

or do install with brew.  

Install ~yarn~: ~brew install yarn~ (beware there is a new way to do this for yarn v2!)

** Other Software

1. Chrome 
2. Firefox
3. 1Password &lt;https://1password.com/&gt; web, desktop, browser, etc...
4. Amphetimine [AS]
5. Spark [AS]
6. Notion &lt;https://www.notion.so/desktop&gt;
7. Slack [AS]
9. Zoom &lt;https://us04web.zoom.us/download#client_4meeting&gt;
10. Affinity Photo &amp; Design [AS]
11. Spotify &lt;https://www.spotify.com/us/download/mac/&gt;
12. Sonos, &lt;https://support.sonos.com/s/downloads?language=en_US&gt;
13. Monosnap [AS]
14. --Spectacle-- use Rectangle instead: https://github.com/rxhanson/Rectangle
15. Alfred &lt;https://www.alfredapp.com/&gt;
16. Discord &lt;https://discord.com/download&gt;
17. Display Menu [AS]
18. JetBrains Toolbox (from which you can install the others) &lt;https://www.jetbrains.com/toolbox-app/&gt;
19. Kindle for Mac
20. ... this list will grow and shrink :D

** org files

I keep my org files on keybase in git

#+BEGIN_SRC shell
  git clone keybase://private/tamouse_/org-files ~/org
#+END_SRC

** Postgresql

#+BEGIN_SRC shell
  brew install postgresql
  brew services start postgresql
  createdb tamara
#+END_SRC

For other versions run ~brew search postgresql~. you should be able to run different versions of it, but you&#39;ll also need different paths for the data and so on.

** redis

For a lot of work projects, I use redis on the app. It&#39;s generally useful, like PG, so I make sure it&#39;s always available.

#+BEGIN_SRC shell
  brew info redis
  brew install redis
  brew services start redis
#+END_SRC


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2022/2022-02-19-how-to-access-icloud-files-from-the-command-line.md</id>
      <updated>2022-03-18T12:32:18-05:00</updated>
      <title>2022-02-19-how-to-access-icloud-files-from-the-command-line</title>
      <content>The file system holding iCloud files is sort of tucked out of the way. It would be nice if it were mounted under `/Volumes/` like others, but no.

According to this answer at &lt;https://discussions.apple.com/thread/7388762&gt;, you can find it under `$HOME/Library/Mobile\ Documents/com~apple~CloudDocs`.
In case that&#39;s not very readable, those are *tildes* at the end (shift-backtick, close to the number 1 key). I&#39;ll embiggen it:

# `$HOME/Library/Mobile\ Documents/com~apple~CloudDocs`

What I did, now that I know that&#39;s where they live, is create a soft link to that directory in my `$HOME` directory:

     $ link -s $HOME/Library/Mobile\ Documents/com~apple~CloudDocs iCloud

and that let me have easy access without having to remember that long path.

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2021/2021-12-23-til-how-to-use-low-data-mode-in-ios.md</id>
      <updated>2022-03-18T12:32:18-05:00</updated>
      <title>2021-12-23-til-how-to-use-low-data-mode-in-ios</title>
      <content># Use Low Data Mode on your iPhone and iPad - Apple Support

&lt;pre&gt;
Archived?: No
Area: Maintenance
Blogged?: No
Created: December 23, 2021 2:00 PM
Processed?: No
Stale?: No
Status: Completed
Summary: Turn Low Data Mode on or off on IOS devices
Tags: iOS
Topic: Hardware
URL: https://support.apple.com/en-us/HT210596
What is important about this?: Remove annoying pop-up confirmation dialogs
Why did I save this?: I had it turned on and couldnâ€™t figure out how to turn it back off
&lt;/pre&gt;

With iOS 13 and later, you can turn on Low Data Mode to restrict background network use and save cellular and Wi-Fi usage.

You might want to use Low Data Mode if your cellular or internet plan limits your data usage, or if you&#39;re in an area with slow data speeds.

## How to turn on Low Data Mode

You can turn on Low Data mode separately for cellular and Wi-Fi. Your Low Data Mode settings might vary depending on your carrier. Select the type of plan you have below and follow the steps.

### LTE/4G Cellular

1. Go to Settings and tap Cellular
2. Tap Cellular Data Options, then turn on Low Data Mode.

### 5G Cellular

1. Go to Settings and tap Cellular.
2. Tap Cellular Data Options, select Data Mode, then turn on Low Data Mode.

### Dual SIM

1. Go to Settings and tap Cellular or Mobile Data.
2. Tap one of your numbers.
3. Turn on Low Data Mode.

### Wi-Fi

1. Go to Settings and tap Wi-Fi.
2. Tap the Info button next to the Wi-Fi network that you&#39;re connected to.
3. Turn on Low Data Mode.

Your Low Data Mode preferences for each Wi-Fi network are kept up to date across all your devices through iCloud.

## What to expect in Low Data Mode

Different apps use different ways of reducing data usage in Low Data Mode. In general, here&#39;s what you can expect:

- Apps might stop using network data when you&#39;re not actively using them.
- Background App Refresh is turned off.
- The quality of streaming content might be reduced.
- Automatic downloads and backups are turned off.
- Services such as iCloud Photos pause updates.

Built-in iOS apps and services adapt to Low Data Mode in the following ways:

- App Store: Video autoplay, automatic updates, and automatic downloads are turned off.
- Music: Automatic downloads and high quality streaming are turned off.
- Podcasts: The frequency of feed updates is limited, and episodes are downloaded only on Wi-Fi.
- News: Article prefetching is turned off.
- iCloud: Updates are paused, and automatic backups and iCloud Photos updates are turned off.
- FaceTime: Video bitrate is optimized for lower bandwidth.

## Learn more

- [Find out how much cellular data that you&#39;re using](https://support.apple.com/kb/HT201299), and learn how to turn cellular data on or off for all apps or individual apps.
- [Use Wi-Fi Assist](https://support.apple.com/kb/HT205296) to automatically switch to cellular when you have a poor Wi-Fi connection.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
