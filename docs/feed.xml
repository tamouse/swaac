<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2021-05-21T18:18:55-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/04/2020-04-28-til-using-optional-for-nested-attributes.org</id>
      <updated>2021-05-21T18:18:55-05:00</updated>
      <title>TIL: Using optional for nested attributes</title>
      <content>* TIL: Using optional for nested attributes
  :PROPERTIES:
  :CUSTOM_ID: til-using-optional-for-nested-attributes
  :END:

#+begin_verse
Area: SWaaC 
Created: Apr 25, 2020 10:18 AM 
Done: No 
Draft Date: Apr 28, 2020 
Hide: No 
Series: TIL 
Status: In Review 
Tags: Rails, nesting 
Topic: Ruby and Rails
#+end_verse

** TL;DR
  :PROPERTIES:
  :CUSTOM_ID: tldr
  :END:

Eventually I found the issue: When you (meaning &quot;I&quot;) do this, you (I) need to set =optional: true= on the =belongs_to= side.

** The Problem
   :PROPERTIES:
   :CUSTOM_ID: the-problem
   :END:

I&#39;ve been banging my head on the keyboard trying to figure this out.

I had two models where once accepts the nested attributes for the other. It was just not working the way I thought it should.

I kept getting back an validation error on the relationship =purchase_id=, and everything I tried was not working as I expected.

Even removing the =anaf= line made it work, and it really should have behaved the same damn way.

** Discussion
   :PROPERTIES:
   :CUSTOM_ID: discussion
   :END:

*** Two models
    :PROPERTIES:
    :CUSTOM_ID: two-models
    :END:

1. Purchase
2. PurchaseDetail, which belongs to people

*** purchase.rb:
    :PROPERTIES:
    :CUSTOM_ID: purchase.rb
    :END:

#+BEGIN_SRC ruby
  class Purchase &lt; ApplicationRecord
    has_many :purchase_details
    accepts_nested_attributes_for :purchase_details
  end
#+END_SRC

purchase_detail.rb

#+BEGIN_SRC ruby
  class PurchaseDetail &lt; ApplicationRecord
    belongs_to :purchase, optional: true       ## NOTE: optional!!!
  end
#+END_SRC

The =belongs_to= line as an =optional: true=, which tells Rails that the dependent records are required to have the foreign key field filled in when they are part of the whole conglomeration. This switched meanings from Rails 4 to Rails 5 sometime.

*** The following form view:
    :PROPERTIES:
    :CUSTOM_ID: the-following-form-view
    :END:

#+BEGIN_EXAMPLE
  &lt;%= form_for(purchase) do |f| %&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;%= f.label :name %&gt;
      &lt;%= f.text_field :name %&gt;
    &lt;/div&gt;

    &lt;%= f.fields_for :purchase_details, purchase.purchase_details.each do |ff| %&gt;
      &lt;div class=&quot;field&quot;&gt;
        &lt;%= ff.label :kind %&gt;
        &lt;%= ff.text_field :kind %&gt;
      &lt;/div&gt; 
    &lt;% end %&gt;

    &lt;div class=&quot;actions&quot;&gt;
      &lt;%= f.submit %&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
#+END_EXAMPLE

*** Produces the following form:
    :PROPERTIES:
    :CUSTOM_ID: produces-the-following-form
    :END:

#+BEGIN_EXAMPLE
  &lt;form class=&quot;new_purchase&quot; id=&quot;new_purchase&quot; action=&quot;/purchases&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&amp;#x2713;&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;68IcN2OakPU+T2Y0SdbckzQPIrAN7XKoeaHxHD8JLB0KnCblSMaC78tHziLSm6orY8htBDDpwjSgNi5G+pt6hQ==&quot; /&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;label for=&quot;purchase_name&quot;&gt;Name&lt;/label&gt;
      &lt;input type=&quot;text&quot; name=&quot;purchase[name]&quot; id=&quot;purchase_name&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;label for=&quot;purchase_purchase_details_attributes_0_kind&quot;&gt;Kind&lt;/label&gt;
      &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][0][kind]&quot; id=&quot;purchase_purchase_details_attributes_0_kind&quot; /&gt;
    &lt;/div&gt; 
    &lt;div class=&quot;field&quot;&gt;
      &lt;label for=&quot;purchase_purchase_details_attributes_1_kind&quot;&gt;Kind&lt;/label&gt;
      &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][1][kind]&quot; id=&quot;purchase_purchase_details_attributes_1_kind&quot; /&gt;
    &lt;/div&gt; 
    &lt;div class=&quot;actions&quot;&gt;
      &lt;input type=&quot;submit&quot; name=&quot;commit&quot; value=&quot;Create Purchase&quot; data-disable-with=&quot;Create Purchase&quot; /&gt;
    &lt;/div&gt;
  &lt;/form&gt;
#+END_EXAMPLE

*** This comes up to the PurchasesController#purchase_params private method:
    :PROPERTIES:
    :CUSTOM_ID: this-comes-up-to-the-purchasescontrollerpurchase_params-private-method
    :END:

#+BEGIN_SRC ruby
    def purchase_params
      params.require(:purchase).permit(:name, purchase_details_attributes: [:id, :kind])
    end
#+END_SRC

*** Which is called in PurchasesController#create:
    :PROPERTIES:
    :CUSTOM_ID: which-is-called-in-purchasescontrollercreate
    :END:

#+BEGIN_SRC ruby
  def create
      @purchase = Purchase.new(purchase_params)
      
      respond_to do |format|
        if @purchase.save
          format.html { redirect_to @purchase, notice: &#39;Purchase was successfully created.&#39; }
          format.json { render :show, status: :created, location: @purchase }
        else
          format.html { render :new }
          format.json { render json: @purchase.errors, status: :unprocessable_entity }
        end
      end
    end
#+END_SRC

This was *failing* on me for the longest time, until it was pointed out that the =belongs_to= relationship has =:optional= turned /off by default in Rails 5!/ Setting it to true suddenly made everything work as expected. This was a long long frustrating day.

The most difficult thing is looking at the app I&#39;m working on, running this same version of Rails and Ruby, is that it works /without/ having to specify the =optional: true= flag on the =belongs_to=.

** The aftermath
   :PROPERTIES:
   :CUSTOM_ID: the-aftermath
   :END:

The failure when the =optional= field was left off was that the independent record would not save because of a validation error. Inspecting the validation errors on the dependent records didn&#39;t lead me to a solution straight away, though. I still had to fumble around, read lots of blog posts and stack overflows until I finally found mention of the =optional: true= flag.

This confused me for a long time, as well, as the project I&#39;m currently working on also does not have the =optional: true= set and yet it works. The project did migrate from 4 to 5, but perhaps there&#39;s some gem that takes care of that. I will have to ask about it.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/04/2020-04-28-til-using-optional-for-nested-attributes.md</id>
      <updated>2021-05-21T18:05:29-05:00</updated>
      <title>2020-04-28-til-using-optional-for-nested-attributes</title>
      <content># TIL: Using optional for nested attributes

Area: SWaaC  
Created: Apr 25, 2020 10:18 AM  
Done: No  
Draft Date: Apr 28, 2020  
Hide: No  
Series: TIL  
Status: In Review  
Tags: Rails, nesting  
Topic: Ruby and Rails  

## TL;DR

Eventually I found the issue: When you (meaning &quot;I&quot;) do this, you (I) need to set `optional: true` on the `belongs_to` side.

## The Problem

I&#39;ve been banging my head on the keyboard trying to figure this out.

I had two models where once accepts the nested attributes for the other. It was just not working the way I thought it should. 

I kept getting back an validation error on the relationship `purchase_id`, and everything I tried was not working as I expected.

Even removing the `anaf` line made it work, and it really should have behaved the same damn way.

## Discussion

### Two models

1. Purchase
2. PurchaseDetail, which belongs to people

### purchase.rb:

```ruby
class Purchase &lt; ApplicationRecord
  has_many :purchase_details
  accepts_nested_attributes_for :purchase_details
end
```

purchase_detail.rb

```ruby
class PurchaseDetail &lt; ApplicationRecord
  belongs_to :purchase, optional: true       ## NOTE: optional!!!
end
```

The `belongs_to` line as an `optional: true`, which tells Rails that the dependent records are required to have the foreign key field filled in when they are part of the whole conglomeration. This switched meanings from Rails 4 to Rails 5 sometime.

### The following form view:

```html
&lt;%= form_for(purchase) do |f| %&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;%= f.label :name %&gt;
    &lt;%= f.text_field :name %&gt;
  &lt;/div&gt;

  &lt;%= f.fields_for :purchase_details, purchase.purchase_details.each do |ff| %&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;%= ff.label :kind %&gt;
      &lt;%= ff.text_field :kind %&gt;
    &lt;/div&gt; 
  &lt;% end %&gt;

  &lt;div class=&quot;actions&quot;&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
```

### Produces the following form:

```html
&lt;form class=&quot;new_purchase&quot; id=&quot;new_purchase&quot; action=&quot;/purchases&quot; accept-charset=&quot;UTF-8&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;utf8&quot; type=&quot;hidden&quot; value=&quot;&amp;#x2713;&quot; /&gt;&lt;input type=&quot;hidden&quot; name=&quot;authenticity_token&quot; value=&quot;68IcN2OakPU+T2Y0SdbckzQPIrAN7XKoeaHxHD8JLB0KnCblSMaC78tHziLSm6orY8htBDDpwjSgNi5G+pt6hQ==&quot; /&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_name&quot;&gt;Name&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[name]&quot; id=&quot;purchase_name&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_purchase_details_attributes_0_kind&quot;&gt;Kind&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][0][kind]&quot; id=&quot;purchase_purchase_details_attributes_0_kind&quot; /&gt;
  &lt;/div&gt; 
  &lt;div class=&quot;field&quot;&gt;
    &lt;label for=&quot;purchase_purchase_details_attributes_1_kind&quot;&gt;Kind&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;purchase[purchase_details_attributes][1][kind]&quot; id=&quot;purchase_purchase_details_attributes_1_kind&quot; /&gt;
  &lt;/div&gt; 
  &lt;div class=&quot;actions&quot;&gt;
    &lt;input type=&quot;submit&quot; name=&quot;commit&quot; value=&quot;Create Purchase&quot; data-disable-with=&quot;Create Purchase&quot; /&gt;
  &lt;/div&gt;
&lt;/form&gt;
```

### This comes up to the PurchasesController#purchase_params private method:

```ruby
  def purchase_params
    params.require(:purchase).permit(:name, purchase_details_attributes: [:id, :kind])
  end
```

### Which is called in PurchasesController#create:

```ruby
def create
    @purchase = Purchase.new(purchase_params)
    
    respond_to do |format|
      if @purchase.save
        format.html { redirect_to @purchase, notice: &#39;Purchase was successfully created.&#39; }
        format.json { render :show, status: :created, location: @purchase }
      else
        format.html { render :new }
        format.json { render json: @purchase.errors, status: :unprocessable_entity }
      end
    end
  end
```

This was **failing** on me for the longest time, until it was pointed out that the `belongs_to` relationship has `:optional` turned *off by default in Rails 5!* Setting it to true suddenly made everything work as expected. This was a long long frustrating day.

The most difficult thing is looking at the app I&#39;m working on, running this same version of Rails and Ruby, is that it works *without* having to specify the `optional: true` flag on the `belongs_to`. 

## The aftermath

The failure when the `optional` field was left off was that the independent record would not save because of a validation error. Inspecting the validation errors on the dependent records didn&#39;t lead me to a solution straight away, though. I still had to fumble around, read lots of blog posts and stack overflows until I finally found mention of the `optional: true` flag.

This confused me for a long time, as well, as the project I&#39;m currently working on also does not have the `optional: true` set and yet it works. The project did migrate from 4 to 5, but perhaps there&#39;s some gem that takes care of that. I will have to ask about it.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/learning.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>Resources for learning how to program, especially how to program in Ruby and Rails</title>
      <content>* Resources for learning how to program, especially how to program in Ruby and Rails

- last updated Time-stamp: &lt;2018-12-30 12:42:51 tamara&gt;

** Introduction

Many people ask me &quot;How do I learn to program?&quot; and &quot;What book(!) should I read to learn Rails?&quot;.

These are legitimate questions, but they aren&#39;t necessarily the right questions to ask in order to begin the journey of becoming a software craftsperson.

Better questions, I feel, are:

- What resources do you recommend for beginners?
- Where can I go for help?

I&#39;ve been finding things around the &#39;net that can greatly help people new to programming, new to web development, new to Rails, and so on.

--------------

*UPDATE:* I&#39;ve created a section for the [[./beginners-section.org][Absolute Beginner]] as well, you might find it useful.

This is a quick, short list of things. I urge you to seek them out, and seek out others as well, and create your /own/ list of learning resources. People will begin to ask you, and it&#39;s nice to have something handy.

Also, [[https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard][learning Rails is hard]]. But don&#39;t despair! The key to learning is break things down, focusing and practicing small things, and build up a lot of skills slowly. (&quot;Wax on, wax off.&quot; &quot;Ok, Mr. Myagi.&quot;) I&#39;m going to jump ahead and tell you to download the first chapter (free) of Justin Weiss&#39;s book [[https://www.justinweiss.com/practicing-rails/][Practicing Rails]]. Search for &quot;first chapter&quot; and fill out the form to get it. You&#39;re also signing up to get e-mail from Justin, but it&#39;s always good stuff.

--------------

/Update Sun Jun 8 11:39:13 2014:/ Recently came across web post [[http://astonj.com/tech/best-way-to-learn-ruby-rails/][Best Way To Learn Ruby and Rails]] and must say it is a great compilation of resources. In addition, Ashton puts the focus right at the heart of the matter: you have learn /both/ Ruby /and/ Rails.

--------------

** Books

 - [[https://www.goodreads.com/book/show/13590009-think-like-a-programmer][*Think Like a Programmer: An Introduction to Creative Problem Solving*]] by V. Anton Spraul.

   Spraul&#39;s purpose in this book is not to teach you how to write a program, but to begin to understand the problem-solving approach that is inherent in good programmers. Like so many skills, programming is driven by the desire and vision of the practitioner. A painter uses brushes, canvas, paints, other media to create a work of art, but it isn&#39;t the tools, it isn&#39;t the specific techniques, and it isn&#39;t even the particular skill the painter has that makes a good work of art; it is their composition, the melding of media and surface, the use of different techniques, and practice in developing the skills that come together to form the work of art. Spraul is going to take you deeper than just the syntax, semantics, and data structures of software to the heart of what makes a good programmer: the ability to creatively find and generate solutions to problems.

 - [[https://www.goodreads.com/book/show/520.Learn_to_Program][*Learn to Program*]] by Chris Pine.

   To be honest, I have not looked through this book. It is, however, nearly universally recommended to people new to programming. The original tutorial is available online for free as well: [[https://pine.fm/LearnToProgram/]]. LtP was featured on the great webcomic [[http://www.unshelved.com/2014-7-25][Unshelved]].

 - [[https://pragprog.com/book/tpp/the-pragmatic-programmer][**The Pragmatic Programmer]] by Andrew Hunt and David Thomas

   This is the best modern treatise on the craft of programming. It represents the best of experiences programmers have come to appreciate during years of development. I read this book after years of practice, and found everything in it to ring true. (The thought &quot;I could have written this!&quot; came up frequently.) This book is not about any specific language or technology, but spans the gamut of software development. This is a must-have for practitioners.

 - [[https://www.goodreads.com/book/show/79766.A_Pattern_Language][*A Pattern Language: Towns, Buildings, Construction*]] by Christopher Alexander.

   You may be wondering why I&#39;ve included a book on building construction. The answer is quite simple: the concepts in building towns and houses is nearly directly translatable to building software applications and systems. One part of being an excellent craftsperson is being able to apply abstract learning in different problem domains. If you are an expert in writing software, you are almost /never/ going to be solving problems only for other software developers. (You can and should do so, but the client and users are generally non-programmers.) Thus you&#39;re most likely going to be working in someone else&#39;s domain of expertise. Alexander&#39;s views on architecture apply to software architecture as well.

 - [[http://shop.oreilly.com/product/9780596510046.do][*Beautiful Code*]] by Andy Oram and Greg Wilson.

   A book with a purpose, that isn&#39;t a how to, so much as a how to think. It&#39;s a collection of essays by various software developers on what they think makes code beautiful. In all, the following holds true:

   1. First, make it correct.
   2. Second, make it pretty.
   3. Third, make it fast.

 - *Programming Proverbs* by Henry F. Ledgard

   This book, published in 1975, and a subsequent volume dedicated to the Pascal language published in 1979, were essential to me back when I was in university learning computer science. They&#39;re out of print now, so I&#39;m starting a blog series covering them. [[file:%7B%7Bsite.baseurl%7D%7D%7B%%20link%20_posts/2017-07-23-pp-introduction.markdown%20%%7D][Programming Proverbs: Introduction]]

 - [[https://leanpub.com/systemdesignheuristics][*Systems Design Heuristics*]] - by the late, great Jerry Wienberg.

   Jerry was a friend as well as a teacher. I miss him enourmously. This book is full of his thoughts and writings on how one should do systems design. As the title implies, there are no rules, but there are some heuristics one can apply to the overall design and architecture of systems.


*** Object-Oriented Programming

 - [[https://www.sandimetz.com/99bottles][*99 Bottles of OOP*]] by Sandi Metz and Katrina Owen.

   A recent book, representing the absolute best by two teachers of software engineering. Sandi has been teaching Object-oriented programming for decades, and Katrina brings in her expertise with refactoring, resulting in a deep book that stretches beyond the basics and deep into the structures and understanding of object systems and idioms. It brings up to date the actual concepts of refactoring, test-driven development, naming things, reducing code &quot;smells&quot; and making code more easily and economically maintainable and sustainable. They take all the buzzwords and unbuzzify them into practical, useful methodologies and techniques.

*** Ruby-specific

 - [[https://pragprog.com/titles/ruby/programming-ruby-2nd-edition/][*Programming Ruby, 2nd ed.*]] by Dave Thomas, with Chad Fowler and Andy Hunt
 
   The seminal Ruby language guide.

 - [[https://www.goodreads.com/book/show/9364729-eloquent-ruby][*Eloquent Ruby*]] by Russ Olsen.

   Olsen&#39;s approach in this book is to go far beyond just learning a programming language, but a way to learning the idioms and the &quot;Ruby Way&quot;. Even if your chosen language is something other than Ruby, reading this book will give you an appreciation for how to delve into a language and get the most out of it.

 - [[http://www.confidentruby.com/][*Confident Ruby*]] by Avdi Grimm.

   More than any other book I&#39;ve read on Ruby, &quot;Confident Ruby&quot; has affected my coding habits more than any other. If Ruby is about making programmers happy, /Confident Ruby/ is about making programming joyful, and not just in the immediate, but being able to look at code you&#39;ve written in the future and recall the joy. /Confident Ruby/ seeks to combat software rot from the get-go.

 - [[http://www.amazon.com/The-Well-Grounded-Rubyist-David-Black/dp/1617291692][*Well-Grounded Rubyist*]] by David A. Black

   Also known as the &quot;Black Book&quot; (because of the author&#39;s name), WGR is the successor to /Ruby for Rails/ by Black that provided me with the much-needed introduction to how to write Ruby code, with the idea of using it in Ruby for Rails. This book is a fabulous primer on the Ruby idioms and expressions that help make one a good Ruby programmer.

 - [[http://www.poodr.com/][*Practical Object-Oriented Design in Ruby*]] by Sandi Metz

   This book provides a deeply-needed introduction to object-oriented design, specifically targeted to the Ruby language. Ruby is one of the richest languages in which to express object-oriented patterns, but it is easy to fall of the OO wagon and start to get things messed up. Sandi provides the thinking tools necessary to decide how to structure your code for better maintainability, extensibility and testability. Comprehension and forward communication of the choices made during software design are crucial to programming, and Sandi is one of the very best at explaining things.

*** Rails-specific

 - [[http://www.manning.com/bigg2/][*Rails 4 in Action*]] by Ryan Bigg, Yehuda Katz, Steve Klabnik, and Rebecca Skinner.

   A follow-on the highly successful Rails 3 in Action, R4iA has been completely rewritten, with new examples, case study, and all the great new features in Rails 4.

   A great book for beginning Rails developers to start with, and for intermediate developers to step up their game.
   
 - [[https://pragprog.com/titles/rails6/agile-web-development-with-rails-6/][Agile Web Development with Rails 6]] by Sam Ruby and David Bryant Copeland
 
   The officially sanctioned book on Rails development.

 - [[https://www.justinweiss.com/practicing-rails/][*Practicing Rails*]] by [[http://www.justinweiss.com][Justin Weiss]].

   The first chapter alone (free!) is worth a download and very thorough read. Justin has provided one of the most effective strategies for learning just about /anything/ skill based, and it&#39;s especially effective for learning software skills. The focus of the book and the examples and such are obviously Rails, but the first chapter is applicable to anything.

*** JavaScript-specific

 - [[https://www.goodreads.com/book/show/2998152-javascript][*JavaScript: The Good Parts*]] by David Crockford.

   JavaScript is a vast, sprawling language and ecosystem, and has been maligned for much poor code on the web. Crockford extracts out the parts that are really useful, giving the reader a better grounding. This book is the progenitor of many of the JavaScript frameworks that have come up the past few years, as well as CoffeeScript and other *Script derivatives.

 - [[https://github.com/getify/You-Dont-Know-JS][*You Don&#39;t Know JS series*]] by [[https://github.com/getify][Kyle Simpson]].

   A /tour de force/ by one of the great teachers and evangelists of JavaScript, Kyle&#39;s &quot;You Don&#39;t Know JS&quot; series is a must-read collection of books. You can get the books in raw form on-line at the above address, and you can get the published e-books at your favourite vendor.

 - [[http://eloquentjavascript.net/][*Eloquent Javascript*]] by Marijn Haverbeke.

   When I was more naive about JS, I wrote a bit of a negative review of this book. Subsequently, I&#39;ve learned of it&#39;s true eloquence and meaning in giving a model of how to organize and implement modern JS. The subtitle &quot;A modern introduction to programming&quot; is still a bit misleading, perhaps, because you have to understand a fair bit of JavaScript /and/ programming to get the message, I feel. But that&#39;s just a quibble at this point. Read this before you strike out on creating a client-based JS application; you won&#39;t regret it.

 - *Test-Driven JavaScript Development* by Christian Johansen (Addison-Wesley Professional, September 2010, ISBN 9780321683915)

   (The [[http://www.informit.com/store/test-driven-javascript-development-9780321684042][ebook]] for this title is ridiculously expensive. I read it via [[https://learning.oreilly.com/library/view/test-driven-javascript-development/9780321684097/][safarionline]].)

   This book provides some great insights into testing JavaScript applications. Released in 2010, the things that are out of date are the specific tools used for testing, /however/, the concepts for writing tests and performing test-driven Javascript development are still very appropriate.

 - [[https://leanpub.com/javascriptallongesix][*JavaScript Allongé*]] by Reginald &quot;raganwald&quot; Braithwait

   Using the metaphor of a coffee barista, Reg goes in depth on thinking about how JavaScript works; this is not a practical book from the standpoint of &quot;tell me what code to write&quot;, but rather from the standpoint of knowing how JavaScript works inside so you can write better code yourself.


*** HTML and CSS Specific

 - [[https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189?ie=UTF8&amp;*Version*=1&amp;*entries*=0][*HTML and CSS Design and Build Websites*]] by Jon Duckett.

   This book has been recommended by several people in the [GDI] courses I&#39;ve been helping in. A very visual approach, using full-colour photographs to explain the two declarative languages.

** Web sites

 This is just going to be a list of sites I&#39;ve found or been pointed at for helping people learn to program. These are most definitely biased towards Ruby and Rails, as that is my current area of concentration, and generate the most requests that come to me.

 - [[http://www.theodinproject.com/home][*The Odin Project*]] -- pulling together a curriculum from around the web, this is a curation site that gives order and structure to learning how to develop web applications.

 - [[http://codekata.com/][*Code Kata*]] -- Dave Thomas&#39;s site that lists a great set of coding exercises. You can work these more than once, in fact that is what you do with kata.

 - [[http://exercism.io/][*Exercism.IO*]] -- a site devoted to helping people learn and think deeply about writing excellent code. It has projects you implement and then get feedback on from others, and allows you to give feedback as well.

 - [[http://docs.railsbridge.org/docs/][*RailsBridge*]] -- a site devoted to helping people get up and running on learning Ruby on Rails, with emphasis on reaching out to women and LGBTQ folks. RailsBridge workshops are run around the world and the documents here can be used individually to help turn your computer into a development machine. What so often isn&#39;t addressed directly by very many of these sites and books is the ecosystem that one has to learn as well: a coding editor, the command line, rake, irb/pry, git, heroku if that is your choice for deployment (which I do recommend for small beginner projects so you can show it off to your friends); RailsBridge tutorials include these very important tools.

 - [[http://guides.railsgirls.com/][*RailsGirls Guides*]] -- I haven&#39;t explored these in depth yet, I just got the site yesterday. However, I can see just from the list of guides these would be pretty great, just like the RailsBridge site above.

 - [[http://www.railstutorial.org/][*Hartl&#39;s Rails Tutorial*]] -- the most often recommended site to learn how to create web applications in Rails, it goes beyond the Rails stack itself, teaching Ruby, HTML5, CSS3, JavaScript, user authentication and authorization, data modeling, and so on. While Michael sells the book, tutorials, and screen casts, the text of the tutorial online is free at http://www.railstutorial.org/book. Considerable work has gone into this effort, however, so if you can afford to, please purchase at least the book.

 - [[https://www.codeschool.com/][*CodeSchool*]] -- learn from the &quot;Comfort of your own browser&quot;. Codeschool has web casts, coding practices, challenges, and so on.

 - [[http://codeacademy.com][*CodeAcademy*]] -- although I do not personally like the way one interacts with the web site, it does offer an gentle introduction to ruby, javascript, python and other subjects in an immediate feedback environment.

 - [[https://www.khanacademy.org/computing/cs][*Kahn Academy*]] -- learning to program with JavaScript (if you are just starting out, JS is a fine language to learn. It&#39;s fairly ubiquitous in the online world.). Their approach is teaching young folks, which might or might not appeal.

 - [[http://railscasts.com/][*RailsCasts*]] -- another super awesome effort has been put together by Ryan Bates. Current production is on hiatus, so the $9/month fee for the full screen casts is being pro-rated, so you can buy in for $9 and there won&#39;t be further monthly charges until production starts up again.

 - [[https://www.rubytapas.com/frequently-asked-questions/][*RubyTapas*]] -- Avdi Grimm is a fabulous Ruby and Rails mentor and guide, who puts out two very short screen casts a week (tapas -- small plates). These are really impeccably done, and I personally love listening to Avdi talk.

 - [[http://learncodethehardway.org/][*LearnCodeTheHardWay*]] -- provides online versions of books and tutorials for [[http://learnpythonthehardway.org/book/][*Python*]], [[http://ruby.learncodethehardway.org/book/][*Ruby*]], [[http://c.learncodethehardway.org/book/][*C*]], [[http://sql.learncodethehardway.org/book/][*SQL*]], [[http://regex.learncodethehardway.org/book/][*Regular Expressions*]] and more.

 - [[http://www.rubykoans.com/][*Ruby Koans*]] -- &quot;koans&quot; are an Eastern discipline tradition: small, repeated exercises to learn skills and build them into your muscles and memory, so you can use them without thinking consciously about them. In this sense, the ruby koans are small exercises intended to lead you on the way to learning ruby. I can&#39;t say if they&#39;re that successful, but some people definitely enjoy this progressive way of learning. The ruby koans definitely guide you in the way of test-first development, which is a beneficial practice for all to know.

 - [[https://thoughtbot.com/upcase][*Upcase, by Thoughtbot*]] -- not a bootcamp, a finishing school. Where to go to level-up.

** Podcasts

 I am not such a big fan of podcasts, but that has more to do with my personal learning style. Nevertheless, there are some great pocasts out there.

 - [[http://www.greaterthancode.com/][*Greater Than Code*]] Also known as =&gt;Code=, this is a podcast that&#39;s more about people that practice software development and allied things, about management of such people, and making all our lives better.

 - [[http://frontendhappyhour.com/][**Frontend Happy Hour]] A handful of front end developers, including Brian Holt, Jem Young, Ryan Burgess, Augustus Yuan, and Stacy London, joined by various guests. It&#39;s a fun podcast, each week with a special word or phrase that when uttered, everyone takes a drink.

 - [[http://www.codenewbie.org/][*CodeNewbies*]] -- started off as a twitter chat, and grew into a thing, CodeNewbies offers podcasts on topics that range far and wide. Recent topics have included Scrum/Agile methods, maintaining your mental health while programming, interviews with folks who have created significant web sites (Gina Trapani of LifeHacker!!), mobile, databases, single-page apps, you name it. One of the best aspects I can see directly is that this is a /very/ open, diverse collaboration.

** Teaching Organizations

 These are the ones I&#39;m familiar with at this point in time (late 2015) in the Twin Cities area:

 - [[https://frontendmasters.com/][*Frontend Masters*]] -- Based out of Savage, MN, they offer both live in-person and online courses, and they have recorded all the training sessions for on-demand viewing if you&#39;re a member. The quality of these sessions and the videos are extremely good (these are not your twitch.tv live sessions of someone rambling about their code as they hack away) All the courses I&#39;ve taken and viewed are fantastic.

   FrontendMasters tackles intermediate and advanced topics in developing on the front end of web applications. Heavy into JavaScript, libraries, frameworks, techniques, and so on.

** Bootcamps

 These are becoming quite popular, if expensive, but they seem to provide what&#39;s being offered: intensive training in the skills necessary to become a web application developer, with experience and skills in the entire lifecycle of modern software development. I can&#39;t really provide much information on them, as I&#39;ve never experienced them. [[http://www.bootcamps.in/][Bootcamps.in]] provides at least a first-glance at several bootcamps.

** Conferences and Meetups

 Going to conferences, hanging out, meeting like-minded people, and generally instilling one&#39;s self into the millieau of the Ruby and Rails communities can be extremely rewarding. Even if you&#39;re not the conference type, make an effort to find people in your area to talk to.

 There&#39;s lots of other meetups in the Twin Cities I&#39;m regularly trying to attend:

 - [[https://www.meetup.com/Women-Who-Code-Twin-Cities/][Women Who Code Twin Cities]]
 - [[https://www.meetup.com/ruby-mn/][Ruby.MN]]
 - [[https://www.meetup.com/JavaScriptMN/][JavaScript.MN]]
 - [[https://www.meetup.com/React-Minneapolis-Meetup/][React Minneapolis Meeetup]]
 - [[https://www.meetup.com/Elixir-MN/][Elixir MN]]
 - [[https://www.meetup.com/Minneapolis-St-Paul-WordPress-User-Group/][MSP WP]]

** More Advanced

If you want to go deep and learn more about computer science, the book [[https://mitpress.mit.edu/sicp/][/Structure and Interpretation of Computer Programs/]] is probably your best bet in terms of a real CS text book that&#39;s available online for free. It&#39;s not a tutorial, but there are exercises in the text. The book uses Scheme, a lisp-like programming language. Everyone should learn a little lisp at some point. :) However it&#39;s not mandatory one use Scheme (or Clojure as the local Clojure user group has been doing). The analytical concepts apply across all languages. If you&#39;re focused on JavaScript or Ruby, you can work the examples in those languages, too.

The afore-mentioned Frontend Masters has been producing some much more advanced courses lately:

- [[https://frontendmasters.com/courses/computer-science/][Four Semesters of Computer Science in 5 Hours]] with [[https://frontendmasters.com/teachers/brian-holt/][Brian Holt]]

- [[https://frontendmasters.com/courses/computer-science-2/][Four Semesters of Computer Science in 5 Hours, Part 2]] with Brian Holt

- [[https://frontendmasters.com/courses/practical-algorithms/][A Practical Guide to Algorithms with JavaScript]] with [[https://frontendmasters.com/teachers/bianca-gandolfo/][Bianca Gandolfo]]

- [[https://frontendmasters.com/courses/data-structures-interviews/][Introduction to Data Structures for Interviews]] with Bianca Gandolfo

- With Will Sentance:

  - [[https://frontendmasters.com/courses/javascript-hard-parts/][JavaScript: The Hard Parts]]

  - [[https://frontendmasters.com/courses/javascript-new-hard-parts/][JavaScript: The New Hard Parts]]

  - [[https://frontendmasters.com/courses/object-oriented-js/][JavaScript: The Hard Parts of Object Oriented JavaScript]]

I&#39;m just going to list [[https://frontendmasters.com/teachers/kyle-simpson/][Kyle Simpson&#39;s entire collection]] because they are *all* great

Other fav instructors:

- [[https://frontendmasters.com/teachers/scott-moss/][Scott Moss]]
- [[https://frontendmasters.com/teachers/shirley-wu/][Shirley Wu]]
- [[https://frontendmasters.com/teachers/kentcdodds/][Kent C. Dodds]]
- [[https://frontendmasters.com/teachers/jem-young/][Jem Young]]
- [[https://frontendmasters.com/teachers/lukas-ruebbelke/][Lukas Reubbelke]]
- [[https://frontendmasters.com/teachers/sarah-drasner/][Sarah Drasner]]
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/vagrant-notes.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>Vagrant Notes</title>
      <content>* Vagrant Notes
** Making Vagrant boxes go faster

  The typical defaults in the Vagrantfile create a wimpy box.

  My mac has a boatload of RAM and CPU cores to spare, thus making this a better config for working:


#+begin_src diff
   config.vm.provider :virtualbox do |vb|
-    vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, 1024]
+    vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, 4096, &quot;--vram&quot;, 12, &quot;--cpus&quot;, 4, &quot;--natdnshostresolver1&quot;, &quot;on&quot;]
   end
#+end_src

** Using a resolver to set the box&#39;s IP address
    Instead of hard wiring in an IP address for the vagrant box, you
    can have it look up a name in your host machine&#39;s /etc/hosts file,
    thusly:

    At the top of the Vagrant file:
    #+begin_src ruby
      require &#39;resolve&#39;
    #+end_src

    Then, inside the box configuration:
    #+begin_src ruby
      config.vm.provider :virtualbox do |vb|
        vb.customize [&quot;modifyvm&quot;, &quot;--natdnsresolver1&quot;, &quot;on&quot;]
        #...
      end

      config.vm.network :private_network, ip: Resolv.getaddress(&#39;&lt;vagrant box name from hosts&gt;&#39;)
    #+end_src

    And in your /etc/hosts file:

    #+begin_src
      192.168.80.80	&lt;vagrant box name&gt;
    #+end_src

    Set the IP address to an appropriate setting for your local
    network, and give the vagrant box a suitable name for your project
    and the local network. Using &quot;.dev&quot; as the tld should be good.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/ux-notes.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>UX Notes</title>
      <content>* UX Notes
** [[http://www.givegoodux.com/4-tips-adding-lean-ux-agile-development-process/][4 Tips for Adding Lean UX to an Agile Development Process]]

    As organizations of all shapes and sizes come to grips with the fact that UX is critical to project and product success, a common question resurfaces time and again:

    “How do we add Lean UX practices to our current process?”

    1) Hire experienced UX analysts and designers; you need at least one
       experienced, senior UX member capable of sharing the driving.

    2) There must be an “Iteration 0” in your process where “just
       enough” research, modeling and design happens.

    3) Follow a process where UX, design and development work is “chunked”
       and starts with the core, most broad-reaching areas of features and
       functionality.

    4) Use a collaborative, parallel work process to keep UX efforts
       both ahead and behind development efforts.

    capture date: [2015-03-19 Thu 16:30]
** [[http://semantic-ui.com/][Semantic UI Toolkit]]
   Date: &lt;2013-10-15 Tue 02:19&gt;

   UI is the vocabulary of the web.

   Semantic empowers designers and developers by creating a language
   for sharing UI.

   Semantic is an alternative to Twitter Bootstrap and other UI
   kits. It seems like it&#39;s a more readable and usable thing to me. It
   also is something that seems more easily customizable. It will be
   interesting to see how it plays out.

   Currently looking at using it on a few new sites, along with
   [[middleman]].
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/thor-notes.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>thor-notes</title>
      <content>** Thor Notes

*** Start here for next thor project

    Seriously, this has so much &quot;stock&quot; stuff:

    https://github.com/tamouse/rearrange_books/tree/start-here-for-next-thor-project

**** turn this thing into a thor thor generator!
     Dude, as if you&#39;re the first person to do this?


*** Giving a task multiple arguments

    Q: How can I have a task get multiple arguments, like many regular
    POSIX commands?

    Example:

    #+BEGIN_SRC shell-script
      cp source_file source_file source_file source_file ... dest_dir
    #+END_SRC

    Pretty simple:

    #+BEGIN_SRC ruby
      desc &quot;taskname ARGLIST&quot;
      def taskname(*args)
      end
    #+END_SRC

    would let you do:

    #+BEGIN_SRC shell-script
      thor taskname arg1 arg2 arg3 arg4
    #+END_SRC

    and ~args~ in the task would be ~[&quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;, &quot;arg4&quot;]~



*** Invoke a thor task by giving only a class option
    :PROPERTIES:
    :CAPTURE_DATE: [2016-11-06 Sun 01:11]
    :END:

    From stackoverflow: http://stackoverflow.com/a/7311357/742446

    [...use] Thor.map to invoke a command by only giving an
    option flag:

    #+BEGIN_SRC ruby
      map &#39;-F&#39; =&gt; &#39;foo&#39;
    #+END_SRC

    Now you can also pass parameters

    #+BEGIN_SRC ruby
      mythorcommand -F bar # =&gt; invokes foo(&quot;bar&quot;)
    #+END_SRC

    answered Sep 5 &#39;11 at 17:57 by tfischbach

*** Give thor a default task
    :PROPERTIES:
    :CAPTURE_DATE: [2016-11-06 Sun 01:13]
    :END:

    From stackoverflow: http://stackoverflow.com/a/23955971/742446

    I found a rather &#39;strange&#39; solution for this problem that is working quite well with me.

    You add a default task to Thor. Than you add the method_missing so
    that you can trick Thor into passing the default method as an
    argument if there are parameters to your application.

    Taking from your example, the solution would look like this:

    #+BEGIN_SRC ruby
      class MyThorCommand &lt; Thor
	default_task :my_default

	desc &quot;my_default&quot;, &quot;A simple default&quot;
	def my_default(*args)
          puts args.inspect
	end

	def method_missing(method, *args)
          args = [&quot;my_default&quot;, method.to_s] + args
          MyThorCommand.start(args)
	end

      end

      MyThorCommand.start(ARGV)
    #+END_SRC

    If this is in the file &quot;my_thor.rb&quot; an execution &quot;ruby my_thor.rb
    foo bar&quot; would show &#39;[&quot;foo&quot;, &quot;bar&quot;]&#39; as a result.

    answered May 30 &#39;14 at 13:38 by Edu

*** Making Thor scripts colourful

   capture date: [2015-10-11 Sun 02:06]

   In Thor::Actions, the various output commands can be made nicely
   colourful. You can append symbols representing various colours after
   the output string. For example:

   #+begin_src ruby
     say &quot;This will make you green with envy&quot;, :green
     say &quot;Don&#39;t be sad&quot;, :blue
     say &quot;ACK! AN ERROR!&quot;, :red
   #+end_src

   Colour symbols are defined in
   https://github.com/erikhuda/thor/blob/master/lib/thor/shell/color.rb


   #+begin_src ruby
     # Set color by using a string or one of the defined constants. If a third
     # option is set to true, it also adds bold to the string. This is based
     # on Highline implementation and it automatically appends CLEAR to the end
     # of the returned String.
     #
     # Pass foreground, background and bold options to this method as
     # symbols.
     #
     # Example:
     #
     #   set_color &quot;Hi!&quot;, :red, :on_white, :bold
     #
     # The available colors are:
     #
     #   :bold
     #   :black
     #   :red
     #   :green
     #   :yellow
     #   :blue
     #   :magenta
     #   :cyan
     #   :white
     #   :on_black
     #   :on_red
     #   :on_green
     #   :on_yellow
     #   :on_blue
     #   :on_magenta
     #   :on_cyan
     #   :on_white

   #+end_src
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/tech-inbox.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>Tech Inbox</title>
      <content>* Tech Inbox
** IDEA: use google sheets API to feed web site data
   :PROPERTIES:
   :CAPTURE_DATE: [2018-12-11 Tue 08:01]
   :END:

   #+BEGIN_QUOTE

   7. Google Sheets API Instead Of CMS

      Some projects require you to think outside the box. When Adam Quinlan was working on a site for a restaurant where the owner needed a CMS to edit the specials menu on a daily basis, Adam decided to not use a bloated CMS but a Google sheet instead. This makes the site easy to edit while it remains flat from static side generators. Nice!

   #+END_QUOTE
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/static-sites.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>static-sites</title>
      <content>** Static Sites notes

*** Hosting

    - IP: 45.55.188.49
    - memory: 512MB Ram
    - disk: 20GB SSD Disk
    - location: New York 3
    - OS: Ubuntu 14.04.3 x64

*** DNS

    Pointed mouseha.us on gandi:
    - A: *.mouseha.us -&gt; IP
    - A: @.mouseha.us -&gt; IP
    - CNAME: removed &quot;blog.mouseha.us&quot;

*** Software

    - build-essential
    - git-core -- DELETED, see below
    - curl
    - mysql-server, mysql-client
    - sqlite3
    - ruby 2.2.3
      - mkdir src
      - cd src
      - git clone https://github.com/postmodern/ruby-install.git
      - cd ruby-install
      - make install
    - node 4.2.3
      - cd src
      - wget https://nodejs.org/dist/v4.2.3/node-v4.2.3.tar.gz
      - tar zxvf node-v4.2.3.tar.gz
      - cd node-v4.2.3
      - ./configure
      - make
      - make install
    - emacs24
      - apt-get build-dep emacs24
      - cd src
      - wget http://ftp.gnu.org/gnu/emacs/emacs-24.5.tar.gz
      - untar
      - cd emacs-24.5
      - ./configure
      - make
      - make install
    - postfix
      - installed with emacs24
      - following https://easyengine.io/tutorials/linux/ubuntu-postfix-gmail-smtp/
      - set up for using tamouse.lists@gmail.com to relay
      - had to wait for *ages* to get gmail to give me the &quot;is this
	you?&quot; query
      - waiting to see if it works
    - nginx
      - simple virtual host configuration points to sites at
	~git/Sites/&lt;domain&gt;. For example, domain &quot;mouseha.us&quot; points to
	~git/Sites/mouseha.us/
      - sites:
	- static-sites
	- mouseha.us
	- ngblog.mouseha.us
	- pontiki.io -- just purchased at Gandi.Net for 2 years at $35/yr
    - git -- newest version from github
      - cd src
      - git clone https://github.com/git/git.git
      - cd git
      - make prefix=/usr all doc info
      - make prefix=/usr install install-doc install-html install-info

*** Accounts

**** git

     - set up my-dot-files in .dot-file
     - set up my-emacs-d in .emacs.d

**** directories

    - Sites
	- static-sites
	- mouseha.us
	- ngblog.mouseha.us
    - Repos -- correspond to Sites/*

	The repos will have post-recieve hooks to automatically update
	the corresponding static site.
*** [[http://stackoverflow.com/questions/10264249/cant-get-page-data-from-jekyll-plugin][Can&#39;t Get Page Data From Jekyll Plugin - Stack Overflow]]
    Date: &lt;2013-10-15 Tue 13:44&gt;

    Can’t get page data from Jekyll plugin

    I’m trying to write a custom tag plugin for Jekyll that will output
    a hierarchical navigation tree of all the pages (not posts) on the
    site. I’m basically wanting a bunch nested &lt;ul&gt;’s with links (with
    the page title as the link text) to the pages with the current page
    noted by a certain CSS class.


    I’m very inexperienced with ruby. I’m a PHP guy.

    I figured I’d start just by trying to iterate through all the pages
    and output a one-dimensional list just to make sure I could at least
    do that. Here’s what I have so far:


    module Jekyll

    class NavTree &lt; Liquid::Tag
    def initialize(tag_name, text, tokens)
    super
    end

    def render(context)
    site = context.registers[:site]
    output = &#39;&lt;ul&gt;&#39;
    site.pages.each do |page|
    output += &#39;&lt;li&gt;&lt;a href=&quot;&#39;+page.url+&#39;&quot;&gt;&#39;+page.title+&#39;&lt;/a&gt;&lt;/li&gt;&#39;
    end
    output += &#39;&lt;ul&gt;&#39;

    output
    end
    end

    end

    Liquid::Template.register_tag(&#39;nav_tree&#39;, Jekyll::NavTree)

    And I’m inserting it into my liquid template via {\% nav_tree %\}.

    The problem is that the page variable in the code above doesn’t have
    all the data that you’d expect. page.title is undefined and page.url
    is just the basename with a forward slash in front of it (e.g. for
    /a/b/c.html, it’s just giving me /c.html).


    What am I doing wrong?

    Side note: I already tried doing this with pure Liquid markup, and I
    eventually gave up. I can easily iterate through site.pages just
    fine with Liquid, but I couldn’t figure out a way to appropriately
    nest the lists.

    asked Apr 22 ‘12 at 0:34

    I created an issue on GitHub to see if anybody there knows the
    answer. –  jnrbsn Apr 30 ‘12 at 16:21

    Did you ever manage to get the nesting working? I’d love to see the
    final code if so –  Brand Aug 21 ‘12 at 19:35

    @Brand Unfortunately, I never got around to finishing it. –  jnrbsn
    Aug 23 ‘12 at 23:19

    I managed to hack the hierachical page tree together. It’s not
    pretty but I’ve posted it here: gist.github.com/3536551 in case
    anyone else stumbles on this question –  Brand Aug 30 ‘12 at 18:24


    2 Answers

    Try:

    module Jekyll

    # Add accessor for directory
    class Page
    attr_reader :dir
    end

    class NavTree &lt; Liquid::Tag
    def initialize(tag_name, text, tokens)
    super
    end

    def render(context)
    site = context.registers[:site]
    output = &#39;&lt;ul&gt;&#39;
    site.pages.each do |page|
    output += &#39;&lt;li&gt;&lt;a href=&quot;&#39;+page.dir+page.url+&#39;&quot;&gt;&#39;+(page.data[&#39;title&#39;] || page.url) +&#39;&lt;/a&gt;&lt;/li&gt;&#39;
    end
    output += &#39;&lt;ul&gt;&#39;
    output
    end
    end
    end

    Liquid::Template.register_tag(&#39;nav_tree&#39;, Jekyll::NavTree)


    With this code, I get Liquid error: can&#39;t convert nil into String. –
    jnrbsn May 30 ‘12 at 18:11


    You probably had a page without a title, so that page.data[‘title’]
    is nil. Replace w/ e.g. (page.data[‘title’] || page.url) . –  Mikael
    Borg Jun 4 ‘12 at 9:37

    Sorry for the delayed response. You were correct. I had a page
    without a title. Your solution works. –  jnrbsn Jun 15 ‘12 at 4:32


    page.title is not always defined (example: atom.xml). You have to
    check if it is defined. Then you can take page.name or not process
    the entry…

    def render(context)
    site = context.registers[:site]
    output = &#39;&lt;ul&gt;&#39;
    site.pages.each do |page|
    unless page.data[&#39;title&#39;].nil?
    t = page.data[&#39;title&#39;]
    else
    t = page.name
    end
    output += &quot;&lt;li&gt;&lt;a href=&quot;&#39;+page.dir+page.url+&#39;&quot;&gt;&#39;+t+&#39;&lt;/a&gt;&lt;/li&gt;&quot;
    end
    output += &#39;&lt;ul&gt;&#39;
    output
    end


    Shorten that unless..end a bit to: t = page.data[&#39;title&#39;] ||
    page.name –  tamouse 20 mins ago

*** [[http://middlemanapp.com/][middleman]]
    Date: &lt;2013-10-15 Tue 02:15&gt;
    Middleman is a static site generator using all the shortcuts and
    tools in modern web development.

    Considering using this for my resume builder, and my recipe
    file. Both seem ideal candidates for this thing. I might also
    switch over my comic snagger to using this instead of jekyll.

    Generally, I&#39;m liking the looks and idea of middleman better than
    jekyll, octopress and definitely frank.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/shell-notes.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>command line shells</title>
      <content>* command line shells
** Shell Notes
*** zsh
    :PROPERTIES:
    :LOCATION: This has been added to swaac.dev
    :END:

    - [[https://support.apple.com/en-us/HT208050][zsh is default on MacOS Catalina]]

**** online documentation

     - [[http://zsh.sourceforge.net/Doc/Release/zsh_toc.html#SEC_Contents][Table of Contents]]
     - [[http://zsh.sourceforge.net/FAQ/][FAQ]]

**** oh-my-zsh

     The sine qua non for zsh users: [[https://github.com/robbyrussell/oh-my-zsh/][https://github.com/robbyrussell/oh-my-zsh/]] ([[https://ohmyz.sh/][pretty web site]])


**** ZSH NOTES COLLECTOR

***** some zsh options to try

****** case-insensitive globbing

  The zsh option which controls this is CASE_GLOB. Since we want globbing to be case-insensitive, we want to turn the option off, so:

  #+BEGIN_SRC shell
    setopt NO_CASE_GLOB
  #+END_SRC

****** tab completion

  In zsh tab completion will replace the wildcard with the actual result.

  #+BEGIN_SRC shell
    % ls ~/d*&lt;tab&gt;
  #+END_SRC

  So after the tab you will see:

  #+BEGIN_SRC shell
    % ls /Users/armin/Desktop /Users/armin/Documents /Users/armin/Downloads
  #+END_SRC

  Using tab completion this way to see and possibly edit the actual replacement for wildcards is a useful safety net.

  In bash, pressing the tab key *twice* will list possible completions, but not substitute them in the command prompt.

  If you do not like this behavior in zsh then you can change to behavior similar to bash with:

  #+BEGIN_SRC shell
    setopt GLOB_COMPLETE
  #+END_SRC

****** saving history when shell exits

  By default, zsh does not save its history when the shell exits. The history is ‘forgotten’ when you close a Terminal window or tab. To make zsh save its history to a file when it exits, you need to set a variable in the shell:

  #+BEGIN_SRC shell
    HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
  #+END_SRC

****** using a single history file for all shells

  You can tell zsh to use a single, shared history file across the sessions and append to it rather than overwrite:

  share history across multiple zsh sessions
  #+BEGIN_SRC shell
    setopt SHARE_HISTORY
  #+END_SRC

  append to history
  #+BEGIN_SRC shell
    setopt APPEND_HISTORY
  #+END_SRC

****** write to history file after avery command

  Furthermore, you can tell zsh to update the history file after every command, rather than waiting for the shell to exit:

  add commands as they are typed, not at shell exit
  #+BEGIN_SRC shell
    setopt INC_APPEND_HISTORY
  #+END_SRC

****** removing some things from history file

  When you use a shared history file, it will grow very quickly, and you may want to use some options to clean out duplicates and blanks:

  expire duplicates first:
  #+BEGIN_SRC shell
    setopt HIST_EXPIRE_DUPS_FIRST
  #+END_SRC

  do not store duplications
  #+BEGIN_SRC shell
    setopt HIST_IGNORE_DUPS
  #+END_SRC

  ignore duplicates when searching
  #+BEGIN_SRC shell
    setopt HIST_FIND_NO_DUPS
  #+END_SRC

  remove blank lines from history
  #+BEGIN_SRC shell
    setopt HIST_REDUCE_BLANKS
  #+END_SRC

***** zsh completion

****** links

       - [[http://zsh.sourceforge.net/Doc/Release/Completion-System.html][Official zsh doc completion section]]
       - [[https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org][zsh-users zsh-completions-howto]]
       - [[https://github.com/zsh-users/zsh/blob/master/Etc/completion-style-guide][zsh-users zsh Completion Guide]]
       - [[https://github.com/scriptingosx/mac-zsh-completions][Repo of MacOS zsh completions]]

** Shell TODOs
** Shell Oneliners
    #+begin_src shell
      for f in * ; do mv &quot;$f&quot; $(echo $f | tr &quot; &quot; &quot;_&quot;) ; done # replace spaces in file names with underscores
      perl -i.bak -pe &#39;/^(#+ binding:)\s+&quot;(.*)&quot;/ &amp;&amp; ($one = $1) &amp;&amp; ($two = $2) &amp;&amp; ($two =~ s/ //g) &amp;&amp; ($_ = &quot;$one $two\n&quot;)&#39; $(find . -name &#39;*.yasnippet&#39;) # remove quotes and spaces from bindings in yasnippets
      for f in *.bak ; do diff &quot;${f%%.bak}&quot; &quot;$f&quot; ; done # find diff between backup and current files after a filtering operation
      for f in *.bak ; do mv -v &quot;$f&quot; &quot;${f%%.bak}&quot; ; done # push back original files after filtering operation
      for f in *.old ; do mv &quot;$f&quot; &quot;${f%%.old}.new&quot; ; done # rename old files with new extension
      find . -print0 | xargs -0 file # dealing with spaces in file names
      pcregrep &#39;me$&#39; /usr/share/dict/words | sed &#39;s/me$/.me/&#39; |  bin/checkavailable.pl
    #+end_src
    link: [[file:~/Dropbox/oneliners]]
    captured_on: [2015-01-26 Mon 06:47]


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/Tech/ruby-notes.org</id>
      <updated>2021-05-21T17:43:14-05:00</updated>
      <title>Ruby</title>
      <content>* Ruby

** Notes
*** [[http://www.saturnflyer.com/blog/jim/2015/01/20/ruby-forwardable-deep-dive/?utm_source%3Drubyweekly&amp;utm_medium%3Demail][Forwardable Deep Dive]] [2015-01-25 Sun]
    :PROPERTIES:
    :LOCATION: added to swaac.dev
    :END:
    #+AUTHOR: Jim Gay



*** TODO try out moneta in an application

** Books

*** Practical Object Oriented Design in Rails - Sandi Metz

***** On composition vs inheritance, Sandi Metz in POODR
   #+begin_src markdown
     &gt; Composition allows you to combine small parts to create more complex
     &gt; objects such that the whole becomes more than the sum of its
     &gt; parts. Composed objects tend to consist of simple, discrete entities
     &gt; that can easily be rearranged into new combinations. These simple
     &gt; objects are easy to understand, reuse, and test, but because they
     &gt; combine into a more complicated whole, the operation of the bigger
     &gt; application may not be as easy to understand as that of the
     &gt; individual parts.


     &gt; Composition, classical inheritance, and behavior sharing via modules
     &gt; are competing techniques for arranging code. Each has different
     &gt; costs and benefits; these differences predispose them to be better
     &gt; at solving slightly different problems.


     &gt; These techniques are tools, nothing more, and you’ll become a better
     &gt; designer if you practice each of them. Learning to use them properly
     &gt; is a matter of experience and judgment, and one of the best ways to
     &gt; gain experience is to learn from your own mistakes. The key to
     &gt; improving your design skills is to attempt these techniques, accept
     &gt; your errors cheerfully, remain detached from past design decisions,
     &gt; and refactor mercilessly.

     &gt; As you gain experience, you’ll get better at choosing the correct
     &gt; technique the first time, your applications will improve.”


     Excerpt From: Metz, Sandi. “Practical Object-Oriented Design in Ruby:
     An Agile Primer (Addison-Wesley Professional Ruby Series).”
     iBooks. https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=038BE4A901A3E1659EA914B97D73CA82

   #+end_src

*** The Well Grounded Rubyist

     #+begin_src markdown
       ## Who should read this book

       &gt; The Well-Grounded Rubyist, Second Edition is optimized for a reader
       &gt; who’s done some programming and perhaps even some Ruby and wants to
       &gt; learn more about the Ruby language—not only the specific techniques
       &gt; (although the book includes plenty of those), but also the design
       &gt; principles that make Ruby what it is. I’m a great believer in knowing
       &gt; what you’re doing. I also believe that knowing what you’re doing
       &gt; doesn’t mean you have to compose a treatise in your head every time
       &gt; you write a line of code; it means you know how to make the most out
       &gt; of the language, and understand how to analyze problems when they
       &gt; arise.
       &gt;
       &gt;
       &gt; [I]f this is your first foray into programming, be prepared to do a
       &gt; little extra self-imposed “homework” to get ramped up into the
       &gt; programming process—but by all means, give The Well-Grounded Rubyist,
       &gt; Second Edition a go. The book isn’t specifically an introduction to
       &gt; programming, but it does take you through all the practicalities,
       &gt; including the creation and running of program files, as well as
       &gt; explaining Ruby from the ground up

       Excerpt From: David A. Black. “The Well-Grounded Rubyist, Second
       Edition.”

     #+end_src


** Ruby one-liners
  #+name: one-liners
  #+begin_src ruby
    a=[1,2,3,4,4,5,6,6,6];Hash[a.group_by {|e| e}.map {|k,v| next if v.size ==1;[k,v.size]}.compact]
  #+end_src

** Ruby Testing
*** Capybara
**** DONE Scrolling the window in Capybara          :blog:ruby:spec:capybara:
   :PROPERTIES:
   :CAPTURE_DATE: [2019-03-06 Wed 16:45]
   :LOCATION: added to swaac.dev
   :END:


   This is a problem when we have a modal that is long and we need to get the &quot;Submit&quot; button.

   #+BEGIN_SRC ruby
     page.execute_script &quot;window.scrollBy(0,10000)&quot;
   #+END_SRC



** Ruby Meetings, Meetups
*** RubyMN 2014-02-24 7:00pm

**** AI Twitter Bot
***** Horse_Ebooks
***** rkelly_ebooks
      tweet rkelly lyrics
****** scrape
****** choose
****** vote
******* characterize
******* tag
******* bayes
******** classifier
******** guess funniness
******** human in the loop
******* post

***** what did we learn

****** try new things

****** make stupid shit

****** have some fun

****** josh kaplan
       @jkap
       git.io/rkelly_ebooks
       @rkelly_ebooks

**** Daemons in Ruby
     Ian Whitney @ianwhitney

***** what&#39;s a daemon?
****** Background jobs
******* resque
******* delayed jobs
******* sidekiq
****** Services
****** Responsive to changes


***** what else?
****** write your own
******* logging
******* error capturing
******* scheduling
****** daemon_kit
       https://github.com/kennethkalmer/daemon-kit


*** RubyMN Meeting 7:00pm-9:00pm
    &lt;%%(diary-float t 1 -1)&gt;
    Last Monday of the month

** RUBY REFILE TARGET
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
