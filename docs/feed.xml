<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://github.com/tamouse/swaac</id>
  <title>Tamouse&#39;s Software as a Craft blog</title>
  <updated>2020-03-22T18:07:47-05:00</updated>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number.md</id>
      <updated>2020-03-22T18:07:47-05:00</updated>
      <title>2020-02-10-git-follies-prefacing-commit-msg-with-ticket-number</title>
      <content>---
title: &quot;How To: Preface your git commit messages with the Jira ticket number&quot;
date: 2020-02-10T08:57:37-0600
categories: [&quot;git&quot;]
tags: [git-follies, commit-message, jira, how-to]
published: true
---

This is something you can build into your project&#39;s git hooks, that will preface your commit messages with the Jira ticket number based on the branch name.

[WIP]

We want something that will pull the tracking ticket number from the branch, like so:

| branch name                     | message prefix |
|:-------------------------------:|:--------------:|
| `kick-1234-this-cool-feature`   | `[KICK-1234]`  |
| `bug/KICK-789-woops`            | `[KICK-789]`   |
| `feature/kick_2100_the_precept` | `[KICK-2100]`  |
| `777_sunset_life`               | `[777]`        |
|                                 |                |

Create a hook for `.git/hooks/prepare-commit-msg` with the following script:

``` shell
# Current branch name: &quot;KICK-3586_revert_nullable_custom_field_creation&quot;
$ git rev-parse --abbrev-ref HEAD | ruby -ne &#39;ticket = %r{^(?&lt;proj&gt;\w+)[-_ ](?&lt;num&gt;\d+)}.match($_).named_captures; puts &quot;[#{ticket[&quot;proj&quot;].upcase}-#{ticket[&quot;num&quot;]}]&quot; &#39;
# =&gt; [KICK-3586]

```

Make sure the hook is executable.


When you make a commit, git will execute `.git/hooks/prepare-commit-msg .git/COMMIT_MESSAGE`

Adding the hook to a code repo.




Inspiration: https://medium.com/better-programming/how-to-automatically-add-the-ticket-number-in-git-commit-message-bda5426ded05
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/in-rails-prefer-use_zone-to-zone.md</id>
      <updated>2020-03-22T18:07:19-05:00</updated>
      <title>in-rails-prefer-use_zone-to-zone</title>
      <content>---
title: &quot;Prefer Time.use_zone to Time.zone in Rails&quot;
date: 2020-01-19
categories: [rails]
tags: [timezones]
---

&gt; Rails better practice for dealing with altering the current process&#39;s timezone

# In Rails, Prefer \`.use\_zone\` to \`.zone=\`

I had thought to write a post on this, but never got around to it.

[Prathamesh Sonpatki](https://prathamesh.tech/) [beat me to it :\)](https://prathamesh.tech/2019/07/11/use-time-use_zone-to-navigate-timezone/)

Essentially, this is the practice I use:

```text
Time.use_zone(current_user.timezone) do 
  # Do Time and DateTime operations under the auspices of the
  # current user&#39;s timezone setting.
  
  Time.current # The current time in the current user&#39;s timezone
  Time.zone.now # Equivalent to the above
end
```

It&#39;s better than just supposing that `Time.zone` has been set somewhere in the current process, **or** that `Time.zone` has been set to what the code in the block _expects it to be!_

## In Testing ##

The biggest source of error that I&#39;ve encountered for this isn&#39;t in requests, but actually in the spec test cases for the product. Some test cases blythely set `Time.zone` in a before action, but never reset it in an after action.

If possible, wrap the time zone use inside an `around` action:

```text
around(:each) do |example|
  Time.use_zone(some_timezone) do
    yield example
  end
end
```

### With [Timecop](https://github.com/travisjeffery/timecop) ###

Since Timecop is essentially mocking the system clock, you can use it with `.use_zone` with impunity.

```text
around do |example|
  Timecop.freeze do
    @account = Fabricate(:account)
    Time.use_zone(account.timezone) do
      yield example
    end
  end
end
```

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/01/gatsby-categories-and-tags.md</id>
      <updated>2020-03-22T18:05:13-05:00</updated>
      <title>gatsby-categories-and-tags</title>
      <content>---
title: &quot;Gatsby Categories and Tags&quot;
date: 2020-02-01

## Categories and Tags in Gatsby ##

I&#39;ve been re-writing my on-line recipe collection using Gatsby as an exercise. In the original Jekyll site, I had recipes organized into categories like chapters in a printed cookbook, and tags that allowed more fine-detailed structure, listing such things as ingredients, cuising type, and other things like being gluten-free. Both categories and tags were stored as entries in the frontmatter of each recipe in the collection.

To make that work, I needed to write a Jekyll plug-in to generate the category and tag pages. And to make it work in Gatsby, I needed to write something in `gatsby-node.js`

### Categories as Subdirectories

Instead of putting the category in the frontmatter, I decided to organize the recipe markdown into subdirectories under the `recipes/` content directory.

#### A hook for categories

To pull out the categories, I created a custom hook `useCategories` to run a static query and return the collection of category names:

```javascript
import { graphql, useStaticQuery } from &quot;gatsby&quot;
export const useRecipeCategories = () =&gt; {
  const { allDirectory } = useStaticQuery(
    graphql`
      query RECIPE_CATEGORIES {
        allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
          nodes {
            relativePath
          }
        }
      }
    `
  )
  return allDirectory.nodes.map(category =&gt; category.relativePath)
}
```

Putting that query into the GraphiQL IDE, the response is:

```text
{
  &quot;data&quot;: {
    &quot;allDirectory&quot;: {
      &quot;nodes&quot;: [
        {
          &quot;relativePath&quot;: &quot;baked-goods&quot;
        },
        {
          &quot;relativePath&quot;: &quot;desserts&quot;
        },
        {
          &quot;relativePath&quot;: &quot;breakfast&quot;
        },
        {
          &quot;relativePath&quot;: &quot;drinks&quot;
        },
        {
          &quot;relativePath&quot;: &quot;main-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;kitchen-tips&quot;
        },
        {
          &quot;relativePath&quot;: &quot;appetizers&quot;
        },
        {
          &quot;relativePath&quot;: &quot;pizza&quot;
        },
        {
          &quot;relativePath&quot;: &quot;salads&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sandwiches&quot;
        },
        {
          &quot;relativePath&quot;: &quot;sauces&quot;
        },
        {
          &quot;relativePath&quot;: &quot;side-dishes&quot;
        },
        {
          &quot;relativePath&quot;: &quot;soups&quot;
        }
      ]
    }
  }
}
```

That gives me a nice, reusable list of categories anywhere in the site.

#### Generating the Table of Contents

The `CategoriesMenu` component creates a list of the categories with links to each category page:

```javascript
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import { useRecipeCategories } from &quot;../hooks/useCategories.js&quot;

export default () =&gt; {
  const categories = useRecipeCategories()

  return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
}

```

\(I&#39;m still in the midst of generating a style for the site, so eventually the `ul` and `li` will get replaced with some styled components. That&#39;s not important for this discussion.\)

The `Link` to each category page expects them to be a page at the root of the route. These pages are not in the repo itself, and must be generated. The code to generate the category page is in `gatsby-node.js` :

```javascript
const { createFilePath } = require(`gatsby-source-filesystem`)
const path = require(`path`)

exports.createPages = ({ actions, graphql }) =&gt; {
  // ...
  const categoryTemplate = path.resolve(&quot;./src/templates/categoryTemplate.js&quot;)

  return graphql(`
    {
      # .. other queries
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }
  `).then(result =&gt; {

    // ... stuff for mdx pages

    const categories = result.data.allDirectory.nodes
    categories.forEach(category =&gt; {
      createPage({
        path: &quot;/&quot; + category.relativePath + &quot;/&quot;,
        component: categoryTemplate,
        context: {
          category: category.relativePath,
        },
      })
    })
    
    // ... more stuff
  })
}

```

The partial graphql query returns the relative paths from the recipes area, which is the same as we do in the `useCategories` hook; there ought to be a way to reuse that, but here it&#39;s part of a larger query \(redacted from the example\). Looping through the categories, I&#39;m running `createPage` on each node \(i.e. category\) and building a page using a template, quite like one does for making Markdown/MDX pages. The context contains the category &quot;slug&quot;, which is created below.

The categories need to be made into nodes:

```javascript
exports.onCreateNode = ({ node, actions, getNode }) =&gt; {
  const { createNodeField } = actions
  if (node.internal.type === `Mdx`) {
    const value = createFilePath({ node, getNode })
    // .. other nodes
    createNodeField({
      name: `recipeCategory`,
      node,
      value: value.split(&quot;/&quot;)[1],
    })
  }
}
```

This is pretty similar again to how you make slugs for Markdown/MDX psges. The `value` comes from file path created in line 4, and it looks like `/:relativePath/:recipeFilename/`. Since what we&#39;re looking for is the recipe category, that is the `:relativePath` in the string above. Splitting on the divider gives a `null` first value in the array, and `:relativePath` in the second slot, so the index is 1 to pull it out. There&#39;s probably better ways to do this, but this works.

### Tag pages

Tag pages are also created in `gatsby-node.js` but the way tags are collected to start with is very different from categories. Categories are determined by placement in a subdirectory, but tags are declared in the frontmatter of the recipe MDX file.

\(One _could_ do the same thing with categories, using a field in the frontmatter, but after working with that form in the Jekyll version for years, I&#39;ve decided doing them as subdirectories made more sense to me.\)

Going back to the `gatsby-node.js` file, the full query looks like this:

```graphql
    {
      allMdx {
        nodes {
          fields {
            slug
          }
          frontmatter {
            title
            tags
          }
          fileAbsolutePath
        }
      }
      allDirectory(filter: { absolutePath: { glob: &quot;**/recipes/*&quot; } }) {
        nodes {
          relativePath
        }
      }
    }

```

In this case, we need to collect the _unique_ tags from every recipe file, so while we are shooting the list building the recipe pages, we&#39;ll also collect the tags into a Set:

```graphql
    const recipes = result.data.allMdx.nodes
    let tags = new Set()

    // create page for each mdx file
    recipes.forEach(recipe =&gt; {
      createPage(/* .. for each recipe page .. */)

      if (recipe &amp;&amp; recipe.frontmatter &amp;&amp; recipe.frontmatter.tags) {
        recipe.frontmatter.tags.map(tag =&gt; {
          tags.add(tag)
        })
      }
    })
```

If there are a collection of tags in the recipe file, this adds them to the `tags` Set, which ensures only unique tags are collected.

Further down, we need to create the tag _pages_ :

```javascript
    tags.forEach(tag =&gt; {
      createPage({
        path: `/tags/${tag}/`,
        component: tagTemplate,
        context: {
          tag,
        },
      })
    })
```

### Putting Categories and Tags to use

#### The Category Menu in the Sidebar

I decided for this design iteration to put the categories into a sidebar arrangement \(I still haven&#39;t done any styling on this\). Recall the code up at **Generating the table of contents**: 

```jsx
return (
    &lt;ul&gt;
      {categories.map((category, index) =&gt; (
        &lt;li key={`category-menu-item-${index}`}&gt;
          &lt;Link to={`/${category}/`}&gt;{category}&lt;/Link&gt;
        &lt;/li&gt;
      ))}
    &lt;/ul&gt;
  )
```

which generates a link to each category page. This is mounted in the Sidebar.

#### Tag links in each recipe display

Tags are a little different at this point: they are only listed in each individual recipe page, using the `TagList` component:

```jsx
import React from &quot;react&quot;
import { Link } from &quot;gatsby&quot;
import styled from &quot;styled-components&quot;

export default ({ tags }) =&gt; {
  if (!tags || tags.length &lt; 1) {
    return null
  }
  return (
    &lt;TagListWrapper&gt;
      {tags.map((tag, index) =&gt; {
        return (
          &lt;TagListItem key={`tag-item-${index}`}&gt;
            &lt;Link to={`/tags/${tag}/`}&gt;{tag}&lt;/Link&gt;
          &lt;/TagListItem&gt;
        )
      })}
    &lt;/TagListWrapper&gt;
  )
}

const TagListWrapper = styled.ul`
  display: inline;
  list-style: none;
`
const TagListItem = styled.li`
  display: inline-block;
  &amp;:after {
    content: &quot;, &quot;;
    padding-right: 0.5em;
  }
  &amp;:last-child:after {
    content: &quot;&quot;;
  }
`
```

\(Yay, some styling\)

Eventually, I&#39;m going to want a tag cloud of some sort, too.

That&#39;s basically it. It took a minute for me to go from looking at how the Markdown / MDX in every gatsby tutorial worked, and had to work out how to generate the pages from other data queries. This seems pretty simple, but seems to be lacking from the tutorials.

</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-10-using-rails-url-helpers-outside-a-controller.md</id>
      <updated>2020-03-22T18:03:09-05:00</updated>
      <title>2020-03-10-using-rails-url-helpers-outside-a-controller</title>
      <content>---
title: &quot;Using Rails url_helpers outside a controller context&quot;
date: 2020-03-10T20:38
categories: [rails]
tags: [rails, helpers, url_helpers]
---

Sometimes I want to use a Rails url helper method outside the controller context.

Link: [Explanation on StackOverflow](https://stackoverflow.com/a/5456103 &quot;good examples for doing this&quot;)

In essence:

``` ruby
Rails.application.routes.url_helpers.new_post_path
```


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/03/2020-03-21-setting-git-default-editor.md</id>
      <updated>2020-03-22T18:02:38-05:00</updated>
      <title>2020-03-21-setting-git-default-editor</title>
      <content>---
title: &quot;Setting git&#39;s default editor&quot;
date: 2020-03-21
category: tools
keywords: git, editor, emacs
---


# Setting git&#39;s default editor #

By default, when git needs to fire up an editor to do something such as write a commmit message, it uses whatever is configured as the default editor for the user. (Configuring the user&#39;s default editor is an entirely differnt topic.)

There are a couple of ways to change this for `git`:

1. setting one or two environment variables
2. modifying the global git configuration

Of these, I long used the first way, since the environment variables are also recognized by other command line tools (although not all).

Recently I was made aware of method two, modifying the global git configuration.



## Settingh environment variables ##


Git will use two common environment variables, `EDITOR` and `VISUAL`, to determine what editor it should run. Some tools make a distinction between when these are used:

- `EDITOR` is used generally in an environments where there may or may not be a terminal available.
- `VISUAL` is used specifically when there is a terminal available.

Git doesn&#39;t really care, you can set one or the other. In the course of my career, I settled on the expediency of setting them both to the same thing and calling it a day.

## Modifying git global config ##

Head over to &lt;https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&gt; to see the official documentation on modifying the config.

The specific part to set the editor is described here:

&gt; **core.editor**
&gt;
&gt; By default, Git uses whatever you’ve set as your default text editor via one of the shell environment variables VISUAL or EDITOR, or else falls back to the vi editor to create and edit your commit and tag messages. To change that default to something else, you can use the core.editor setting:
&gt;
&gt;     $ git config --global core.editor emacs
&gt;
&gt; Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages.

They are already speaking my kind of language. But I want to go just a bit further and use `emacsclient` so as to not call up another instance of the full emacs editor if I can help it. Instead, I set the core.editor value to:

    emacsclient -a emacs

which will run emacsclient to use the currently running instance of emacs, *and*, if there is no currently running instance, start one up.

### A caveat ###

I initially used the command line arguments I normally run emacsclient with: `-c -n`, which say to open a new frame and not to wait for the editing session to finish. Bad move. If the git command is not forced to wait while I modify the commit message, it assumes it wasn&#39;t changed and aborts the commit. I also didn&#39;t want to have it be spawning new frames since that just gets messy if I forget to close them, which I most often do.

### I hear you, you don&#39;t use emacs ###

You aren&#39;t a dinosaur like I am, I got you.

You can run VSCode from the command line, or Atom, etc., etc., etc..  I&#39;m not going to teach you how to set that up, *but you should learn how if you don&#39;t because it will speed up your work.*

Here are some of the alternative:

- VSCode: `git config -global core.editor code`
- Atom: `git config --global core.editor atom`
- Vim: `git config --global core.editor vim`

## Git-mode in Editors ##

Most modern-day editors have a means of running git commands from inside the editor. This is often a far richer environment, closer to a GUI tool, really, than the command line offers. I use `magit` in emacs all the time, but I also use the command line all the time; some operations are better for one than the other. (By the way, `magit` has seriously the very best implementation for doing an interactive rebase, i.e., squashing your commits.)



</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-05-git-follies-save-points-and-silent-reverts.md</id>
      <updated>2020-02-05T08:40:37-06:00</updated>
      <title>2020-02-05-git-follies-save-points-and-silent-reverts</title>
      <content>---
title: &quot;Git Follies: Setting Save Points, and Performing Silent Reverts&quot;
date: 2020-02-05T08:26:22-0600
categories: [version-control]
tags: [git, branching, reverting]
series: &quot;The Git Follies&quot;
---

This is a little thing I&#39;ve used when working with git on multi-person projects with a remote repository and continuous integration and testing runs triggered by pushing a commit to the remote repository.

Most people know at least a little bit about branching and merging with git. A lot of folks aren&#39;t all that comfortable with doing that, all the same. For these folks, I want to offer a little bit of guideance, and hopefully extend that comfort a little bit nmore in working with git.

## Save Points ##

The first major concept I like to think of as &quot;save points&quot;. If you&#39;ve ever played a video or computer game that has lots of problem solving challenges, bosses to beat, levels to complete, they have the idea of setting a save point, essentially a place to come back into the game at the level you&#39;re working on without having to replay all the levels you&#39;ve already beaten.

### Commits are Save Points ###

Git commits act like save points for your work. If you&#39;re going along and decide what you&#39;ve done just won&#39;t work, you can reset to the last commit fairly easily with:

``` shell
git reset --hard
```

This just wipes all the changes in tracked files. It still leaves untracked files laying about though, which can be confusing, so you should run this set of commands:

``` shell
git status
git reset --hard
git status # shows untracked files
```

You can remove the untracked files using `rm` or use the `git clean` command:

``` shell
git status
git reset --hard
git status # shows untracked files
git clean --force
git status
```

And now you should be back at the previous commit, ready to start over.

A **major** caveat: this works *only* if all the work remains local and is not pushed up to the remote. More on this later.

But what if you don&#39;t want to get rid of the work, but just want to try another approach?

### Sub-branches are also save points ###

You can build a habit of creating a sub-branch when you embark on your task, and that makes it easier to try several approaches.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2020/02/2020-02-04-ci-skip-in-commit-title-bad.md</id>
      <updated>2020-02-04T14:36:16-06:00</updated>
      <title>2020-02-04-ci-skip-in-commit-title-bad</title>
      <content>---
title: &quot;TIL: putting [ci skip] in the commit message title breaks merge builds&quot;
date: 2020-02-04T13:04:05-0600
categories: [git]
tags: [git, CI, builds, merges, commit-messages, skip]
---

A common way to keep a specific commit from triggering a build on continuous integration services, such as travis and circle (maybe others) is to use `[ci skip]` or `[skip ci]` in the commit message.

If the skip directive is put in the commit message&#39;s first line, which is treated as the commit message **title**, it can cause problems for merges down the line.

When the list of commits is included in a merge commit&#39;s message body, the skip directive shows up, which causes the merge build to be skipped as well.

## bad commit message:

``` text
[ci skip] fix some typos
```

The directive will show up in the merge commit message body in the list of commits.


## good commit message:

``` text
updated the README

- fixed some typos and broken links

[ci skip]
```

Only the title shows up in the merge commit message body, the skip directive does not.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2016/12/html-color-codes.org</id>
      <updated>2020-01-19T04:27:23-06:00</updated>
      <title>html-color-codes</title>
      <content>f* Link: [[http://htmlcolorcodes.com/][HTML Color Codes]]               :webdesign:tools:color:css:html:swaac:
  :PROPERTIES:
  :CAPTURE_DATE: [2016-12-14 Wed 19:31]
  :LINK:     http://htmlcolorcodes.com/
  :TITLE:    HTML Color Codes
  :END:

  [[http://htmlcolorcodes.com/][HTML Color Codes]]

  Get HTML color codes, Hex color codes, RGB and HSL values
  with our color picker, color chart and HTML color names. Let&#39;s
  go!

  Easily find HTML color codes for your website using our
  color picker, color chart and HTML color names with Hex color codes,
  RGB and HSL values.
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2017/03/more-html5-semantics.org</id>
      <updated>2020-01-19T04:23:38-06:00</updated>
      <title>more-html5-semantics</title>
      <content>*** More HTML5 Semantics: Changes to Existing Features
    :PROPERTIES:
    :CAPTURE_DATE: [2017-03-02 Thu 08:32]
    :LINK:     https://www.sitepoint.com/more-html5-semantics-changes-to-existing-features/?utm_source=frontendfocus&amp;utm_medium=email
    :TITLE:    More HTML5 Semantics: Changes to Existing Features
    :DESCRIPTION: While new elements and APIs have been the primary focus of HTML5, this latest iteration of web markup has also brought with it changes to existing elements.
    :END:

Link to article [[https://www.sitepoint.com/more-html5-semantics-changes-to-existing-features/][More HTML5 Semantics: Changes to Existing Features]]

&gt; &quot;While new elements and APIs have been the primary focus of HTML5, this latest iteration of web markup has also brought with it changes to existing elements.&quot;


</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
    <entry>
      <id>https://github.com/tamouse/swaac/blob/master/posts/2015/03/how-to-use-alt-text-attribute-properly.org</id>
      <updated>2020-01-19T04:19:24-06:00</updated>
      <title>[[http://www.garcialo.com/html101/alt2.html][how to use alt text attribute]]</title>
      <content>* [[http://www.garcialo.com/html101/alt2.html][how to use alt text attribute]]

  From: [[http://www.garcialo.com/html101/][HTML 101 Because You Were Taught Wrong]] added: [2015-03-17 Tue 07:18]

** HTML Techniques for providing useful text alternatives: http://www.w3.org/TR/html-alt-techniques/

   - Always include the alt attribute

   - Put nothing in the alt attribute:
     - If the image is just eye candy
     - No important function
     - No important information

   - Images of text: alt should be the

   - Keep it short and sweet.
     - &quot;samurai cutting a watermelon in half&quot;
     - &quot;child skiing down a mountain&quot;
     - &quot;woman laughing alone with salad&quot; (/you&#39;re never alone with salad :grinning: /)
   - Don&#39;t say it&#39;s an image or photo.
   - Have your content creator provide the alt text.
   - &quot;What information are you trying to convey with this image?&quot;

** Alt text on social media

   See: [[https://caneadventures.blog/2019/12/02/alt-text-on-social-media/][Alt text on Social Media, Cane Adventures blog]] for a perspective on using alt text from a visually impaired blogger
   
</content>
      <author>
        <name>Tamara Temple</name>
        <email>tamara@tamouse.org</email>
      </author>
    </entry>
</feed>
