
*WARNING: This is old and likely obsolete.*

* RESEARCH: Posting a file with XMLHttpRequest

- Time-stamp: <2020-03-23 05:07:31 tamara>
- published date: [2018-11-06 Tue 13:46]
- keywords: XMLHttpRequest, file upload, JavaScript, research, React


See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_nothing_but_XMLHttpRequest][Using nothing but XMLHttpRequest]] <-- maybe not

See: [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Using_FormData_objects][Using FormData objects]] <-- necessary for files, I think

In contrast to [[./2018-11-06-posting-a-file-with-fetch-api.org][Posting with Fetch API]], this is a bit lower on the food chain in terms of JS stuff, *but* it lets you get access to ~progress~ events, for doing such things as displaying a progress bar. Yay.

** Using FormData

MDN makes a special note:

#+BEGIN_QUOTE
Note: As we said, FormData objects are not stringifiable objects. If you want to stringify a submitted data, use the previous pure-AJAX example. Note also that, although in this example there are some file <input> fields, when you submit a form through the FormData API you do not need to use the FileReader API also: files are automatically loaded and uploaded.
#+END_QUOTE

** Using Event Handlers

From the top of the page, just using / setting event handlers:

#+BEGIN_SRC rjsx
  function reqListener () {
    console.log(this.responseText);
  }

  var oReq = new XMLHttpRequest();

  // this sets the 'load' event handler, which fires when the file is fully loaded.
  // I think this works for POST/PUT as well...
  oReq.addEventListener("load", reqListener);

  oReq.open("GET", "http://www.example.org/example.txt");
  oReq.send();
#+END_SRC

There's a note [[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Monitoring_progress][somewhere on the page]] saying something about ~progress~ event handlers needing to be set before the ~.open~ call.

This would load up all the event handlers for XMLHttpRequest:

#+BEGIN_SRC rjsx
  let oReq = new XMLHttpRequest();

  oReq.addEventListener("progress", updateProgress);
  oReq.addEventListener("load", transferComplete);
  oReq.addEventListener("error", transferFailed);
  oReq.addEventListener("abort", transferCanceled);

  oReq.open();
#+END_SRC

** Progress Indication

The ~progress~ event handler takes in the progress event, which is defined at [[https://xhr.spec.whatwg.org/#interface-progressevent][WhatWG Progress Event specification]]. It has 3 attributes:

- ~lengthComputable~ [boolean] whether the length of the object is known
- ~loaded~ [number] how much has loaded so far
- ~total~ [number] how much there is to load

So progress can be calculated by:

#+BEGIN_SRC rjsx
  handleProgress = event => {
      let progress = 0
      if (event.total !== 0) {
          progress = event.loaded / event.total
      }
      const percentCompleted = progress * 100
      this,setState({ progress, percentCompleted })
  }

  handleLoaded = event => {
      this.setState({ progress: 1, percentCompleted: 100, loaded: true })
  }

  // ...

  request = () => {

      const req = new XMLHttpRequest()

      req.addEventListener('progress', this.handleProgress)
      req.addEventListener('load', this.handleLoaded)

      // ... etc
  }
#+END_SRC
