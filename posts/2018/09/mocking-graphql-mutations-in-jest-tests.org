
*WARNING: This is old and likely obsolete.*

* Mocking GraphQL Mutations in Jest Tests

- Time-stamp: <2020-03-23 05:06:41 tamara>
- original date: [2018-09-16 Sun]
- keywords: graphql, mutation, testing, mocking, jest, javascript, react

** Introduction

In creating react components that receive mutations from either the ~graphql~ HOC /Higher-order component/ or from the ~Mutation~ component as a child function, I've been writing them as their own component class or function and exporting them, so they can be used in tests without the apollo client provider.

This still leaves open the issue of testing the component code that calls the mutation. Since a mutation returns a promise, the mock mutation passed in should return a promise that resolves to the same form.

** A recent example

I had a recent example where I am updating a job in our system, and the update mutation returns the updated job. Here's the graphql query:

#+BEGIN_SRC graphql
  mutation JobUpdateMutation ($id: Int!, $job_update_input: JobUpdateInput!) {
    updateJob(id: $id, job_update_input: $job_update_input) {
      id job_number
    }
  }
#+END_SRC

The code under test would recieve that in a ~mutate~ property, and execute the mutation in an instance function:

#+BEGIN_SRC javascript
  mutate(payload)
      .then(response => {
          const {
              loading,
              error,
              data: { updateJob }
          } = response
          if (!loading && !error && updateJob) {
              self.props.onUpdate(updateJob)
          }
      })
  }
#+END_SRC

** Creating the mock implementation

Jest provides a rather nice mocking feature where you can implement how you want the mock to act when called. See [[https://jestjs.io/docs/en/mock-functions#mock-implementations]] for more info.

Implementing a promise-based mock is pretty easy:

#+BEGIN_SRC javascript
  let MockMutate = jest.fn().mockImplementation(args => {
    return new Promise((resolve, reject) => {
      return resolve({
        loading: false,
        error: null,
        data: {
          updateJob: args
        }
      })
    })
  })
#+END_SRC

Note that I'm just passing back the payload given the mutate function in the promise resolution. Since in this specific case I am not using the return from the mutation within the component, merely passing it along via a callback to the consumer of this component, I wasn't really worried about what got passed back beyond it being the structure assumed by the code.
